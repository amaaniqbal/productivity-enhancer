{"ast":null,"code":"/**\r\n * DevExtreme (viz/axes/datetime_breaks.js)\r\n * Version: 20.2.3\r\n * Build date: Tue Oct 20 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.generateDateBreaks = generateDateBreaks;\n\nvar _date = _interopRequireDefault(require(\"../../core/utils/date\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar days = [0, 1, 2, 3, 4, 5, 6];\n\nfunction getWeekendDays(workdays) {\n  return days.filter(function (day) {\n    return !workdays.some(function (workDay) {\n      return workDay === day;\n    });\n  });\n}\n\nfunction getNextDayIndex(dayIndex) {\n  return (dayIndex + 1) % 7;\n}\n\nfunction dayBetweenWeekend(weekend, day) {\n  var start = weekend.start;\n  var end = weekend.end;\n\n  while (start !== end) {\n    if (start === day) {\n      return true;\n    }\n\n    start = getNextDayIndex(start);\n  }\n\n  return false;\n}\n\nfunction getDaysDistance(day, end) {\n  var length = 0;\n\n  while (day !== end) {\n    day = getNextDayIndex(day);\n    length++;\n  }\n\n  return length;\n}\n\nfunction separateBreak(scaleBreak, day) {\n  var result = [];\n  var dayEnd = new Date(day);\n  dayEnd.setDate(day.getDate() + 1);\n\n  if (day > scaleBreak.from) {\n    result.push({\n      from: scaleBreak.from,\n      to: day\n    });\n  }\n\n  if (dayEnd < scaleBreak.to) {\n    result.push({\n      from: dayEnd,\n      to: scaleBreak.to\n    });\n  }\n\n  return result;\n}\n\nfunction getWeekEndDayIndices(workDays) {\n  var indices = getWeekendDays(workDays);\n\n  if (indices.length < 7) {\n    while (getNextDayIndex(indices[indices.length - 1]) === indices[0]) {\n      indices.unshift(indices.pop());\n    }\n  }\n\n  return indices;\n}\n\nfunction generateDateBreaksForWeekend(min, max, weekendDayIndices) {\n  var day = min.getDate();\n  var breaks = [];\n  var weekends = weekendDayIndices.reduce(function (obj, day) {\n    var currentWeekEnd = obj[1];\n\n    if (void 0 === currentWeekEnd.start) {\n      currentWeekEnd = {\n        start: day,\n        end: getNextDayIndex(day)\n      };\n      obj[0].push(currentWeekEnd);\n      return [obj[0], currentWeekEnd];\n    } else {\n      if (currentWeekEnd.end === day) {\n        currentWeekEnd.end = getNextDayIndex(day);\n        return obj;\n      }\n    }\n\n    currentWeekEnd = {\n      start: day,\n      end: getNextDayIndex(day)\n    };\n    obj[0].push(currentWeekEnd);\n    return [obj[0], currentWeekEnd];\n  }, [[], {}]);\n  weekends[0].forEach(function (weekend) {\n    var currentDate = new Date(min);\n    currentDate = _date.default.trimTime(currentDate);\n\n    while (currentDate < max) {\n      day = currentDate.getDay();\n      var date = currentDate.getDate();\n\n      if (dayBetweenWeekend(weekend, day)) {\n        var from = new Date(currentDate);\n        currentDate.setDate(date + getDaysDistance(day, weekend.end));\n        var to = new Date(currentDate);\n        breaks.push({\n          from: from,\n          to: to\n        });\n      }\n\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n  });\n  return breaks;\n}\n\nfunction excludeWorkDaysFromWeekEndBreaks(breaks, exactWorkDays) {\n  var result = breaks.slice();\n  var i;\n\n  var processWorkDay = function processWorkDay(workday) {\n    workday = _date.default.trimTime(new Date(workday));\n\n    if (result[i].from <= workday && result[i].to > workday) {\n      var separatedBreak = separateBreak(result[i], workday);\n\n      if (2 === separatedBreak.length) {\n        result.splice(i, 1, separatedBreak[0], separatedBreak[1]);\n      } else {\n        if (1 === separatedBreak.length) {\n          result.splice(i, 1, separatedBreak[0]);\n        } else {\n          result.splice(i, 1);\n        }\n      }\n    }\n  };\n\n  for (i = 0; i < result.length; i++) {\n    exactWorkDays.forEach(processWorkDay);\n  }\n\n  return result;\n}\n\nfunction generateBreaksForHolidays(min, max, holidays, weekendDayIndices) {\n  var day;\n\n  var dayInWeekend = function dayInWeekend(dayIndex) {\n    return dayIndex === day;\n  };\n\n  var adjustedMin = _date.default.trimTime(min);\n\n  var adjustedMax = _date.default.trimTime(max);\n\n  adjustedMax.setDate(max.getDate() + 1);\n  return holidays.reduce(function (breaks, holiday) {\n    var holidayStart;\n    var holidayEnd;\n    holiday = new Date(holiday);\n    day = holiday.getDay();\n\n    if (!weekendDayIndices.some(dayInWeekend) && holiday >= adjustedMin && holiday <= adjustedMax) {\n      holidayStart = _date.default.trimTime(holiday);\n      holidayEnd = new Date(holidayStart);\n      holidayEnd.setDate(holidayStart.getDate() + 1);\n      breaks.push({\n        from: holidayStart,\n        to: holidayEnd\n      });\n    }\n\n    return breaks;\n  }, []);\n}\n\nfunction calculateGaps(breaks) {\n  return breaks.map(function (b) {\n    return {\n      from: b.from,\n      to: b.to,\n      gapSize: _date.default.convertMillisecondsToDateUnits(b.to - b.from)\n    };\n  });\n}\n\nfunction generateDateBreaks(min, max, workWeek, singleWorkdays, holidays) {\n  var weekendDayIndices = getWeekEndDayIndices(workWeek);\n  var breaks = generateDateBreaksForWeekend(min, max, weekendDayIndices);\n  breaks.push.apply(breaks, generateBreaksForHolidays(min, max, holidays || [], weekendDayIndices));\n  return calculateGaps(excludeWorkDaysFromWeekEndBreaks(breaks, singleWorkdays || []));\n}","map":{"version":3,"sources":["E:/Monday.com/quickstart-react/node_modules/devextreme/viz/axes/datetime_breaks.js"],"names":["exports","generateDateBreaks","_date","_interopRequireDefault","require","obj","__esModule","days","getWeekendDays","workdays","filter","day","some","workDay","getNextDayIndex","dayIndex","dayBetweenWeekend","weekend","start","end","getDaysDistance","length","separateBreak","scaleBreak","result","dayEnd","Date","setDate","getDate","from","push","to","getWeekEndDayIndices","workDays","indices","unshift","pop","generateDateBreaksForWeekend","min","max","weekendDayIndices","breaks","weekends","reduce","currentWeekEnd","forEach","currentDate","default","trimTime","getDay","date","excludeWorkDaysFromWeekEndBreaks","exactWorkDays","slice","i","processWorkDay","workday","separatedBreak","splice","generateBreaksForHolidays","holidays","dayInWeekend","adjustedMin","adjustedMax","holiday","holidayStart","holidayEnd","calculateGaps","map","b","gapSize","convertMillisecondsToDateUnits","workWeek","singleWorkdays","apply"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (viz/axes/datetime_breaks.js)\r\n * Version: 20.2.3\r\n * Build date: Tue Oct 20 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.generateDateBreaks = generateDateBreaks;\r\nvar _date = _interopRequireDefault(require(\"../../core/utils/date\"));\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar days = [0, 1, 2, 3, 4, 5, 6];\r\n\r\nfunction getWeekendDays(workdays) {\r\n    return days.filter(function(day) {\r\n        return !workdays.some(function(workDay) {\r\n            return workDay === day\r\n        })\r\n    })\r\n}\r\n\r\nfunction getNextDayIndex(dayIndex) {\r\n    return (dayIndex + 1) % 7\r\n}\r\n\r\nfunction dayBetweenWeekend(weekend, day) {\r\n    var start = weekend.start;\r\n    var end = weekend.end;\r\n    while (start !== end) {\r\n        if (start === day) {\r\n            return true\r\n        }\r\n        start = getNextDayIndex(start)\r\n    }\r\n    return false\r\n}\r\n\r\nfunction getDaysDistance(day, end) {\r\n    var length = 0;\r\n    while (day !== end) {\r\n        day = getNextDayIndex(day);\r\n        length++\r\n    }\r\n    return length\r\n}\r\n\r\nfunction separateBreak(scaleBreak, day) {\r\n    var result = [];\r\n    var dayEnd = new Date(day);\r\n    dayEnd.setDate(day.getDate() + 1);\r\n    if (day > scaleBreak.from) {\r\n        result.push({\r\n            from: scaleBreak.from,\r\n            to: day\r\n        })\r\n    }\r\n    if (dayEnd < scaleBreak.to) {\r\n        result.push({\r\n            from: dayEnd,\r\n            to: scaleBreak.to\r\n        })\r\n    }\r\n    return result\r\n}\r\n\r\nfunction getWeekEndDayIndices(workDays) {\r\n    var indices = getWeekendDays(workDays);\r\n    if (indices.length < 7) {\r\n        while (getNextDayIndex(indices[indices.length - 1]) === indices[0]) {\r\n            indices.unshift(indices.pop())\r\n        }\r\n    }\r\n    return indices\r\n}\r\n\r\nfunction generateDateBreaksForWeekend(min, max, weekendDayIndices) {\r\n    var day = min.getDate();\r\n    var breaks = [];\r\n    var weekends = weekendDayIndices.reduce(function(obj, day) {\r\n        var currentWeekEnd = obj[1];\r\n        if (void 0 === currentWeekEnd.start) {\r\n            currentWeekEnd = {\r\n                start: day,\r\n                end: getNextDayIndex(day)\r\n            };\r\n            obj[0].push(currentWeekEnd);\r\n            return [obj[0], currentWeekEnd]\r\n        } else {\r\n            if (currentWeekEnd.end === day) {\r\n                currentWeekEnd.end = getNextDayIndex(day);\r\n                return obj\r\n            }\r\n        }\r\n        currentWeekEnd = {\r\n            start: day,\r\n            end: getNextDayIndex(day)\r\n        };\r\n        obj[0].push(currentWeekEnd);\r\n        return [obj[0], currentWeekEnd]\r\n    }, [\r\n        [], {}\r\n    ]);\r\n    weekends[0].forEach(function(weekend) {\r\n        var currentDate = new Date(min);\r\n        currentDate = _date.default.trimTime(currentDate);\r\n        while (currentDate < max) {\r\n            day = currentDate.getDay();\r\n            var date = currentDate.getDate();\r\n            if (dayBetweenWeekend(weekend, day)) {\r\n                var from = new Date(currentDate);\r\n                currentDate.setDate(date + getDaysDistance(day, weekend.end));\r\n                var to = new Date(currentDate);\r\n                breaks.push({\r\n                    from: from,\r\n                    to: to\r\n                })\r\n            }\r\n            currentDate.setDate(currentDate.getDate() + 1)\r\n        }\r\n    });\r\n    return breaks\r\n}\r\n\r\nfunction excludeWorkDaysFromWeekEndBreaks(breaks, exactWorkDays) {\r\n    var result = breaks.slice();\r\n    var i;\r\n    var processWorkDay = function(workday) {\r\n        workday = _date.default.trimTime(new Date(workday));\r\n        if (result[i].from <= workday && result[i].to > workday) {\r\n            var separatedBreak = separateBreak(result[i], workday);\r\n            if (2 === separatedBreak.length) {\r\n                result.splice(i, 1, separatedBreak[0], separatedBreak[1])\r\n            } else {\r\n                if (1 === separatedBreak.length) {\r\n                    result.splice(i, 1, separatedBreak[0])\r\n                } else {\r\n                    result.splice(i, 1)\r\n                }\r\n            }\r\n        }\r\n    };\r\n    for (i = 0; i < result.length; i++) {\r\n        exactWorkDays.forEach(processWorkDay)\r\n    }\r\n    return result\r\n}\r\n\r\nfunction generateBreaksForHolidays(min, max, holidays, weekendDayIndices) {\r\n    var day;\r\n    var dayInWeekend = function(dayIndex) {\r\n        return dayIndex === day\r\n    };\r\n    var adjustedMin = _date.default.trimTime(min);\r\n    var adjustedMax = _date.default.trimTime(max);\r\n    adjustedMax.setDate(max.getDate() + 1);\r\n    return holidays.reduce(function(breaks, holiday) {\r\n        var holidayStart;\r\n        var holidayEnd;\r\n        holiday = new Date(holiday);\r\n        day = holiday.getDay();\r\n        if (!weekendDayIndices.some(dayInWeekend) && holiday >= adjustedMin && holiday <= adjustedMax) {\r\n            holidayStart = _date.default.trimTime(holiday);\r\n            holidayEnd = new Date(holidayStart);\r\n            holidayEnd.setDate(holidayStart.getDate() + 1);\r\n            breaks.push({\r\n                from: holidayStart,\r\n                to: holidayEnd\r\n            })\r\n        }\r\n        return breaks\r\n    }, [])\r\n}\r\n\r\nfunction calculateGaps(breaks) {\r\n    return breaks.map(function(b) {\r\n        return {\r\n            from: b.from,\r\n            to: b.to,\r\n            gapSize: _date.default.convertMillisecondsToDateUnits(b.to - b.from)\r\n        }\r\n    })\r\n}\r\n\r\nfunction generateDateBreaks(min, max, workWeek, singleWorkdays, holidays) {\r\n    var weekendDayIndices = getWeekEndDayIndices(workWeek);\r\n    var breaks = generateDateBreaksForWeekend(min, max, weekendDayIndices);\r\n    breaks.push.apply(breaks, generateBreaksForHolidays(min, max, holidays || [], weekendDayIndices));\r\n    return calculateGaps(excludeWorkDaysFromWeekEndBreaks(breaks, singleWorkdays || []))\r\n}\r\n"]},"metadata":{},"sourceType":"script"}