{"ast":null,"code":"/**\r\n * DevExtreme (viz/translators/range.js)\r\n * Version: 20.2.3\r\n * Build date: Tue Oct 20 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.Range = void 0;\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _utils = require(\"../core/utils\");\n\nvar _isDefined = _type.isDefined;\nvar _isDate = _type.isDate;\nvar _isFunction = _type.isFunction;\nvar minSelector = \"min\";\nvar maxSelector = \"max\";\nvar minVisibleSelector = \"minVisible\";\nvar maxVisibleSelector = \"maxVisible\";\nvar baseSelector = \"base\";\nvar axisTypeSelector = \"axisType\";\n\nfunction otherLessThan(thisValue, otherValue) {\n  return otherValue < thisValue;\n}\n\nfunction otherGreaterThan(thisValue, otherValue) {\n  return otherValue > thisValue;\n}\n\nfunction compareAndReplace(thisValue, otherValue, setValue, compare) {\n  var otherValueDefined = _isDefined(otherValue);\n\n  if (_isDefined(thisValue)) {\n    if (otherValueDefined && compare(thisValue, otherValue)) {\n      setValue(otherValue);\n    }\n  } else {\n    if (otherValueDefined) {\n      setValue(otherValue);\n    }\n  }\n}\n\nvar Range = function Range(range) {\n  range && (0, _extend.extend)(this, range);\n};\n\nexports.Range = Range;\nvar _Range = Range;\n_Range.prototype = {\n  constructor: _Range,\n  addRange: function addRange(otherRange) {\n    var that = this;\n    var categories = that.categories;\n    var otherCategories = otherRange.categories;\n    var isDiscrete = \"discrete\" === that[axisTypeSelector];\n\n    var compareAndReplaceByField = function compareAndReplaceByField(field, compare) {\n      compareAndReplace(that[field], otherRange[field], function (value) {\n        that[field] = value;\n      }, compare);\n    };\n\n    var controlValuesByVisibleBounds = function controlValuesByVisibleBounds(valueField, visibleValueField, compare) {\n      compareAndReplace(that[valueField], that[visibleValueField], function (value) {\n        _isDefined(that[valueField]) && (that[valueField] = value);\n      }, compare);\n    };\n\n    var checkField = function checkField(field) {\n      that[field] = that[field] || otherRange[field];\n    };\n\n    checkField(\"invert\");\n    checkField(axisTypeSelector);\n    checkField(\"dataType\");\n    checkField(\"isSpacedMargin\");\n\n    if (\"logarithmic\" === that[axisTypeSelector]) {\n      checkField(baseSelector);\n    } else {\n      that[baseSelector] = void 0;\n    }\n\n    compareAndReplaceByField(minSelector, otherLessThan);\n    compareAndReplaceByField(maxSelector, otherGreaterThan);\n\n    if (isDiscrete) {\n      checkField(minVisibleSelector);\n      checkField(maxVisibleSelector);\n    } else {\n      compareAndReplaceByField(minVisibleSelector, otherLessThan);\n      compareAndReplaceByField(maxVisibleSelector, otherGreaterThan);\n    }\n\n    compareAndReplaceByField(\"interval\", otherLessThan);\n\n    if (!isDiscrete) {\n      controlValuesByVisibleBounds(minSelector, minVisibleSelector, otherLessThan);\n      controlValuesByVisibleBounds(minSelector, maxVisibleSelector, otherLessThan);\n      controlValuesByVisibleBounds(maxSelector, maxVisibleSelector, otherGreaterThan);\n      controlValuesByVisibleBounds(maxSelector, minVisibleSelector, otherGreaterThan);\n    }\n\n    if (void 0 === categories) {\n      that.categories = otherCategories;\n    } else {\n      that.categories = otherCategories ? (0, _utils.unique)(categories.concat(otherCategories)) : categories;\n    }\n\n    if (\"logarithmic\" === that[axisTypeSelector]) {\n      checkField(\"allowNegatives\");\n      compareAndReplaceByField(\"linearThreshold\", otherLessThan);\n    }\n\n    return that;\n  },\n  isEmpty: function isEmpty() {\n    return (!_isDefined(this[minSelector]) || !_isDefined(this[maxSelector])) && (!this.categories || 0 === this.categories.length);\n  },\n  correctValueZeroLevel: function correctValueZeroLevel() {\n    var that = this;\n\n    if (\"logarithmic\" === that[axisTypeSelector] || _isDate(that[maxSelector]) || _isDate(that[minSelector])) {\n      return that;\n    }\n\n    function setZeroLevel(min, max) {\n      that[min] < 0 && that[max] < 0 && (that[max] = 0);\n      that[min] > 0 && that[max] > 0 && (that[min] = 0);\n    }\n\n    setZeroLevel(minSelector, maxSelector);\n    setZeroLevel(minVisibleSelector, maxVisibleSelector);\n    return that;\n  },\n  sortCategories: function sortCategories(sort) {\n    if (false === sort || !this.categories) {\n      return;\n    }\n\n    if (Array.isArray(sort)) {\n      var sortValues = sort.map(function (item) {\n        return item.valueOf();\n      });\n      var filteredSeriesCategories = this.categories.filter(function (item) {\n        return sortValues.indexOf(item.valueOf()) === -1;\n      });\n      this.categories = sort.concat(filteredSeriesCategories);\n    } else {\n      var notAFunction = !_isFunction(sort);\n\n      if (notAFunction && \"string\" !== this.dataType) {\n        sort = function sort(a, b) {\n          return a.valueOf() - b.valueOf();\n        };\n      } else {\n        if (notAFunction) {\n          sort = false;\n        }\n      }\n\n      sort && this.categories.sort(sort);\n    }\n  }\n};","map":{"version":3,"sources":["E:/Monday.com/quickstart-react/node_modules/devextreme/viz/translators/range.js"],"names":["exports","Range","_type","require","_extend","_utils","_isDefined","isDefined","_isDate","isDate","_isFunction","isFunction","minSelector","maxSelector","minVisibleSelector","maxVisibleSelector","baseSelector","axisTypeSelector","otherLessThan","thisValue","otherValue","otherGreaterThan","compareAndReplace","setValue","compare","otherValueDefined","range","extend","_Range","prototype","constructor","addRange","otherRange","that","categories","otherCategories","isDiscrete","compareAndReplaceByField","field","value","controlValuesByVisibleBounds","valueField","visibleValueField","checkField","unique","concat","isEmpty","length","correctValueZeroLevel","setZeroLevel","min","max","sortCategories","sort","Array","isArray","sortValues","map","item","valueOf","filteredSeriesCategories","filter","indexOf","notAFunction","dataType","a","b"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (viz/translators/range.js)\r\n * Version: 20.2.3\r\n * Build date: Tue Oct 20 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.Range = void 0;\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _extend = require(\"../../core/utils/extend\");\r\nvar _utils = require(\"../core/utils\");\r\nvar _isDefined = _type.isDefined;\r\nvar _isDate = _type.isDate;\r\nvar _isFunction = _type.isFunction;\r\nvar minSelector = \"min\";\r\nvar maxSelector = \"max\";\r\nvar minVisibleSelector = \"minVisible\";\r\nvar maxVisibleSelector = \"maxVisible\";\r\nvar baseSelector = \"base\";\r\nvar axisTypeSelector = \"axisType\";\r\n\r\nfunction otherLessThan(thisValue, otherValue) {\r\n    return otherValue < thisValue\r\n}\r\n\r\nfunction otherGreaterThan(thisValue, otherValue) {\r\n    return otherValue > thisValue\r\n}\r\n\r\nfunction compareAndReplace(thisValue, otherValue, setValue, compare) {\r\n    var otherValueDefined = _isDefined(otherValue);\r\n    if (_isDefined(thisValue)) {\r\n        if (otherValueDefined && compare(thisValue, otherValue)) {\r\n            setValue(otherValue)\r\n        }\r\n    } else {\r\n        if (otherValueDefined) {\r\n            setValue(otherValue)\r\n        }\r\n    }\r\n}\r\nvar Range = function(range) {\r\n    range && (0, _extend.extend)(this, range)\r\n};\r\nexports.Range = Range;\r\nvar _Range = Range;\r\n_Range.prototype = {\r\n    constructor: _Range,\r\n    addRange: function(otherRange) {\r\n        var that = this;\r\n        var categories = that.categories;\r\n        var otherCategories = otherRange.categories;\r\n        var isDiscrete = \"discrete\" === that[axisTypeSelector];\r\n        var compareAndReplaceByField = function(field, compare) {\r\n            compareAndReplace(that[field], otherRange[field], function(value) {\r\n                that[field] = value\r\n            }, compare)\r\n        };\r\n        var controlValuesByVisibleBounds = function(valueField, visibleValueField, compare) {\r\n            compareAndReplace(that[valueField], that[visibleValueField], function(value) {\r\n                _isDefined(that[valueField]) && (that[valueField] = value)\r\n            }, compare)\r\n        };\r\n        var checkField = function(field) {\r\n            that[field] = that[field] || otherRange[field]\r\n        };\r\n        checkField(\"invert\");\r\n        checkField(axisTypeSelector);\r\n        checkField(\"dataType\");\r\n        checkField(\"isSpacedMargin\");\r\n        if (\"logarithmic\" === that[axisTypeSelector]) {\r\n            checkField(baseSelector)\r\n        } else {\r\n            that[baseSelector] = void 0\r\n        }\r\n        compareAndReplaceByField(minSelector, otherLessThan);\r\n        compareAndReplaceByField(maxSelector, otherGreaterThan);\r\n        if (isDiscrete) {\r\n            checkField(minVisibleSelector);\r\n            checkField(maxVisibleSelector)\r\n        } else {\r\n            compareAndReplaceByField(minVisibleSelector, otherLessThan);\r\n            compareAndReplaceByField(maxVisibleSelector, otherGreaterThan)\r\n        }\r\n        compareAndReplaceByField(\"interval\", otherLessThan);\r\n        if (!isDiscrete) {\r\n            controlValuesByVisibleBounds(minSelector, minVisibleSelector, otherLessThan);\r\n            controlValuesByVisibleBounds(minSelector, maxVisibleSelector, otherLessThan);\r\n            controlValuesByVisibleBounds(maxSelector, maxVisibleSelector, otherGreaterThan);\r\n            controlValuesByVisibleBounds(maxSelector, minVisibleSelector, otherGreaterThan)\r\n        }\r\n        if (void 0 === categories) {\r\n            that.categories = otherCategories\r\n        } else {\r\n            that.categories = otherCategories ? (0, _utils.unique)(categories.concat(otherCategories)) : categories\r\n        }\r\n        if (\"logarithmic\" === that[axisTypeSelector]) {\r\n            checkField(\"allowNegatives\");\r\n            compareAndReplaceByField(\"linearThreshold\", otherLessThan)\r\n        }\r\n        return that\r\n    },\r\n    isEmpty: function() {\r\n        return (!_isDefined(this[minSelector]) || !_isDefined(this[maxSelector])) && (!this.categories || 0 === this.categories.length)\r\n    },\r\n    correctValueZeroLevel: function() {\r\n        var that = this;\r\n        if (\"logarithmic\" === that[axisTypeSelector] || _isDate(that[maxSelector]) || _isDate(that[minSelector])) {\r\n            return that\r\n        }\r\n\r\n        function setZeroLevel(min, max) {\r\n            that[min] < 0 && that[max] < 0 && (that[max] = 0);\r\n            that[min] > 0 && that[max] > 0 && (that[min] = 0)\r\n        }\r\n        setZeroLevel(minSelector, maxSelector);\r\n        setZeroLevel(minVisibleSelector, maxVisibleSelector);\r\n        return that\r\n    },\r\n    sortCategories: function(sort) {\r\n        if (false === sort || !this.categories) {\r\n            return\r\n        }\r\n        if (Array.isArray(sort)) {\r\n            var sortValues = sort.map(function(item) {\r\n                return item.valueOf()\r\n            });\r\n            var filteredSeriesCategories = this.categories.filter(function(item) {\r\n                return sortValues.indexOf(item.valueOf()) === -1\r\n            });\r\n            this.categories = sort.concat(filteredSeriesCategories)\r\n        } else {\r\n            var notAFunction = !_isFunction(sort);\r\n            if (notAFunction && \"string\" !== this.dataType) {\r\n                sort = function(a, b) {\r\n                    return a.valueOf() - b.valueOf()\r\n                }\r\n            } else {\r\n                if (notAFunction) {\r\n                    sort = false\r\n                }\r\n            }\r\n            sort && this.categories.sort(sort)\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}