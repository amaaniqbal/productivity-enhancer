{"ast":null,"code":"const {\n  MONDAY_API_URL,\n  MONDAY_OAUTH_TOKEN_URL\n} = require(\"./../constants.js\");\n\nconst fetch = require(\"./fetch\");\n\nconst COULD_NOT_PARSE_JSON_RESPONSE_ERROR = \"Could not parse JSON from monday.com's GraphQL API response\";\nconst TOKEN_IS_REQUIRED_ERROR = \"Token is required\";\n\nfunction apiRequest(url, data, token, options = {}) {\n  return fetch.nodeFetch(url, {\n    method: options.method || \"POST\",\n    body: JSON.stringify(data || {}),\n    headers: {\n      Authorization: token,\n      \"Content-Type\": \"application/json\"\n    }\n  });\n}\n\nasync function execute(data, token, options = {}) {\n  if (!token && options.url !== MONDAY_OAUTH_TOKEN_URL) throw new Error(TOKEN_IS_REQUIRED_ERROR);\n  const url = options.url || MONDAY_API_URL;\n  const path = options.path || \"\";\n  const fullUrl = `${url}${path}`;\n  let response = await apiRequest(fullUrl, data, token, options);\n\n  try {\n    return await response.json();\n  } catch (err) {\n    throw new Error(COULD_NOT_PARSE_JSON_RESPONSE_ERROR);\n  }\n}\n\nmodule.exports = {\n  execute,\n  COULD_NOT_PARSE_JSON_RESPONSE_ERROR\n};","map":{"version":3,"sources":["E:/Monday.com/quickstart-react/node_modules/monday-sdk-js/src/monday-api-client/monday-api-client.js"],"names":["MONDAY_API_URL","MONDAY_OAUTH_TOKEN_URL","require","fetch","COULD_NOT_PARSE_JSON_RESPONSE_ERROR","TOKEN_IS_REQUIRED_ERROR","apiRequest","url","data","token","options","nodeFetch","method","body","JSON","stringify","headers","Authorization","execute","Error","path","fullUrl","response","json","err","module","exports"],"mappings":"AAAA,MAAM;AAAEA,EAAAA,cAAF;AAAkBC,EAAAA;AAAlB,IAA6CC,OAAO,CAAC,mBAAD,CAA1D;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAArB;;AAEA,MAAME,mCAAmC,GAAG,6DAA5C;AACA,MAAMC,uBAAuB,GAAG,mBAAhC;;AAEA,SAASC,UAAT,CAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,KAA/B,EAAsCC,OAAO,GAAG,EAAhD,EAAoD;AAClD,SAAOP,KAAK,CAACQ,SAAN,CAAgBJ,GAAhB,EAAqB;AAC1BK,IAAAA,MAAM,EAAEF,OAAO,CAACE,MAAR,IAAkB,MADA;AAE1BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeP,IAAI,IAAI,EAAvB,CAFoB;AAG1BQ,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAER,KADR;AAEP,sBAAgB;AAFT;AAHiB,GAArB,CAAP;AAQD;;AAED,eAAeS,OAAf,CAAuBV,IAAvB,EAA6BC,KAA7B,EAAoCC,OAAO,GAAG,EAA9C,EAAkD;AAChD,MAAI,CAACD,KAAD,IAAUC,OAAO,CAACH,GAAR,KAAgBN,sBAA9B,EAAsD,MAAM,IAAIkB,KAAJ,CAAUd,uBAAV,CAAN;AAEtD,QAAME,GAAG,GAAGG,OAAO,CAACH,GAAR,IAAeP,cAA3B;AACA,QAAMoB,IAAI,GAAGV,OAAO,CAACU,IAAR,IAAgB,EAA7B;AACA,QAAMC,OAAO,GAAI,GAAEd,GAAI,GAAEa,IAAK,EAA9B;AACA,MAAIE,QAAQ,GAAG,MAAMhB,UAAU,CAACe,OAAD,EAAUb,IAAV,EAAgBC,KAAhB,EAAuBC,OAAvB,CAA/B;;AAEA,MAAI;AACF,WAAO,MAAMY,QAAQ,CAACC,IAAT,EAAb;AACD,GAFD,CAEE,OAAOC,GAAP,EAAY;AACZ,UAAM,IAAIL,KAAJ,CAAUf,mCAAV,CAAN;AACD;AACF;;AAEDqB,MAAM,CAACC,OAAP,GAAiB;AAAER,EAAAA,OAAF;AAAWd,EAAAA;AAAX,CAAjB","sourcesContent":["const { MONDAY_API_URL, MONDAY_OAUTH_TOKEN_URL } = require(\"./../constants.js\");\nconst fetch = require(\"./fetch\");\n\nconst COULD_NOT_PARSE_JSON_RESPONSE_ERROR = \"Could not parse JSON from monday.com's GraphQL API response\";\nconst TOKEN_IS_REQUIRED_ERROR = \"Token is required\";\n\nfunction apiRequest(url, data, token, options = {}) {\n  return fetch.nodeFetch(url, {\n    method: options.method || \"POST\",\n    body: JSON.stringify(data || {}),\n    headers: {\n      Authorization: token,\n      \"Content-Type\": \"application/json\"\n    }\n  });\n}\n\nasync function execute(data, token, options = {}) {\n  if (!token && options.url !== MONDAY_OAUTH_TOKEN_URL) throw new Error(TOKEN_IS_REQUIRED_ERROR);\n\n  const url = options.url || MONDAY_API_URL;\n  const path = options.path || \"\";\n  const fullUrl = `${url}${path}`;\n  let response = await apiRequest(fullUrl, data, token, options);\n\n  try {\n    return await response.json();\n  } catch (err) {\n    throw new Error(COULD_NOT_PARSE_JSON_RESPONSE_ERROR);\n  }\n}\n\nmodule.exports = { execute, COULD_NOT_PARSE_JSON_RESPONSE_ERROR };\n"]},"metadata":{},"sourceType":"script"}