{"ast":null,"code":"/**\r\n * DevExtreme (core/utils/extend.js)\r\n * Version: 20.2.3\r\n * Build date: Tue Oct 20 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.extend = exports.extendFromObject = void 0;\n\nvar _type = require(\"./type\");\n\nvar extendFromObject = function extendFromObject(target, source, overrideExistingValues) {\n  target = target || {};\n\n  for (var prop in source) {\n    if (Object.prototype.hasOwnProperty.call(source, prop)) {\n      var value = source[prop];\n\n      if (!(prop in target) || overrideExistingValues) {\n        target[prop] = value;\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.extendFromObject = extendFromObject;\n\nvar extend = function extend(target) {\n  target = target || {};\n  var i = 1;\n  var deep = false;\n\n  if (\"boolean\" === typeof target) {\n    deep = target;\n    target = arguments[1] || {};\n    i++;\n  }\n\n  for (; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    if (null == source) {\n      continue;\n    }\n\n    for (var key in source) {\n      var targetValue = target[key];\n      var sourceValue = source[key];\n      var sourceValueIsArray = false;\n      var clone = void 0;\n\n      if (\"__proto__\" === key || target === sourceValue) {\n        continue;\n      }\n\n      if (deep && sourceValue && ((0, _type.isPlainObject)(sourceValue) || (sourceValueIsArray = Array.isArray(sourceValue)))) {\n        if (sourceValueIsArray) {\n          clone = targetValue && Array.isArray(targetValue) ? targetValue : [];\n        } else {\n          clone = targetValue && (0, _type.isPlainObject)(targetValue) ? targetValue : {};\n        }\n\n        target[key] = extend(deep, clone, sourceValue);\n      } else {\n        if (void 0 !== sourceValue) {\n          target[key] = sourceValue;\n        }\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.extend = extend;","map":{"version":3,"sources":["E:/Monday.com/quickstart-react/node_modules/devextreme/core/utils/extend.js"],"names":["exports","extend","extendFromObject","_type","require","target","source","overrideExistingValues","prop","Object","prototype","hasOwnProperty","call","value","i","deep","arguments","length","key","targetValue","sourceValue","sourceValueIsArray","clone","isPlainObject","Array","isArray"],"mappings":"AAAA;;;;;;;;AAQA;;AACAA,OAAO,CAACC,MAAR,GAAiBD,OAAO,CAACE,gBAAR,GAA2B,KAAK,CAAjD;;AACA,IAAIC,KAAK,GAAGC,OAAO,CAAC,QAAD,CAAnB;;AACA,IAAIF,gBAAgB,GAAG,SAAnBA,gBAAmB,CAASG,MAAT,EAAiBC,MAAjB,EAAyBC,sBAAzB,EAAiD;AACpEF,EAAAA,MAAM,GAAGA,MAAM,IAAI,EAAnB;;AACA,OAAK,IAAIG,IAAT,IAAiBF,MAAjB,EAAyB;AACrB,QAAIG,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCN,MAArC,EAA6CE,IAA7C,CAAJ,EAAwD;AACpD,UAAIK,KAAK,GAAGP,MAAM,CAACE,IAAD,CAAlB;;AACA,UAAI,EAAEA,IAAI,IAAIH,MAAV,KAAqBE,sBAAzB,EAAiD;AAC7CF,QAAAA,MAAM,CAACG,IAAD,CAAN,GAAeK,KAAf;AACH;AACJ;AACJ;;AACD,SAAOR,MAAP;AACH,CAXD;;AAYAL,OAAO,CAACE,gBAAR,GAA2BA,gBAA3B;;AACA,IAAID,MAAM,GAAG,SAASA,MAAT,CAAgBI,MAAhB,EAAwB;AACjCA,EAAAA,MAAM,GAAGA,MAAM,IAAI,EAAnB;AACA,MAAIS,CAAC,GAAG,CAAR;AACA,MAAIC,IAAI,GAAG,KAAX;;AACA,MAAI,cAAc,OAAOV,MAAzB,EAAiC;AAC7BU,IAAAA,IAAI,GAAGV,MAAP;AACAA,IAAAA,MAAM,GAAGW,SAAS,CAAC,CAAD,CAAT,IAAgB,EAAzB;AACAF,IAAAA,CAAC;AACJ;;AACD,SAAOA,CAAC,GAAGE,SAAS,CAACC,MAArB,EAA6BH,CAAC,EAA9B,EAAkC;AAC9B,QAAIR,MAAM,GAAGU,SAAS,CAACF,CAAD,CAAtB;;AACA,QAAI,QAAQR,MAAZ,EAAoB;AAChB;AACH;;AACD,SAAK,IAAIY,GAAT,IAAgBZ,MAAhB,EAAwB;AACpB,UAAIa,WAAW,GAAGd,MAAM,CAACa,GAAD,CAAxB;AACA,UAAIE,WAAW,GAAGd,MAAM,CAACY,GAAD,CAAxB;AACA,UAAIG,kBAAkB,GAAG,KAAzB;AACA,UAAIC,KAAK,GAAG,KAAK,CAAjB;;AACA,UAAI,gBAAgBJ,GAAhB,IAAuBb,MAAM,KAAKe,WAAtC,EAAmD;AAC/C;AACH;;AACD,UAAIL,IAAI,IAAIK,WAAR,KAAwB,CAAC,GAAGjB,KAAK,CAACoB,aAAV,EAAyBH,WAAzB,MAA0CC,kBAAkB,GAAGG,KAAK,CAACC,OAAN,CAAcL,WAAd,CAA/D,CAAxB,CAAJ,EAAyH;AACrH,YAAIC,kBAAJ,EAAwB;AACpBC,UAAAA,KAAK,GAAGH,WAAW,IAAIK,KAAK,CAACC,OAAN,CAAcN,WAAd,CAAf,GAA4CA,WAA5C,GAA0D,EAAlE;AACH,SAFD,MAEO;AACHG,UAAAA,KAAK,GAAGH,WAAW,IAAI,CAAC,GAAGhB,KAAK,CAACoB,aAAV,EAAyBJ,WAAzB,CAAf,GAAuDA,WAAvD,GAAqE,EAA7E;AACH;;AACDd,QAAAA,MAAM,CAACa,GAAD,CAAN,GAAcjB,MAAM,CAACc,IAAD,EAAOO,KAAP,EAAcF,WAAd,CAApB;AACH,OAPD,MAOO;AACH,YAAI,KAAK,CAAL,KAAWA,WAAf,EAA4B;AACxBf,UAAAA,MAAM,CAACa,GAAD,CAAN,GAAcE,WAAd;AACH;AACJ;AACJ;AACJ;;AACD,SAAOf,MAAP;AACH,CArCD;;AAsCAL,OAAO,CAACC,MAAR,GAAiBA,MAAjB","sourcesContent":["/**\r\n * DevExtreme (core/utils/extend.js)\r\n * Version: 20.2.3\r\n * Build date: Tue Oct 20 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.extend = exports.extendFromObject = void 0;\r\nvar _type = require(\"./type\");\r\nvar extendFromObject = function(target, source, overrideExistingValues) {\r\n    target = target || {};\r\n    for (var prop in source) {\r\n        if (Object.prototype.hasOwnProperty.call(source, prop)) {\r\n            var value = source[prop];\r\n            if (!(prop in target) || overrideExistingValues) {\r\n                target[prop] = value\r\n            }\r\n        }\r\n    }\r\n    return target\r\n};\r\nexports.extendFromObject = extendFromObject;\r\nvar extend = function extend(target) {\r\n    target = target || {};\r\n    var i = 1;\r\n    var deep = false;\r\n    if (\"boolean\" === typeof target) {\r\n        deep = target;\r\n        target = arguments[1] || {};\r\n        i++\r\n    }\r\n    for (; i < arguments.length; i++) {\r\n        var source = arguments[i];\r\n        if (null == source) {\r\n            continue\r\n        }\r\n        for (var key in source) {\r\n            var targetValue = target[key];\r\n            var sourceValue = source[key];\r\n            var sourceValueIsArray = false;\r\n            var clone = void 0;\r\n            if (\"__proto__\" === key || target === sourceValue) {\r\n                continue\r\n            }\r\n            if (deep && sourceValue && ((0, _type.isPlainObject)(sourceValue) || (sourceValueIsArray = Array.isArray(sourceValue)))) {\r\n                if (sourceValueIsArray) {\r\n                    clone = targetValue && Array.isArray(targetValue) ? targetValue : []\r\n                } else {\r\n                    clone = targetValue && (0, _type.isPlainObject)(targetValue) ? targetValue : {}\r\n                }\r\n                target[key] = extend(deep, clone, sourceValue)\r\n            } else {\r\n                if (void 0 !== sourceValue) {\r\n                    target[key] = sourceValue\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return target\r\n};\r\nexports.extend = extend;\r\n"]},"metadata":{},"sourceType":"script"}