{"ast":null,"code":"/**\r\n * DevExtreme (localization/intl/date.js)\r\n * Version: 20.2.3\r\n * Build date: Tue Oct 20 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.default = void 0;\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _core = _interopRequireDefault(require(\"../core\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar SYMBOLS_TO_REMOVE_REGEX = /[\\u200E\\u200F]/g;\n\nvar getIntlFormatter = function getIntlFormatter(format) {\n  return function (date) {\n    if (!format.timeZoneName) {\n      var year = date.getFullYear();\n      var recognizableAsTwentyCentury = String(year).length < 3;\n      var safeYearShift = 400;\n      var temporaryYearValue = recognizableAsTwentyCentury ? year + safeYearShift : year;\n      var utcDate = new Date(Date.UTC(temporaryYearValue, date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds()));\n\n      if (recognizableAsTwentyCentury) {\n        utcDate.setFullYear(year);\n      }\n\n      var utcFormat = (0, _extend.extend)({\n        timeZone: \"UTC\"\n      }, format);\n      return formatDateTime(utcDate, utcFormat);\n    }\n\n    return formatDateTime(date, format);\n  };\n};\n\nvar formattersCache = {};\n\nvar getFormatter = function getFormatter(format) {\n  var key = _core.default.locale() + \"/\" + JSON.stringify(format);\n\n  if (!formattersCache[key]) {\n    formattersCache[key] = new Intl.DateTimeFormat(_core.default.locale(), format).format;\n  }\n\n  return formattersCache[key];\n};\n\nfunction formatDateTime(date, format) {\n  return getFormatter(format)(date).replace(SYMBOLS_TO_REMOVE_REGEX, \"\");\n}\n\nvar formatNumber = function formatNumber(number) {\n  return new Intl.NumberFormat(_core.default.locale()).format(number);\n};\n\nvar getAlternativeNumeralsMap = function () {\n  var numeralsMapCache = {};\n  return function (locale) {\n    if (!(locale in numeralsMapCache)) {\n      if (\"0\" === formatNumber(0)) {\n        numeralsMapCache[locale] = false;\n        return false;\n      }\n\n      numeralsMapCache[locale] = {};\n\n      for (var i = 0; i < 10; ++i) {\n        numeralsMapCache[locale][formatNumber(i)] = i;\n      }\n    }\n\n    return numeralsMapCache[locale];\n  };\n}();\n\nvar normalizeNumerals = function normalizeNumerals(dateString) {\n  var alternativeNumeralsMap = getAlternativeNumeralsMap(_core.default.locale());\n\n  if (!alternativeNumeralsMap) {\n    return dateString;\n  }\n\n  return dateString.split(\"\").map(function (sign) {\n    return sign in alternativeNumeralsMap ? String(alternativeNumeralsMap[sign]) : sign;\n  }).join(\"\");\n};\n\nvar removeLeadingZeroes = function removeLeadingZeroes(str) {\n  return str.replace(/(\\D)0+(\\d)/g, \"$1$2\");\n};\n\nvar dateStringEquals = function dateStringEquals(actual, expected) {\n  return removeLeadingZeroes(actual) === removeLeadingZeroes(expected);\n};\n\nvar normalizeMonth = function normalizeMonth(text) {\n  return text.replace(\"d\\u2019\", \"de \");\n};\n\nvar intlFormats = {\n  day: {\n    day: \"numeric\"\n  },\n  dayofweek: {\n    weekday: \"long\"\n  },\n  longdate: {\n    weekday: \"long\",\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\"\n  },\n  longdatelongtime: {\n    weekday: \"long\",\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\",\n    hour: \"numeric\",\n    minute: \"numeric\",\n    second: \"numeric\"\n  },\n  longtime: {\n    hour: \"numeric\",\n    minute: \"numeric\",\n    second: \"numeric\"\n  },\n  month: {\n    month: \"long\"\n  },\n  monthandday: {\n    month: \"long\",\n    day: \"numeric\"\n  },\n  monthandyear: {\n    year: \"numeric\",\n    month: \"long\"\n  },\n  shortdate: {},\n  shorttime: {\n    hour: \"numeric\",\n    minute: \"numeric\"\n  },\n  shortyear: {\n    year: \"2-digit\"\n  },\n  year: {\n    year: \"numeric\"\n  }\n};\nObject.defineProperty(intlFormats, \"shortdateshorttime\", {\n  get: function get() {\n    var defaultOptions = Intl.DateTimeFormat(_core.default.locale()).resolvedOptions();\n    return {\n      year: defaultOptions.year,\n      month: defaultOptions.month,\n      day: defaultOptions.day,\n      hour: \"numeric\",\n      minute: \"numeric\"\n    };\n  }\n});\n\nvar getIntlFormat = function getIntlFormat(format) {\n  return \"string\" === typeof format && intlFormats[format.toLowerCase()];\n};\n\nvar monthNameStrategies = {\n  standalone: function standalone(monthIndex, monthFormat) {\n    var date = new Date(1999, monthIndex, 13, 1);\n    var dateString = getIntlFormatter({\n      month: monthFormat\n    })(date);\n    return dateString;\n  },\n  format: function format(monthIndex, monthFormat) {\n    var date = new Date(0, monthIndex, 13, 1);\n    var dateString = normalizeMonth(getIntlFormatter({\n      day: \"numeric\",\n      month: monthFormat\n    })(date));\n    var parts = dateString.split(\" \").filter(function (part) {\n      return part.indexOf(\"13\") < 0;\n    });\n\n    if (1 === parts.length) {\n      return parts[0];\n    } else {\n      if (2 === parts.length) {\n        return parts[0].length > parts[1].length ? parts[0] : parts[1];\n      }\n    }\n\n    return monthNameStrategies.standalone(monthIndex, monthFormat);\n  }\n};\nvar _default = {\n  engine: function engine() {\n    return \"intl\";\n  },\n  getMonthNames: function getMonthNames(format, type) {\n    var intlFormats = {\n      wide: \"long\",\n      abbreviated: \"short\",\n      narrow: \"narrow\"\n    };\n    var monthFormat = intlFormats[format || \"wide\"];\n    type = \"format\" === type ? type : \"standalone\";\n    return Array.apply(null, new Array(12)).map(function (_, monthIndex) {\n      return monthNameStrategies[type](monthIndex, monthFormat);\n    });\n  },\n  getDayNames: function getDayNames(format) {\n    var intlFormats = {\n      wide: \"long\",\n      abbreviated: \"short\",\n      \"short\": \"narrow\",\n      narrow: \"narrow\"\n    };\n\n    var getIntlDayNames = function getIntlDayNames(format) {\n      return Array.apply(null, new Array(7)).map(function (_, dayIndex) {\n        return getIntlFormatter({\n          weekday: format\n        })(new Date(0, 0, dayIndex));\n      });\n    };\n\n    var result = getIntlDayNames(intlFormats[format || \"wide\"]);\n    return result;\n  },\n  getPeriodNames: function getPeriodNames() {\n    var hour12Formatter = getIntlFormatter({\n      hour: \"numeric\",\n      hour12: true\n    });\n    return [1, 13].map(function (hours) {\n      var hourNumberText = formatNumber(1);\n      var timeParts = hour12Formatter(new Date(0, 0, 1, hours)).split(hourNumberText);\n\n      if (2 !== timeParts.length) {\n        return \"\";\n      }\n\n      var biggerPart = timeParts[0].length > timeParts[1].length ? timeParts[0] : timeParts[1];\n      return biggerPart.trim();\n    });\n  },\n  format: function format(date, _format) {\n    if (!date) {\n      return;\n    }\n\n    if (!_format) {\n      return date;\n    }\n\n    if (\"function\" !== typeof _format && !_format.formatter) {\n      _format = _format.type || _format;\n    }\n\n    var intlFormat = getIntlFormat(_format);\n\n    if (intlFormat) {\n      return getIntlFormatter(intlFormat)(date);\n    }\n\n    var formatType = _typeof(_format);\n\n    if (_format.formatter || \"function\" === formatType || \"string\" === formatType) {\n      return this.callBase.apply(this, arguments);\n    }\n\n    return getIntlFormatter(_format)(date);\n  },\n  parse: function parse(dateString, format) {\n    var _this = this;\n\n    var formatter;\n\n    if (format && !format.parser && \"string\" === typeof dateString) {\n      dateString = normalizeMonth(dateString);\n\n      formatter = function formatter(date) {\n        return normalizeMonth(_this.format(date, format));\n      };\n    }\n\n    return this.callBase(dateString, formatter || format);\n  },\n  _parseDateBySimpleFormat: function _parseDateBySimpleFormat(dateString, format) {\n    var _this2 = this;\n\n    dateString = normalizeNumerals(dateString);\n    var formatParts = this.getFormatParts(format);\n    var dateParts = dateString.split(/\\D+/).filter(function (part) {\n      return part.length > 0;\n    });\n\n    if (formatParts.length !== dateParts.length) {\n      return;\n    }\n\n    var dateArgs = this._generateDateArgs(formatParts, dateParts);\n\n    var constructDate = function constructDate(dateArgs, ampmShift) {\n      var hoursShift = ampmShift ? 12 : 0;\n      return new Date(dateArgs.year, dateArgs.month, dateArgs.day, (dateArgs.hours + hoursShift) % 24, dateArgs.minutes, dateArgs.seconds);\n    };\n\n    var constructValidDate = function constructValidDate(ampmShift) {\n      var parsedDate = constructDate(dateArgs, ampmShift);\n\n      if (dateStringEquals(normalizeNumerals(_this2.format(parsedDate, format)), dateString)) {\n        return parsedDate;\n      }\n    };\n\n    return constructValidDate(false) || constructValidDate(true);\n  },\n  _generateDateArgs: function _generateDateArgs(formatParts, dateParts) {\n    var currentDate = new Date();\n    var dateArgs = {\n      year: currentDate.getFullYear(),\n      month: currentDate.getMonth(),\n      day: currentDate.getDate(),\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    };\n    formatParts.forEach(function (formatPart, index) {\n      var datePart = dateParts[index];\n      var parsed = parseInt(datePart, 10);\n\n      if (\"month\" === formatPart) {\n        parsed -= 1;\n      }\n\n      dateArgs[formatPart] = parsed;\n    });\n    return dateArgs;\n  },\n  formatUsesMonthName: function formatUsesMonthName(format) {\n    if (\"object\" === _typeof(format) && !(format.type || format.format)) {\n      return \"long\" === format.month;\n    }\n\n    return this.callBase.apply(this, arguments);\n  },\n  formatUsesDayName: function formatUsesDayName(format) {\n    if (\"object\" === _typeof(format) && !(format.type || format.format)) {\n      return \"long\" === format.weekday;\n    }\n\n    return this.callBase.apply(this, arguments);\n  },\n  getFormatParts: function getFormatParts(format) {\n    if (\"string\" === typeof format) {\n      return this.callBase(format);\n    }\n\n    var intlFormat = (0, _extend.extend)({}, intlFormats[format.toLowerCase()]);\n    var date = new Date(2001, 2, 4, 5, 6, 7);\n    var formattedDate = getIntlFormatter(intlFormat)(date);\n    formattedDate = normalizeNumerals(formattedDate);\n    var formatParts = [{\n      name: \"year\",\n      value: 1\n    }, {\n      name: \"month\",\n      value: 3\n    }, {\n      name: \"day\",\n      value: 4\n    }, {\n      name: \"hours\",\n      value: 5\n    }, {\n      name: \"minutes\",\n      value: 6\n    }, {\n      name: \"seconds\",\n      value: 7\n    }];\n    return formatParts.map(function (part) {\n      return {\n        name: part.name,\n        index: formattedDate.indexOf(part.value)\n      };\n    }).filter(function (part) {\n      return part.index > -1;\n    }).sort(function (a, b) {\n      return a.index - b.index;\n    }).map(function (part) {\n      return part.name;\n    });\n  }\n};\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["E:/Monday.com/quickstart-react/node_modules/devextreme/localization/intl/date.js"],"names":["exports","default","_extend","require","_core","_interopRequireDefault","obj","__esModule","_typeof","Symbol","iterator","constructor","prototype","SYMBOLS_TO_REMOVE_REGEX","getIntlFormatter","format","date","timeZoneName","year","getFullYear","recognizableAsTwentyCentury","String","length","safeYearShift","temporaryYearValue","utcDate","Date","UTC","getMonth","getDate","getHours","getMinutes","getSeconds","setFullYear","utcFormat","extend","timeZone","formatDateTime","formattersCache","getFormatter","key","locale","JSON","stringify","Intl","DateTimeFormat","replace","formatNumber","number","NumberFormat","getAlternativeNumeralsMap","numeralsMapCache","i","normalizeNumerals","dateString","alternativeNumeralsMap","split","map","sign","join","removeLeadingZeroes","str","dateStringEquals","actual","expected","normalizeMonth","text","intlFormats","day","dayofweek","weekday","longdate","month","longdatelongtime","hour","minute","second","longtime","monthandday","monthandyear","shortdate","shorttime","shortyear","Object","defineProperty","get","defaultOptions","resolvedOptions","getIntlFormat","toLowerCase","monthNameStrategies","standalone","monthIndex","monthFormat","parts","filter","part","indexOf","_default","engine","getMonthNames","type","wide","abbreviated","narrow","Array","apply","_","getDayNames","getIntlDayNames","dayIndex","result","getPeriodNames","hour12Formatter","hour12","hours","hourNumberText","timeParts","biggerPart","trim","_format","formatter","intlFormat","formatType","callBase","arguments","parse","_this","parser","_parseDateBySimpleFormat","_this2","formatParts","getFormatParts","dateParts","dateArgs","_generateDateArgs","constructDate","ampmShift","hoursShift","minutes","seconds","constructValidDate","parsedDate","currentDate","forEach","formatPart","index","datePart","parsed","parseInt","formatUsesMonthName","formatUsesDayName","formattedDate","name","value","sort","a","b","module"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (localization/intl/date.js)\r\n * Version: 20.2.3\r\n * Build date: Tue Oct 20 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.default = void 0;\r\nvar _extend = require(\"../../core/utils/extend\");\r\nvar _core = _interopRequireDefault(require(\"../core\"));\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\n\r\nfunction _typeof(obj) {\r\n    \"@babel/helpers - typeof\";\r\n    if (\"function\" === typeof Symbol && \"symbol\" === typeof Symbol.iterator) {\r\n        _typeof = function(obj) {\r\n            return typeof obj\r\n        }\r\n    } else {\r\n        _typeof = function(obj) {\r\n            return obj && \"function\" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj\r\n        }\r\n    }\r\n    return _typeof(obj)\r\n}\r\nvar SYMBOLS_TO_REMOVE_REGEX = /[\\u200E\\u200F]/g;\r\nvar getIntlFormatter = function(format) {\r\n    return function(date) {\r\n        if (!format.timeZoneName) {\r\n            var year = date.getFullYear();\r\n            var recognizableAsTwentyCentury = String(year).length < 3;\r\n            var safeYearShift = 400;\r\n            var temporaryYearValue = recognizableAsTwentyCentury ? year + safeYearShift : year;\r\n            var utcDate = new Date(Date.UTC(temporaryYearValue, date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds()));\r\n            if (recognizableAsTwentyCentury) {\r\n                utcDate.setFullYear(year)\r\n            }\r\n            var utcFormat = (0, _extend.extend)({\r\n                timeZone: \"UTC\"\r\n            }, format);\r\n            return formatDateTime(utcDate, utcFormat)\r\n        }\r\n        return formatDateTime(date, format)\r\n    }\r\n};\r\nvar formattersCache = {};\r\nvar getFormatter = function(format) {\r\n    var key = _core.default.locale() + \"/\" + JSON.stringify(format);\r\n    if (!formattersCache[key]) {\r\n        formattersCache[key] = new Intl.DateTimeFormat(_core.default.locale(), format).format\r\n    }\r\n    return formattersCache[key]\r\n};\r\n\r\nfunction formatDateTime(date, format) {\r\n    return getFormatter(format)(date).replace(SYMBOLS_TO_REMOVE_REGEX, \"\")\r\n}\r\nvar formatNumber = function(number) {\r\n    return new Intl.NumberFormat(_core.default.locale()).format(number)\r\n};\r\nvar getAlternativeNumeralsMap = function() {\r\n    var numeralsMapCache = {};\r\n    return function(locale) {\r\n        if (!(locale in numeralsMapCache)) {\r\n            if (\"0\" === formatNumber(0)) {\r\n                numeralsMapCache[locale] = false;\r\n                return false\r\n            }\r\n            numeralsMapCache[locale] = {};\r\n            for (var i = 0; i < 10; ++i) {\r\n                numeralsMapCache[locale][formatNumber(i)] = i\r\n            }\r\n        }\r\n        return numeralsMapCache[locale]\r\n    }\r\n}();\r\nvar normalizeNumerals = function(dateString) {\r\n    var alternativeNumeralsMap = getAlternativeNumeralsMap(_core.default.locale());\r\n    if (!alternativeNumeralsMap) {\r\n        return dateString\r\n    }\r\n    return dateString.split(\"\").map(function(sign) {\r\n        return sign in alternativeNumeralsMap ? String(alternativeNumeralsMap[sign]) : sign\r\n    }).join(\"\")\r\n};\r\nvar removeLeadingZeroes = function(str) {\r\n    return str.replace(/(\\D)0+(\\d)/g, \"$1$2\")\r\n};\r\nvar dateStringEquals = function(actual, expected) {\r\n    return removeLeadingZeroes(actual) === removeLeadingZeroes(expected)\r\n};\r\nvar normalizeMonth = function(text) {\r\n    return text.replace(\"d\\u2019\", \"de \")\r\n};\r\nvar intlFormats = {\r\n    day: {\r\n        day: \"numeric\"\r\n    },\r\n    dayofweek: {\r\n        weekday: \"long\"\r\n    },\r\n    longdate: {\r\n        weekday: \"long\",\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        day: \"numeric\"\r\n    },\r\n    longdatelongtime: {\r\n        weekday: \"long\",\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        day: \"numeric\",\r\n        hour: \"numeric\",\r\n        minute: \"numeric\",\r\n        second: \"numeric\"\r\n    },\r\n    longtime: {\r\n        hour: \"numeric\",\r\n        minute: \"numeric\",\r\n        second: \"numeric\"\r\n    },\r\n    month: {\r\n        month: \"long\"\r\n    },\r\n    monthandday: {\r\n        month: \"long\",\r\n        day: \"numeric\"\r\n    },\r\n    monthandyear: {\r\n        year: \"numeric\",\r\n        month: \"long\"\r\n    },\r\n    shortdate: {},\r\n    shorttime: {\r\n        hour: \"numeric\",\r\n        minute: \"numeric\"\r\n    },\r\n    shortyear: {\r\n        year: \"2-digit\"\r\n    },\r\n    year: {\r\n        year: \"numeric\"\r\n    }\r\n};\r\nObject.defineProperty(intlFormats, \"shortdateshorttime\", {\r\n    get: function() {\r\n        var defaultOptions = Intl.DateTimeFormat(_core.default.locale()).resolvedOptions();\r\n        return {\r\n            year: defaultOptions.year,\r\n            month: defaultOptions.month,\r\n            day: defaultOptions.day,\r\n            hour: \"numeric\",\r\n            minute: \"numeric\"\r\n        }\r\n    }\r\n});\r\nvar getIntlFormat = function(format) {\r\n    return \"string\" === typeof format && intlFormats[format.toLowerCase()]\r\n};\r\nvar monthNameStrategies = {\r\n    standalone: function(monthIndex, monthFormat) {\r\n        var date = new Date(1999, monthIndex, 13, 1);\r\n        var dateString = getIntlFormatter({\r\n            month: monthFormat\r\n        })(date);\r\n        return dateString\r\n    },\r\n    format: function(monthIndex, monthFormat) {\r\n        var date = new Date(0, monthIndex, 13, 1);\r\n        var dateString = normalizeMonth(getIntlFormatter({\r\n            day: \"numeric\",\r\n            month: monthFormat\r\n        })(date));\r\n        var parts = dateString.split(\" \").filter(function(part) {\r\n            return part.indexOf(\"13\") < 0\r\n        });\r\n        if (1 === parts.length) {\r\n            return parts[0]\r\n        } else {\r\n            if (2 === parts.length) {\r\n                return parts[0].length > parts[1].length ? parts[0] : parts[1]\r\n            }\r\n        }\r\n        return monthNameStrategies.standalone(monthIndex, monthFormat)\r\n    }\r\n};\r\nvar _default = {\r\n    engine: function() {\r\n        return \"intl\"\r\n    },\r\n    getMonthNames: function(format, type) {\r\n        var intlFormats = {\r\n            wide: \"long\",\r\n            abbreviated: \"short\",\r\n            narrow: \"narrow\"\r\n        };\r\n        var monthFormat = intlFormats[format || \"wide\"];\r\n        type = \"format\" === type ? type : \"standalone\";\r\n        return Array.apply(null, new Array(12)).map(function(_, monthIndex) {\r\n            return monthNameStrategies[type](monthIndex, monthFormat)\r\n        })\r\n    },\r\n    getDayNames: function(format) {\r\n        var intlFormats = {\r\n            wide: \"long\",\r\n            abbreviated: \"short\",\r\n            \"short\": \"narrow\",\r\n            narrow: \"narrow\"\r\n        };\r\n        var getIntlDayNames = function(format) {\r\n            return Array.apply(null, new Array(7)).map(function(_, dayIndex) {\r\n                return getIntlFormatter({\r\n                    weekday: format\r\n                })(new Date(0, 0, dayIndex))\r\n            })\r\n        };\r\n        var result = getIntlDayNames(intlFormats[format || \"wide\"]);\r\n        return result\r\n    },\r\n    getPeriodNames: function() {\r\n        var hour12Formatter = getIntlFormatter({\r\n            hour: \"numeric\",\r\n            hour12: true\r\n        });\r\n        return [1, 13].map(function(hours) {\r\n            var hourNumberText = formatNumber(1);\r\n            var timeParts = hour12Formatter(new Date(0, 0, 1, hours)).split(hourNumberText);\r\n            if (2 !== timeParts.length) {\r\n                return \"\"\r\n            }\r\n            var biggerPart = timeParts[0].length > timeParts[1].length ? timeParts[0] : timeParts[1];\r\n            return biggerPart.trim()\r\n        })\r\n    },\r\n    format: function(date, _format) {\r\n        if (!date) {\r\n            return\r\n        }\r\n        if (!_format) {\r\n            return date\r\n        }\r\n        if (\"function\" !== typeof _format && !_format.formatter) {\r\n            _format = _format.type || _format\r\n        }\r\n        var intlFormat = getIntlFormat(_format);\r\n        if (intlFormat) {\r\n            return getIntlFormatter(intlFormat)(date)\r\n        }\r\n        var formatType = _typeof(_format);\r\n        if (_format.formatter || \"function\" === formatType || \"string\" === formatType) {\r\n            return this.callBase.apply(this, arguments)\r\n        }\r\n        return getIntlFormatter(_format)(date)\r\n    },\r\n    parse: function(dateString, format) {\r\n        var _this = this;\r\n        var formatter;\r\n        if (format && !format.parser && \"string\" === typeof dateString) {\r\n            dateString = normalizeMonth(dateString);\r\n            formatter = function(date) {\r\n                return normalizeMonth(_this.format(date, format))\r\n            }\r\n        }\r\n        return this.callBase(dateString, formatter || format)\r\n    },\r\n    _parseDateBySimpleFormat: function(dateString, format) {\r\n        var _this2 = this;\r\n        dateString = normalizeNumerals(dateString);\r\n        var formatParts = this.getFormatParts(format);\r\n        var dateParts = dateString.split(/\\D+/).filter(function(part) {\r\n            return part.length > 0\r\n        });\r\n        if (formatParts.length !== dateParts.length) {\r\n            return\r\n        }\r\n        var dateArgs = this._generateDateArgs(formatParts, dateParts);\r\n        var constructDate = function(dateArgs, ampmShift) {\r\n            var hoursShift = ampmShift ? 12 : 0;\r\n            return new Date(dateArgs.year, dateArgs.month, dateArgs.day, (dateArgs.hours + hoursShift) % 24, dateArgs.minutes, dateArgs.seconds)\r\n        };\r\n        var constructValidDate = function(ampmShift) {\r\n            var parsedDate = constructDate(dateArgs, ampmShift);\r\n            if (dateStringEquals(normalizeNumerals(_this2.format(parsedDate, format)), dateString)) {\r\n                return parsedDate\r\n            }\r\n        };\r\n        return constructValidDate(false) || constructValidDate(true)\r\n    },\r\n    _generateDateArgs: function(formatParts, dateParts) {\r\n        var currentDate = new Date;\r\n        var dateArgs = {\r\n            year: currentDate.getFullYear(),\r\n            month: currentDate.getMonth(),\r\n            day: currentDate.getDate(),\r\n            hours: 0,\r\n            minutes: 0,\r\n            seconds: 0\r\n        };\r\n        formatParts.forEach(function(formatPart, index) {\r\n            var datePart = dateParts[index];\r\n            var parsed = parseInt(datePart, 10);\r\n            if (\"month\" === formatPart) {\r\n                parsed -= 1\r\n            }\r\n            dateArgs[formatPart] = parsed\r\n        });\r\n        return dateArgs\r\n    },\r\n    formatUsesMonthName: function(format) {\r\n        if (\"object\" === _typeof(format) && !(format.type || format.format)) {\r\n            return \"long\" === format.month\r\n        }\r\n        return this.callBase.apply(this, arguments)\r\n    },\r\n    formatUsesDayName: function(format) {\r\n        if (\"object\" === _typeof(format) && !(format.type || format.format)) {\r\n            return \"long\" === format.weekday\r\n        }\r\n        return this.callBase.apply(this, arguments)\r\n    },\r\n    getFormatParts: function(format) {\r\n        if (\"string\" === typeof format) {\r\n            return this.callBase(format)\r\n        }\r\n        var intlFormat = (0, _extend.extend)({}, intlFormats[format.toLowerCase()]);\r\n        var date = new Date(2001, 2, 4, 5, 6, 7);\r\n        var formattedDate = getIntlFormatter(intlFormat)(date);\r\n        formattedDate = normalizeNumerals(formattedDate);\r\n        var formatParts = [{\r\n            name: \"year\",\r\n            value: 1\r\n        }, {\r\n            name: \"month\",\r\n            value: 3\r\n        }, {\r\n            name: \"day\",\r\n            value: 4\r\n        }, {\r\n            name: \"hours\",\r\n            value: 5\r\n        }, {\r\n            name: \"minutes\",\r\n            value: 6\r\n        }, {\r\n            name: \"seconds\",\r\n            value: 7\r\n        }];\r\n        return formatParts.map(function(part) {\r\n            return {\r\n                name: part.name,\r\n                index: formattedDate.indexOf(part.value)\r\n            }\r\n        }).filter(function(part) {\r\n            return part.index > -1\r\n        }).sort(function(a, b) {\r\n            return a.index - b.index\r\n        }).map(function(part) {\r\n            return part.name\r\n        })\r\n    }\r\n};\r\nexports.default = _default;\r\nmodule.exports = exports.default;\r\n"]},"metadata":{},"sourceType":"script"}