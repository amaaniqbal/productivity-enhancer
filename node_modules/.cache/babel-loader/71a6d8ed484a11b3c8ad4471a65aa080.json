{"ast":null,"code":"/**\r\n * DevExtreme (exporter/excel_format_converter.js)\r\n * Version: 20.2.3\r\n * Build date: Tue Oct 20 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.default = void 0;\n\nvar _string = require(\"../core/utils/string\");\n\nvar _number = _interopRequireDefault(require(\"../localization/number\"));\n\nvar _date = _interopRequireDefault(require(\"../localization/date\"));\n\nvar _type = require(\"../core/utils/type\");\n\nvar _date2 = require(\"../localization/ldml/date.format\");\n\nvar _language_codes = require(\"../localization/language_codes\");\n\nrequire(\"../localization/currency\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar ARABIC_ZERO_CODE = 1632;\nvar DEFINED_NUMBER_FORMTATS = {\n  thousands: \"#,##0{0},&quot;K&quot;\",\n  millions: \"#,##0{0},,&quot;M&quot;\",\n  billions: \"#,##0{0},,,&quot;B&quot;\",\n  trillions: \"#,##0{0},,,,&quot;T&quot;\",\n  percent: \"0{0}%\",\n  decimal: \"#{0}\",\n  fixedpoint: \"#,##0{0}\",\n  exponential: \"0{0}E+00\",\n  currency: \" \"\n};\nvar PERIOD_REGEXP = /a+/g;\nvar DAY_REGEXP = /E/g;\nvar DO_REGEXP = /dE+/g;\nvar STANDALONE_MONTH_REGEXP = /L/g;\nvar HOUR_REGEXP = /h/g;\nvar SLASH_REGEXP = /\\//g;\nvar SQUARE_OPEN_BRACKET_REGEXP = /\\[/g;\nvar SQUARE_CLOSE_BRACKET_REGEXP = /]/g;\nvar ANY_REGEXP = /./g;\nvar excelFormatConverter = {\n  _applyPrecision: function (format, precision) {\n    var result;\n    var i;\n\n    if (precision > 0) {\n      result = \"decimal\" !== format ? \".\" : \"\";\n\n      for (i = 0; i < precision; i++) {\n        result += \"0\";\n      }\n\n      return result;\n    }\n\n    return \"\";\n  },\n  _hasArabicDigits: function (text) {\n    var code;\n\n    for (var i = 0; i < text.length; i++) {\n      code = text.charCodeAt(i);\n\n      if (code >= ARABIC_ZERO_CODE && code < ARABIC_ZERO_CODE + 10) {\n        return true;\n      }\n    }\n\n    return false;\n  },\n  _convertDateFormatToOpenXml: function (format) {\n    return format.replace(SLASH_REGEXP, \"\\\\/\").split(\"'\").map(function (datePart, index) {\n      if (index % 2 === 0) {\n        return datePart.replace(PERIOD_REGEXP, \"AM/PM\").replace(DO_REGEXP, \"d\").replace(DAY_REGEXP, \"d\").replace(STANDALONE_MONTH_REGEXP, \"M\").replace(HOUR_REGEXP, \"H\").replace(SQUARE_OPEN_BRACKET_REGEXP, \"\\\\[\").replace(SQUARE_CLOSE_BRACKET_REGEXP, \"\\\\]\");\n      }\n\n      if (datePart) {\n        return datePart.replace(ANY_REGEXP, \"\\\\$&\");\n      }\n\n      return \"'\";\n    }).join(\"\");\n  },\n  _convertDateFormat: function (format) {\n    var formattedValue = (_date.default.format(new Date(2009, 8, 8, 6, 5, 4), format) || \"\").toString();\n    var result = (0, _date2.getFormat)(function (value) {\n      return _date.default.format(value, format);\n    });\n\n    if (result) {\n      result = this._convertDateFormatToOpenXml(result);\n      result = this._getLanguageInfo(formattedValue) + result;\n    }\n\n    return result;\n  },\n  _getLanguageInfo: function (defaultPattern) {\n    var languageID = (0, _language_codes.getLanguageId)();\n    var languageIDStr = languageID ? languageID.toString(16) : \"\";\n    var languageInfo = \"\";\n\n    if (this._hasArabicDigits(defaultPattern)) {\n      while (languageIDStr.length < 3) {\n        languageIDStr = \"0\" + languageIDStr;\n      }\n\n      languageInfo = \"[$-2010\" + languageIDStr + \"]\";\n    } else {\n      if (languageIDStr) {\n        languageInfo = \"[$-\" + languageIDStr + \"]\";\n      }\n    }\n\n    return languageInfo;\n  },\n  _convertNumberFormat: function (format, precision, currency) {\n    var result;\n    var excelFormat;\n\n    if (\"currency\" === format) {\n      excelFormat = _number.default.getOpenXmlCurrencyFormat(currency);\n    } else {\n      excelFormat = DEFINED_NUMBER_FORMTATS[format.toLowerCase()];\n    }\n\n    if (excelFormat) {\n      result = (0, _string.format)(excelFormat, this._applyPrecision(format, precision));\n    }\n\n    return result;\n  },\n  convertFormat: function (format, precision, type, currency) {\n    if ((0, _type.isDefined)(format)) {\n      if (\"date\" === type) {\n        return excelFormatConverter._convertDateFormat(format);\n      } else {\n        if ((0, _type.isString)(format) && DEFINED_NUMBER_FORMTATS[format.toLowerCase()]) {\n          return excelFormatConverter._convertNumberFormat(format, precision, currency);\n        }\n      }\n    }\n  }\n};\nvar _default = excelFormatConverter;\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["E:/Monday.com/quickstart-react/node_modules/devextreme/exporter/excel_format_converter.js"],"names":["exports","default","_string","require","_number","_interopRequireDefault","_date","_type","_date2","_language_codes","obj","__esModule","ARABIC_ZERO_CODE","DEFINED_NUMBER_FORMTATS","thousands","millions","billions","trillions","percent","decimal","fixedpoint","exponential","currency","PERIOD_REGEXP","DAY_REGEXP","DO_REGEXP","STANDALONE_MONTH_REGEXP","HOUR_REGEXP","SLASH_REGEXP","SQUARE_OPEN_BRACKET_REGEXP","SQUARE_CLOSE_BRACKET_REGEXP","ANY_REGEXP","excelFormatConverter","_applyPrecision","format","precision","result","i","_hasArabicDigits","text","code","length","charCodeAt","_convertDateFormatToOpenXml","replace","split","map","datePart","index","join","_convertDateFormat","formattedValue","Date","toString","getFormat","value","_getLanguageInfo","defaultPattern","languageID","getLanguageId","languageIDStr","languageInfo","_convertNumberFormat","excelFormat","getOpenXmlCurrencyFormat","toLowerCase","convertFormat","type","isDefined","isString","_default","module"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (exporter/excel_format_converter.js)\r\n * Version: 20.2.3\r\n * Build date: Tue Oct 20 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.default = void 0;\r\nvar _string = require(\"../core/utils/string\");\r\nvar _number = _interopRequireDefault(require(\"../localization/number\"));\r\nvar _date = _interopRequireDefault(require(\"../localization/date\"));\r\nvar _type = require(\"../core/utils/type\");\r\nvar _date2 = require(\"../localization/ldml/date.format\");\r\nvar _language_codes = require(\"../localization/language_codes\");\r\nrequire(\"../localization/currency\");\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar ARABIC_ZERO_CODE = 1632;\r\nvar DEFINED_NUMBER_FORMTATS = {\r\n    thousands: \"#,##0{0},&quot;K&quot;\",\r\n    millions: \"#,##0{0},,&quot;M&quot;\",\r\n    billions: \"#,##0{0},,,&quot;B&quot;\",\r\n    trillions: \"#,##0{0},,,,&quot;T&quot;\",\r\n    percent: \"0{0}%\",\r\n    decimal: \"#{0}\",\r\n    fixedpoint: \"#,##0{0}\",\r\n    exponential: \"0{0}E+00\",\r\n    currency: \" \"\r\n};\r\nvar PERIOD_REGEXP = /a+/g;\r\nvar DAY_REGEXP = /E/g;\r\nvar DO_REGEXP = /dE+/g;\r\nvar STANDALONE_MONTH_REGEXP = /L/g;\r\nvar HOUR_REGEXP = /h/g;\r\nvar SLASH_REGEXP = /\\//g;\r\nvar SQUARE_OPEN_BRACKET_REGEXP = /\\[/g;\r\nvar SQUARE_CLOSE_BRACKET_REGEXP = /]/g;\r\nvar ANY_REGEXP = /./g;\r\nvar excelFormatConverter = {\r\n    _applyPrecision: function(format, precision) {\r\n        var result;\r\n        var i;\r\n        if (precision > 0) {\r\n            result = \"decimal\" !== format ? \".\" : \"\";\r\n            for (i = 0; i < precision; i++) {\r\n                result += \"0\"\r\n            }\r\n            return result\r\n        }\r\n        return \"\"\r\n    },\r\n    _hasArabicDigits: function(text) {\r\n        var code;\r\n        for (var i = 0; i < text.length; i++) {\r\n            code = text.charCodeAt(i);\r\n            if (code >= ARABIC_ZERO_CODE && code < ARABIC_ZERO_CODE + 10) {\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    },\r\n    _convertDateFormatToOpenXml: function(format) {\r\n        return format.replace(SLASH_REGEXP, \"\\\\/\").split(\"'\").map(function(datePart, index) {\r\n            if (index % 2 === 0) {\r\n                return datePart.replace(PERIOD_REGEXP, \"AM/PM\").replace(DO_REGEXP, \"d\").replace(DAY_REGEXP, \"d\").replace(STANDALONE_MONTH_REGEXP, \"M\").replace(HOUR_REGEXP, \"H\").replace(SQUARE_OPEN_BRACKET_REGEXP, \"\\\\[\").replace(SQUARE_CLOSE_BRACKET_REGEXP, \"\\\\]\")\r\n            }\r\n            if (datePart) {\r\n                return datePart.replace(ANY_REGEXP, \"\\\\$&\")\r\n            }\r\n            return \"'\"\r\n        }).join(\"\")\r\n    },\r\n    _convertDateFormat: function(format) {\r\n        var formattedValue = (_date.default.format(new Date(2009, 8, 8, 6, 5, 4), format) || \"\").toString();\r\n        var result = (0, _date2.getFormat)(function(value) {\r\n            return _date.default.format(value, format)\r\n        });\r\n        if (result) {\r\n            result = this._convertDateFormatToOpenXml(result);\r\n            result = this._getLanguageInfo(formattedValue) + result\r\n        }\r\n        return result\r\n    },\r\n    _getLanguageInfo: function(defaultPattern) {\r\n        var languageID = (0, _language_codes.getLanguageId)();\r\n        var languageIDStr = languageID ? languageID.toString(16) : \"\";\r\n        var languageInfo = \"\";\r\n        if (this._hasArabicDigits(defaultPattern)) {\r\n            while (languageIDStr.length < 3) {\r\n                languageIDStr = \"0\" + languageIDStr\r\n            }\r\n            languageInfo = \"[$-2010\" + languageIDStr + \"]\"\r\n        } else {\r\n            if (languageIDStr) {\r\n                languageInfo = \"[$-\" + languageIDStr + \"]\"\r\n            }\r\n        }\r\n        return languageInfo\r\n    },\r\n    _convertNumberFormat: function(format, precision, currency) {\r\n        var result;\r\n        var excelFormat;\r\n        if (\"currency\" === format) {\r\n            excelFormat = _number.default.getOpenXmlCurrencyFormat(currency)\r\n        } else {\r\n            excelFormat = DEFINED_NUMBER_FORMTATS[format.toLowerCase()]\r\n        }\r\n        if (excelFormat) {\r\n            result = (0, _string.format)(excelFormat, this._applyPrecision(format, precision))\r\n        }\r\n        return result\r\n    },\r\n    convertFormat: function(format, precision, type, currency) {\r\n        if ((0, _type.isDefined)(format)) {\r\n            if (\"date\" === type) {\r\n                return excelFormatConverter._convertDateFormat(format)\r\n            } else {\r\n                if ((0, _type.isString)(format) && DEFINED_NUMBER_FORMTATS[format.toLowerCase()]) {\r\n                    return excelFormatConverter._convertNumberFormat(format, precision, currency)\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\nvar _default = excelFormatConverter;\r\nexports.default = _default;\r\nmodule.exports = exports.default;\r\n"]},"metadata":{},"sourceType":"script"}