{"ast":null,"code":"/**\r\n * DevExtreme (viz/core/series_family.js)\r\n * Version: 20.2.3\r\n * Build date: Tue Oct 20 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.SeriesFamily = SeriesFamily;\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _math = require(\"../../core/utils/math\");\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _utils = require(\"./utils\");\n\nvar round = Math.round,\n    abs = Math.abs,\n    pow = Math.pow,\n    sqrt = Math.sqrt;\nvar _min = Math.min;\nvar DEFAULT_BAR_GROUP_PADDING = .3;\n\nfunction validateBarPadding(barPadding) {\n  return barPadding < 0 || barPadding > 1 ? void 0 : barPadding;\n}\n\nfunction validateBarGroupPadding(barGroupPadding) {\n  return barGroupPadding < 0 || barGroupPadding > 1 ? DEFAULT_BAR_GROUP_PADDING : barGroupPadding;\n}\n\nfunction isStackExist(series, arg) {\n  return series.some(function (s) {\n    return !s.getOptions().ignoreEmptyPoints || s.getPointsByArg(arg, true).some(function (point) {\n      return point.hasValue();\n    });\n  });\n}\n\nfunction correctStackCoordinates(series, currentStacks, arg, stack, parameters, barsArea, seriesStackIndexCallback) {\n  series.forEach(function (series) {\n    var stackIndex = seriesStackIndexCallback(currentStacks.indexOf(stack), currentStacks.length);\n    var points = series.getPointsByArg(arg, true);\n    var barPadding = validateBarPadding(series.getOptions().barPadding);\n    var barWidth = series.getOptions().barWidth;\n    var offset = getOffset(stackIndex, parameters);\n    var width = parameters.width;\n    var extraParameters;\n\n    if (stackIndex === -1) {\n      return;\n    }\n\n    if ((0, _type.isDefined)(barPadding) || (0, _type.isDefined)(barWidth)) {\n      extraParameters = calculateParams(barsArea, currentStacks.length, 1 - barPadding, barWidth);\n      width = extraParameters.width;\n      offset = getOffset(stackIndex, extraParameters);\n    }\n\n    correctPointCoordinates(points, width, offset);\n  });\n}\n\nfunction adjustBarSeriesDimensionsCore(series, options, seriesStackIndexCallback) {\n  var commonStacks = [];\n  var allArguments = [];\n  var seriesInStacks = {};\n  var barGroupWidth = options.barGroupWidth;\n  var interval = series[0] && series[0].getArgumentAxis().getTranslator().getInterval();\n  var barsArea = barGroupWidth ? interval > barGroupWidth ? barGroupWidth : interval : interval * (1 - validateBarGroupPadding(options.barGroupPadding));\n  series.forEach(function (s, i) {\n    var stackName = s.getStackName() || s.getBarOverlapGroup() || i.toString();\n    var argument;\n\n    for (argument in s.pointsByArgument) {\n      if (allArguments.indexOf(argument.valueOf()) === -1) {\n        allArguments.push(argument.valueOf());\n      }\n    }\n\n    if (commonStacks.indexOf(stackName) === -1) {\n      commonStacks.push(stackName);\n      seriesInStacks[stackName] = [];\n    }\n\n    seriesInStacks[stackName].push(s);\n  });\n  allArguments.forEach(function (arg) {\n    var currentStacks = commonStacks.reduce(function (stacks, stack) {\n      if (isStackExist(seriesInStacks[stack], arg)) {\n        stacks.push(stack);\n      }\n\n      return stacks;\n    }, []);\n    var parameters = calculateParams(barsArea, currentStacks.length);\n    commonStacks.forEach(function (stack) {\n      correctStackCoordinates(seriesInStacks[stack], currentStacks, arg, stack, parameters, barsArea, seriesStackIndexCallback);\n    });\n  });\n}\n\nfunction calculateParams(barsArea, count, percentWidth, fixedBarWidth) {\n  var spacing;\n  var width;\n\n  if (fixedBarWidth) {\n    width = _min(fixedBarWidth, round(barsArea / count));\n    spacing = count > 1 ? round((barsArea - width * count) / (count - 1)) : 0;\n  } else {\n    if ((0, _type.isDefined)(percentWidth)) {\n      width = round(barsArea * percentWidth / count);\n      spacing = round(count > 1 ? (barsArea - barsArea * percentWidth) / (count - 1) : 0);\n    } else {\n      spacing = round(barsArea / count * .2);\n      width = round((barsArea - spacing * (count - 1)) / count);\n    }\n  }\n\n  return {\n    width: width > 1 ? width : 1,\n    spacing: spacing,\n    middleIndex: count / 2\n  };\n}\n\nfunction getOffset(stackIndex, parameters) {\n  return (stackIndex - parameters.middleIndex + .5) * parameters.width - (parameters.middleIndex - stackIndex - .5) * parameters.spacing;\n}\n\nfunction correctPointCoordinates(points, width, offset) {\n  (0, _iterator.each)(points, function (_, point) {\n    point.correctCoordinates({\n      width: width,\n      offset: offset\n    });\n  });\n}\n\nfunction getValueType(value) {\n  return value >= 0 ? \"positive\" : \"negative\";\n}\n\nfunction getVisibleSeries(that) {\n  return that.series.filter(function (s) {\n    return s.isVisible();\n  });\n}\n\nfunction getAbsStackSumByArg(stackKeepers, stackName, argument) {\n  var positiveStackValue = (stackKeepers.positive[stackName] || {})[argument] || 0;\n  var negativeStackValue = -(stackKeepers.negative[stackName] || {})[argument] || 0;\n  return positiveStackValue + negativeStackValue;\n}\n\nfunction getStackSumByArg(stackKeepers, stackName, argument) {\n  var positiveStackValue = (stackKeepers.positive[stackName] || {})[argument] || 0;\n  var negativeStackValue = (stackKeepers.negative[stackName] || {})[argument] || 0;\n  return positiveStackValue + negativeStackValue;\n}\n\nfunction getSeriesStackIndexCallback(inverted) {\n  if (!inverted) {\n    return function (index) {\n      return index;\n    };\n  } else {\n    return function (index, stackCount) {\n      return stackCount - index - 1;\n    };\n  }\n}\n\nfunction isInverted(series) {\n  return series[0] && series[0].getArgumentAxis().getTranslator().isInverted();\n}\n\nfunction adjustBarSeriesDimensions() {\n  var series = getVisibleSeries(this);\n  adjustBarSeriesDimensionsCore(series, this._options, getSeriesStackIndexCallback(isInverted(series)));\n}\n\nfunction getFirstValueSign(series) {\n  var points = series.getPoints();\n  var value;\n\n  for (var i = 0; i < points.length; i++) {\n    var point = points[i];\n    value = point.initialValue && point.initialValue.valueOf();\n\n    if (abs(value) > 0) {\n      break;\n    }\n  }\n\n  return (0, _math.sign)(value);\n}\n\nfunction adjustStackedSeriesValues() {\n  var that = this;\n  var negativesAsZeroes = that._options.negativesAsZeroes;\n  var series = getVisibleSeries(that);\n  var stackKeepers = {\n    positive: {},\n    negative: {}\n  };\n  var holesStack = {\n    left: {},\n    right: {}\n  };\n  var lastSeriesInPositiveStack = {};\n  var lastSeriesInNegativeStack = {};\n  series.forEach(function (singleSeries) {\n    var stackName = singleSeries.getStackName() || singleSeries.getBarOverlapGroup();\n    var hole = false;\n    var stack = getFirstValueSign(singleSeries) < 0 ? lastSeriesInNegativeStack : lastSeriesInPositiveStack;\n    singleSeries._prevSeries = stack[stackName];\n    stack[stackName] = singleSeries;\n    singleSeries.holes = (0, _extend.extend)(true, {}, holesStack);\n    singleSeries.getPoints().forEach(function (point, index, points) {\n      var value = point.initialValue && point.initialValue.valueOf();\n      var argument = point.argument.valueOf();\n      var stacks = value >= 0 ? stackKeepers.positive : stackKeepers.negative;\n      var isNotBarSeries = \"bar\" !== singleSeries.type;\n\n      if (negativesAsZeroes && value < 0) {\n        stacks = stackKeepers.positive;\n        value = 0;\n        point.resetValue();\n      }\n\n      stacks[stackName] = stacks[stackName] || {};\n      var currentStack = stacks[stackName];\n\n      if (currentStack[argument]) {\n        if (isNotBarSeries) {\n          point.correctValue(currentStack[argument]);\n        }\n\n        currentStack[argument] += value;\n      } else {\n        currentStack[argument] = value;\n\n        if (isNotBarSeries) {\n          point.resetCorrection();\n        }\n      }\n\n      if (!point.hasValue()) {\n        var prevPoint = points[index - 1];\n\n        if (!hole && prevPoint && prevPoint.hasValue()) {\n          argument = prevPoint.argument.valueOf();\n          prevPoint._skipSetRightHole = true;\n          holesStack.right[argument] = (holesStack.right[argument] || 0) + (prevPoint.value.valueOf() - (isFinite(prevPoint.minValue) ? prevPoint.minValue.valueOf() : 0));\n        }\n\n        hole = true;\n      } else {\n        if (hole) {\n          hole = false;\n          holesStack.left[argument] = (holesStack.left[argument] || 0) + (point.value.valueOf() - (isFinite(point.minValue) ? point.minValue.valueOf() : 0));\n          point._skipSetLeftHole = true;\n        }\n      }\n    });\n  });\n  series.forEach(function (singleSeries) {\n    var holes = singleSeries.holes;\n    singleSeries.getPoints().forEach(function (point) {\n      var argument = point.argument.valueOf();\n      point.resetHoles();\n      !point._skipSetLeftHole && point.setHole(holes.left[argument] || holesStack.left[argument] && 0, \"left\");\n      !point._skipSetRightHole && point.setHole(holes.right[argument] || holesStack.right[argument] && 0, \"right\");\n      point._skipSetLeftHole = null;\n      point._skipSetRightHole = null;\n    });\n  });\n  that._stackKeepers = stackKeepers;\n  series.forEach(function (singleSeries) {\n    singleSeries.getPoints().forEach(function (point) {\n      var argument = point.argument.valueOf();\n      var stackName = singleSeries.getStackName() || singleSeries.getBarOverlapGroup();\n      var absTotal = getAbsStackSumByArg(stackKeepers, stackName, argument);\n      var total = getStackSumByArg(stackKeepers, stackName, argument);\n      point.setPercentValue(absTotal, total, holesStack.left[argument], holesStack.right[argument]);\n    });\n  });\n}\n\nfunction updateStackedSeriesValues() {\n  var that = this;\n  var series = getVisibleSeries(that);\n  var stack = that._stackKeepers;\n  var stackKeepers = {\n    positive: {},\n    negative: {}\n  };\n  (0, _iterator.each)(series, function (_, singleSeries) {\n    var minBarSize = singleSeries.getOptions().minBarSize;\n    var valueAxisTranslator = singleSeries.getValueAxis().getTranslator();\n    var minShownBusinessValue = minBarSize && valueAxisTranslator.getMinBarSize(minBarSize);\n    var stackName = singleSeries.getStackName();\n    (0, _iterator.each)(singleSeries.getPoints(), function (index, point) {\n      if (!point.hasValue()) {\n        return;\n      }\n\n      var value = point.initialValue && point.initialValue.valueOf();\n      var argument = point.argument.valueOf();\n\n      if (that.fullStacked) {\n        value = value / getAbsStackSumByArg(stack, stackName, argument) || 0;\n      }\n\n      var updateValue = valueAxisTranslator.checkMinBarSize(value, minShownBusinessValue, point.value);\n      var valueType = getValueType(updateValue);\n      var currentStack = stackKeepers[valueType][stackName] = stackKeepers[valueType][stackName] || {};\n\n      if (currentStack[argument]) {\n        point.minValue = currentStack[argument];\n        currentStack[argument] += updateValue;\n      } else {\n        currentStack[argument] = updateValue;\n      }\n\n      point.value = currentStack[argument];\n    });\n  });\n\n  if (that.fullStacked) {\n    updateFullStackedSeriesValues(series, stackKeepers);\n  }\n}\n\nfunction updateFullStackedSeriesValues(series, stackKeepers) {\n  (0, _iterator.each)(series, function (_, singleSeries) {\n    var stackName = singleSeries.getStackName ? singleSeries.getStackName() : \"default\";\n    (0, _iterator.each)(singleSeries.getPoints(), function (index, point) {\n      var stackSum = getAbsStackSumByArg(stackKeepers, stackName, point.argument.valueOf());\n\n      if (0 !== stackSum) {\n        point.value = point.value / stackSum;\n\n        if ((0, _type.isNumeric)(point.minValue)) {\n          point.minValue = point.minValue / stackSum;\n        }\n      }\n    });\n  });\n}\n\nfunction updateBarSeriesValues() {\n  (0, _iterator.each)(this.series, function (_, singleSeries) {\n    var minBarSize = singleSeries.getOptions().minBarSize;\n    var valueAxisTranslator = singleSeries.getValueAxis().getTranslator();\n    var minShownBusinessValue = minBarSize && valueAxisTranslator.getMinBarSize(minBarSize);\n\n    if (minShownBusinessValue) {\n      (0, _iterator.each)(singleSeries.getPoints(), function (index, point) {\n        if (point.hasValue()) {\n          point.value = valueAxisTranslator.checkMinBarSize(point.initialValue, minShownBusinessValue);\n        }\n      });\n    }\n  });\n}\n\nfunction adjustCandlestickSeriesDimensions() {\n  var series = getVisibleSeries(this);\n  adjustBarSeriesDimensionsCore(series, {\n    barGroupPadding: .3\n  }, getSeriesStackIndexCallback(isInverted(series)));\n}\n\nfunction adjustBubbleSeriesDimensions() {\n  var series = getVisibleSeries(this);\n\n  if (!series.length) {\n    return;\n  }\n\n  var options = this._options;\n  var visibleAreaX = series[0].getArgumentAxis().getVisibleArea();\n  var visibleAreaY = series[0].getValueAxis().getVisibleArea();\n\n  var min = _min(visibleAreaX[1] - visibleAreaX[0], visibleAreaY[1] - visibleAreaY[0]);\n\n  var minBubbleArea = pow(options.minBubbleSize, 2);\n  var maxBubbleArea = pow(min * options.maxBubbleSize, 2);\n  var equalBubbleSize = (min * options.maxBubbleSize + options.minBubbleSize) / 2;\n  var minPointSize = 1 / 0;\n  var maxPointSize = -(1 / 0);\n  var pointSize;\n  var bubbleArea;\n  var sizeProportion;\n  (0, _iterator.each)(series, function (_, seriesItem) {\n    (0, _iterator.each)(seriesItem.getPoints(), function (_, point) {\n      maxPointSize = maxPointSize > point.size ? maxPointSize : point.size;\n      minPointSize = minPointSize < point.size ? minPointSize : point.size;\n    });\n  });\n  var sizeDispersion = maxPointSize - minPointSize;\n  var areaDispersion = abs(maxBubbleArea - minBubbleArea);\n  (0, _iterator.each)(series, function (_, seriesItem) {\n    (0, _iterator.each)(seriesItem.getPoints(), function (_, point) {\n      if (maxPointSize === minPointSize) {\n        pointSize = round(equalBubbleSize);\n      } else {\n        sizeProportion = abs(point.size - minPointSize) / sizeDispersion;\n        bubbleArea = areaDispersion * sizeProportion + minBubbleArea;\n        pointSize = round(sqrt(bubbleArea));\n      }\n\n      point.correctCoordinates(pointSize);\n    });\n  });\n}\n\nfunction SeriesFamily(options) {\n  var that = this;\n  that.type = (0, _utils.normalizeEnum)(options.type);\n  that.pane = options.pane;\n  that.series = [];\n  that.updateOptions(options);\n\n  switch (that.type) {\n    case \"bar\":\n      that.adjustSeriesDimensions = adjustBarSeriesDimensions;\n      that.updateSeriesValues = updateBarSeriesValues;\n      that.adjustSeriesValues = adjustStackedSeriesValues;\n      break;\n\n    case \"rangebar\":\n      that.adjustSeriesDimensions = adjustBarSeriesDimensions;\n      break;\n\n    case \"fullstackedbar\":\n      that.fullStacked = true;\n      that.adjustSeriesDimensions = adjustBarSeriesDimensions;\n      that.adjustSeriesValues = adjustStackedSeriesValues;\n      that.updateSeriesValues = updateStackedSeriesValues;\n      break;\n\n    case \"stackedbar\":\n      that.adjustSeriesDimensions = adjustBarSeriesDimensions;\n      that.adjustSeriesValues = adjustStackedSeriesValues;\n      that.updateSeriesValues = updateStackedSeriesValues;\n      break;\n\n    case \"fullstackedarea\":\n    case \"fullstackedline\":\n    case \"fullstackedspline\":\n    case \"fullstackedsplinearea\":\n      that.fullStacked = true;\n      that.adjustSeriesValues = adjustStackedSeriesValues;\n      break;\n\n    case \"stackedarea\":\n    case \"stackedsplinearea\":\n    case \"stackedline\":\n    case \"stackedspline\":\n      that.adjustSeriesValues = adjustStackedSeriesValues;\n      break;\n\n    case \"candlestick\":\n    case \"stock\":\n      that.adjustSeriesDimensions = adjustCandlestickSeriesDimensions;\n      break;\n\n    case \"bubble\":\n      that.adjustSeriesDimensions = adjustBubbleSeriesDimensions;\n  }\n}\n\nSeriesFamily.prototype = {\n  constructor: SeriesFamily,\n  adjustSeriesDimensions: _common.noop,\n  adjustSeriesValues: _common.noop,\n  updateSeriesValues: _common.noop,\n  updateOptions: function (options) {\n    this._options = options;\n  },\n  dispose: function () {\n    this.series = null;\n  },\n  add: function (series) {\n    var type = this.type;\n    this.series = (0, _utils.map)(series, function (singleSeries) {\n      return singleSeries.type === type ? singleSeries : null;\n    });\n  }\n};","map":{"version":3,"sources":["E:/Monday.com/quickstart-react/node_modules/devextreme/viz/core/series_family.js"],"names":["exports","SeriesFamily","_type","require","_extend","_iterator","_math","_common","_utils","round","Math","abs","pow","sqrt","_min","min","DEFAULT_BAR_GROUP_PADDING","validateBarPadding","barPadding","validateBarGroupPadding","barGroupPadding","isStackExist","series","arg","some","s","getOptions","ignoreEmptyPoints","getPointsByArg","point","hasValue","correctStackCoordinates","currentStacks","stack","parameters","barsArea","seriesStackIndexCallback","forEach","stackIndex","indexOf","length","points","barWidth","offset","getOffset","width","extraParameters","isDefined","calculateParams","correctPointCoordinates","adjustBarSeriesDimensionsCore","options","commonStacks","allArguments","seriesInStacks","barGroupWidth","interval","getArgumentAxis","getTranslator","getInterval","i","stackName","getStackName","getBarOverlapGroup","toString","argument","pointsByArgument","valueOf","push","reduce","stacks","count","percentWidth","fixedBarWidth","spacing","middleIndex","each","_","correctCoordinates","getValueType","value","getVisibleSeries","that","filter","isVisible","getAbsStackSumByArg","stackKeepers","positiveStackValue","positive","negativeStackValue","negative","getStackSumByArg","getSeriesStackIndexCallback","inverted","index","stackCount","isInverted","adjustBarSeriesDimensions","_options","getFirstValueSign","getPoints","initialValue","sign","adjustStackedSeriesValues","negativesAsZeroes","holesStack","left","right","lastSeriesInPositiveStack","lastSeriesInNegativeStack","singleSeries","hole","_prevSeries","holes","extend","isNotBarSeries","type","resetValue","currentStack","correctValue","resetCorrection","prevPoint","_skipSetRightHole","isFinite","minValue","_skipSetLeftHole","resetHoles","setHole","_stackKeepers","absTotal","total","setPercentValue","updateStackedSeriesValues","minBarSize","valueAxisTranslator","getValueAxis","minShownBusinessValue","getMinBarSize","fullStacked","updateValue","checkMinBarSize","valueType","updateFullStackedSeriesValues","stackSum","isNumeric","updateBarSeriesValues","adjustCandlestickSeriesDimensions","adjustBubbleSeriesDimensions","visibleAreaX","getVisibleArea","visibleAreaY","minBubbleArea","minBubbleSize","maxBubbleArea","maxBubbleSize","equalBubbleSize","minPointSize","maxPointSize","pointSize","bubbleArea","sizeProportion","seriesItem","size","sizeDispersion","areaDispersion","normalizeEnum","pane","updateOptions","adjustSeriesDimensions","updateSeriesValues","adjustSeriesValues","prototype","constructor","noop","dispose","add","map"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (viz/core/series_family.js)\r\n * Version: 20.2.3\r\n * Build date: Tue Oct 20 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.SeriesFamily = SeriesFamily;\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _extend = require(\"../../core/utils/extend\");\r\nvar _iterator = require(\"../../core/utils/iterator\");\r\nvar _math = require(\"../../core/utils/math\");\r\nvar _common = require(\"../../core/utils/common\");\r\nvar _utils = require(\"./utils\");\r\nvar round = Math.round,\r\n    abs = Math.abs,\r\n    pow = Math.pow,\r\n    sqrt = Math.sqrt;\r\nvar _min = Math.min;\r\nvar DEFAULT_BAR_GROUP_PADDING = .3;\r\n\r\nfunction validateBarPadding(barPadding) {\r\n    return barPadding < 0 || barPadding > 1 ? void 0 : barPadding\r\n}\r\n\r\nfunction validateBarGroupPadding(barGroupPadding) {\r\n    return barGroupPadding < 0 || barGroupPadding > 1 ? DEFAULT_BAR_GROUP_PADDING : barGroupPadding\r\n}\r\n\r\nfunction isStackExist(series, arg) {\r\n    return series.some(function(s) {\r\n        return !s.getOptions().ignoreEmptyPoints || s.getPointsByArg(arg, true).some(function(point) {\r\n            return point.hasValue()\r\n        })\r\n    })\r\n}\r\n\r\nfunction correctStackCoordinates(series, currentStacks, arg, stack, parameters, barsArea, seriesStackIndexCallback) {\r\n    series.forEach(function(series) {\r\n        var stackIndex = seriesStackIndexCallback(currentStacks.indexOf(stack), currentStacks.length);\r\n        var points = series.getPointsByArg(arg, true);\r\n        var barPadding = validateBarPadding(series.getOptions().barPadding);\r\n        var barWidth = series.getOptions().barWidth;\r\n        var offset = getOffset(stackIndex, parameters);\r\n        var width = parameters.width;\r\n        var extraParameters;\r\n        if (stackIndex === -1) {\r\n            return\r\n        }\r\n        if ((0, _type.isDefined)(barPadding) || (0, _type.isDefined)(barWidth)) {\r\n            extraParameters = calculateParams(barsArea, currentStacks.length, 1 - barPadding, barWidth);\r\n            width = extraParameters.width;\r\n            offset = getOffset(stackIndex, extraParameters)\r\n        }\r\n        correctPointCoordinates(points, width, offset)\r\n    })\r\n}\r\n\r\nfunction adjustBarSeriesDimensionsCore(series, options, seriesStackIndexCallback) {\r\n    var commonStacks = [];\r\n    var allArguments = [];\r\n    var seriesInStacks = {};\r\n    var barGroupWidth = options.barGroupWidth;\r\n    var interval = series[0] && series[0].getArgumentAxis().getTranslator().getInterval();\r\n    var barsArea = barGroupWidth ? interval > barGroupWidth ? barGroupWidth : interval : interval * (1 - validateBarGroupPadding(options.barGroupPadding));\r\n    series.forEach(function(s, i) {\r\n        var stackName = s.getStackName() || s.getBarOverlapGroup() || i.toString();\r\n        var argument;\r\n        for (argument in s.pointsByArgument) {\r\n            if (allArguments.indexOf(argument.valueOf()) === -1) {\r\n                allArguments.push(argument.valueOf())\r\n            }\r\n        }\r\n        if (commonStacks.indexOf(stackName) === -1) {\r\n            commonStacks.push(stackName);\r\n            seriesInStacks[stackName] = []\r\n        }\r\n        seriesInStacks[stackName].push(s)\r\n    });\r\n    allArguments.forEach(function(arg) {\r\n        var currentStacks = commonStacks.reduce(function(stacks, stack) {\r\n            if (isStackExist(seriesInStacks[stack], arg)) {\r\n                stacks.push(stack)\r\n            }\r\n            return stacks\r\n        }, []);\r\n        var parameters = calculateParams(barsArea, currentStacks.length);\r\n        commonStacks.forEach(function(stack) {\r\n            correctStackCoordinates(seriesInStacks[stack], currentStacks, arg, stack, parameters, barsArea, seriesStackIndexCallback)\r\n        })\r\n    })\r\n}\r\n\r\nfunction calculateParams(barsArea, count, percentWidth, fixedBarWidth) {\r\n    var spacing;\r\n    var width;\r\n    if (fixedBarWidth) {\r\n        width = _min(fixedBarWidth, round(barsArea / count));\r\n        spacing = count > 1 ? round((barsArea - width * count) / (count - 1)) : 0\r\n    } else {\r\n        if ((0, _type.isDefined)(percentWidth)) {\r\n            width = round(barsArea * percentWidth / count);\r\n            spacing = round(count > 1 ? (barsArea - barsArea * percentWidth) / (count - 1) : 0)\r\n        } else {\r\n            spacing = round(barsArea / count * .2);\r\n            width = round((barsArea - spacing * (count - 1)) / count)\r\n        }\r\n    }\r\n    return {\r\n        width: width > 1 ? width : 1,\r\n        spacing: spacing,\r\n        middleIndex: count / 2\r\n    }\r\n}\r\n\r\nfunction getOffset(stackIndex, parameters) {\r\n    return (stackIndex - parameters.middleIndex + .5) * parameters.width - (parameters.middleIndex - stackIndex - .5) * parameters.spacing\r\n}\r\n\r\nfunction correctPointCoordinates(points, width, offset) {\r\n    (0, _iterator.each)(points, function(_, point) {\r\n        point.correctCoordinates({\r\n            width: width,\r\n            offset: offset\r\n        })\r\n    })\r\n}\r\n\r\nfunction getValueType(value) {\r\n    return value >= 0 ? \"positive\" : \"negative\"\r\n}\r\n\r\nfunction getVisibleSeries(that) {\r\n    return that.series.filter(function(s) {\r\n        return s.isVisible()\r\n    })\r\n}\r\n\r\nfunction getAbsStackSumByArg(stackKeepers, stackName, argument) {\r\n    var positiveStackValue = (stackKeepers.positive[stackName] || {})[argument] || 0;\r\n    var negativeStackValue = -(stackKeepers.negative[stackName] || {})[argument] || 0;\r\n    return positiveStackValue + negativeStackValue\r\n}\r\n\r\nfunction getStackSumByArg(stackKeepers, stackName, argument) {\r\n    var positiveStackValue = (stackKeepers.positive[stackName] || {})[argument] || 0;\r\n    var negativeStackValue = (stackKeepers.negative[stackName] || {})[argument] || 0;\r\n    return positiveStackValue + negativeStackValue\r\n}\r\n\r\nfunction getSeriesStackIndexCallback(inverted) {\r\n    if (!inverted) {\r\n        return function(index) {\r\n            return index\r\n        }\r\n    } else {\r\n        return function(index, stackCount) {\r\n            return stackCount - index - 1\r\n        }\r\n    }\r\n}\r\n\r\nfunction isInverted(series) {\r\n    return series[0] && series[0].getArgumentAxis().getTranslator().isInverted()\r\n}\r\n\r\nfunction adjustBarSeriesDimensions() {\r\n    var series = getVisibleSeries(this);\r\n    adjustBarSeriesDimensionsCore(series, this._options, getSeriesStackIndexCallback(isInverted(series)))\r\n}\r\n\r\nfunction getFirstValueSign(series) {\r\n    var points = series.getPoints();\r\n    var value;\r\n    for (var i = 0; i < points.length; i++) {\r\n        var point = points[i];\r\n        value = point.initialValue && point.initialValue.valueOf();\r\n        if (abs(value) > 0) {\r\n            break\r\n        }\r\n    }\r\n    return (0, _math.sign)(value)\r\n}\r\n\r\nfunction adjustStackedSeriesValues() {\r\n    var that = this;\r\n    var negativesAsZeroes = that._options.negativesAsZeroes;\r\n    var series = getVisibleSeries(that);\r\n    var stackKeepers = {\r\n        positive: {},\r\n        negative: {}\r\n    };\r\n    var holesStack = {\r\n        left: {},\r\n        right: {}\r\n    };\r\n    var lastSeriesInPositiveStack = {};\r\n    var lastSeriesInNegativeStack = {};\r\n    series.forEach(function(singleSeries) {\r\n        var stackName = singleSeries.getStackName() || singleSeries.getBarOverlapGroup();\r\n        var hole = false;\r\n        var stack = getFirstValueSign(singleSeries) < 0 ? lastSeriesInNegativeStack : lastSeriesInPositiveStack;\r\n        singleSeries._prevSeries = stack[stackName];\r\n        stack[stackName] = singleSeries;\r\n        singleSeries.holes = (0, _extend.extend)(true, {}, holesStack);\r\n        singleSeries.getPoints().forEach(function(point, index, points) {\r\n            var value = point.initialValue && point.initialValue.valueOf();\r\n            var argument = point.argument.valueOf();\r\n            var stacks = value >= 0 ? stackKeepers.positive : stackKeepers.negative;\r\n            var isNotBarSeries = \"bar\" !== singleSeries.type;\r\n            if (negativesAsZeroes && value < 0) {\r\n                stacks = stackKeepers.positive;\r\n                value = 0;\r\n                point.resetValue()\r\n            }\r\n            stacks[stackName] = stacks[stackName] || {};\r\n            var currentStack = stacks[stackName];\r\n            if (currentStack[argument]) {\r\n                if (isNotBarSeries) {\r\n                    point.correctValue(currentStack[argument])\r\n                }\r\n                currentStack[argument] += value\r\n            } else {\r\n                currentStack[argument] = value;\r\n                if (isNotBarSeries) {\r\n                    point.resetCorrection()\r\n                }\r\n            }\r\n            if (!point.hasValue()) {\r\n                var prevPoint = points[index - 1];\r\n                if (!hole && prevPoint && prevPoint.hasValue()) {\r\n                    argument = prevPoint.argument.valueOf();\r\n                    prevPoint._skipSetRightHole = true;\r\n                    holesStack.right[argument] = (holesStack.right[argument] || 0) + (prevPoint.value.valueOf() - (isFinite(prevPoint.minValue) ? prevPoint.minValue.valueOf() : 0))\r\n                }\r\n                hole = true\r\n            } else {\r\n                if (hole) {\r\n                    hole = false;\r\n                    holesStack.left[argument] = (holesStack.left[argument] || 0) + (point.value.valueOf() - (isFinite(point.minValue) ? point.minValue.valueOf() : 0));\r\n                    point._skipSetLeftHole = true\r\n                }\r\n            }\r\n        })\r\n    });\r\n    series.forEach(function(singleSeries) {\r\n        var holes = singleSeries.holes;\r\n        singleSeries.getPoints().forEach(function(point) {\r\n            var argument = point.argument.valueOf();\r\n            point.resetHoles();\r\n            !point._skipSetLeftHole && point.setHole(holes.left[argument] || holesStack.left[argument] && 0, \"left\");\r\n            !point._skipSetRightHole && point.setHole(holes.right[argument] || holesStack.right[argument] && 0, \"right\");\r\n            point._skipSetLeftHole = null;\r\n            point._skipSetRightHole = null\r\n        })\r\n    });\r\n    that._stackKeepers = stackKeepers;\r\n    series.forEach(function(singleSeries) {\r\n        singleSeries.getPoints().forEach(function(point) {\r\n            var argument = point.argument.valueOf();\r\n            var stackName = singleSeries.getStackName() || singleSeries.getBarOverlapGroup();\r\n            var absTotal = getAbsStackSumByArg(stackKeepers, stackName, argument);\r\n            var total = getStackSumByArg(stackKeepers, stackName, argument);\r\n            point.setPercentValue(absTotal, total, holesStack.left[argument], holesStack.right[argument])\r\n        })\r\n    })\r\n}\r\n\r\nfunction updateStackedSeriesValues() {\r\n    var that = this;\r\n    var series = getVisibleSeries(that);\r\n    var stack = that._stackKeepers;\r\n    var stackKeepers = {\r\n        positive: {},\r\n        negative: {}\r\n    };\r\n    (0, _iterator.each)(series, function(_, singleSeries) {\r\n        var minBarSize = singleSeries.getOptions().minBarSize;\r\n        var valueAxisTranslator = singleSeries.getValueAxis().getTranslator();\r\n        var minShownBusinessValue = minBarSize && valueAxisTranslator.getMinBarSize(minBarSize);\r\n        var stackName = singleSeries.getStackName();\r\n        (0, _iterator.each)(singleSeries.getPoints(), function(index, point) {\r\n            if (!point.hasValue()) {\r\n                return\r\n            }\r\n            var value = point.initialValue && point.initialValue.valueOf();\r\n            var argument = point.argument.valueOf();\r\n            if (that.fullStacked) {\r\n                value = value / getAbsStackSumByArg(stack, stackName, argument) || 0\r\n            }\r\n            var updateValue = valueAxisTranslator.checkMinBarSize(value, minShownBusinessValue, point.value);\r\n            var valueType = getValueType(updateValue);\r\n            var currentStack = stackKeepers[valueType][stackName] = stackKeepers[valueType][stackName] || {};\r\n            if (currentStack[argument]) {\r\n                point.minValue = currentStack[argument];\r\n                currentStack[argument] += updateValue\r\n            } else {\r\n                currentStack[argument] = updateValue\r\n            }\r\n            point.value = currentStack[argument]\r\n        })\r\n    });\r\n    if (that.fullStacked) {\r\n        updateFullStackedSeriesValues(series, stackKeepers)\r\n    }\r\n}\r\n\r\nfunction updateFullStackedSeriesValues(series, stackKeepers) {\r\n    (0, _iterator.each)(series, function(_, singleSeries) {\r\n        var stackName = singleSeries.getStackName ? singleSeries.getStackName() : \"default\";\r\n        (0, _iterator.each)(singleSeries.getPoints(), function(index, point) {\r\n            var stackSum = getAbsStackSumByArg(stackKeepers, stackName, point.argument.valueOf());\r\n            if (0 !== stackSum) {\r\n                point.value = point.value / stackSum;\r\n                if ((0, _type.isNumeric)(point.minValue)) {\r\n                    point.minValue = point.minValue / stackSum\r\n                }\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nfunction updateBarSeriesValues() {\r\n    (0, _iterator.each)(this.series, function(_, singleSeries) {\r\n        var minBarSize = singleSeries.getOptions().minBarSize;\r\n        var valueAxisTranslator = singleSeries.getValueAxis().getTranslator();\r\n        var minShownBusinessValue = minBarSize && valueAxisTranslator.getMinBarSize(minBarSize);\r\n        if (minShownBusinessValue) {\r\n            (0, _iterator.each)(singleSeries.getPoints(), function(index, point) {\r\n                if (point.hasValue()) {\r\n                    point.value = valueAxisTranslator.checkMinBarSize(point.initialValue, minShownBusinessValue)\r\n                }\r\n            })\r\n        }\r\n    })\r\n}\r\n\r\nfunction adjustCandlestickSeriesDimensions() {\r\n    var series = getVisibleSeries(this);\r\n    adjustBarSeriesDimensionsCore(series, {\r\n        barGroupPadding: .3\r\n    }, getSeriesStackIndexCallback(isInverted(series)))\r\n}\r\n\r\nfunction adjustBubbleSeriesDimensions() {\r\n    var series = getVisibleSeries(this);\r\n    if (!series.length) {\r\n        return\r\n    }\r\n    var options = this._options;\r\n    var visibleAreaX = series[0].getArgumentAxis().getVisibleArea();\r\n    var visibleAreaY = series[0].getValueAxis().getVisibleArea();\r\n    var min = _min(visibleAreaX[1] - visibleAreaX[0], visibleAreaY[1] - visibleAreaY[0]);\r\n    var minBubbleArea = pow(options.minBubbleSize, 2);\r\n    var maxBubbleArea = pow(min * options.maxBubbleSize, 2);\r\n    var equalBubbleSize = (min * options.maxBubbleSize + options.minBubbleSize) / 2;\r\n    var minPointSize = 1 / 0;\r\n    var maxPointSize = -(1 / 0);\r\n    var pointSize;\r\n    var bubbleArea;\r\n    var sizeProportion;\r\n    (0, _iterator.each)(series, function(_, seriesItem) {\r\n        (0, _iterator.each)(seriesItem.getPoints(), function(_, point) {\r\n            maxPointSize = maxPointSize > point.size ? maxPointSize : point.size;\r\n            minPointSize = minPointSize < point.size ? minPointSize : point.size\r\n        })\r\n    });\r\n    var sizeDispersion = maxPointSize - minPointSize;\r\n    var areaDispersion = abs(maxBubbleArea - minBubbleArea);\r\n    (0, _iterator.each)(series, function(_, seriesItem) {\r\n        (0, _iterator.each)(seriesItem.getPoints(), function(_, point) {\r\n            if (maxPointSize === minPointSize) {\r\n                pointSize = round(equalBubbleSize)\r\n            } else {\r\n                sizeProportion = abs(point.size - minPointSize) / sizeDispersion;\r\n                bubbleArea = areaDispersion * sizeProportion + minBubbleArea;\r\n                pointSize = round(sqrt(bubbleArea))\r\n            }\r\n            point.correctCoordinates(pointSize)\r\n        })\r\n    })\r\n}\r\n\r\nfunction SeriesFamily(options) {\r\n    var that = this;\r\n    that.type = (0, _utils.normalizeEnum)(options.type);\r\n    that.pane = options.pane;\r\n    that.series = [];\r\n    that.updateOptions(options);\r\n    switch (that.type) {\r\n        case \"bar\":\r\n            that.adjustSeriesDimensions = adjustBarSeriesDimensions;\r\n            that.updateSeriesValues = updateBarSeriesValues;\r\n            that.adjustSeriesValues = adjustStackedSeriesValues;\r\n            break;\r\n        case \"rangebar\":\r\n            that.adjustSeriesDimensions = adjustBarSeriesDimensions;\r\n            break;\r\n        case \"fullstackedbar\":\r\n            that.fullStacked = true;\r\n            that.adjustSeriesDimensions = adjustBarSeriesDimensions;\r\n            that.adjustSeriesValues = adjustStackedSeriesValues;\r\n            that.updateSeriesValues = updateStackedSeriesValues;\r\n            break;\r\n        case \"stackedbar\":\r\n            that.adjustSeriesDimensions = adjustBarSeriesDimensions;\r\n            that.adjustSeriesValues = adjustStackedSeriesValues;\r\n            that.updateSeriesValues = updateStackedSeriesValues;\r\n            break;\r\n        case \"fullstackedarea\":\r\n        case \"fullstackedline\":\r\n        case \"fullstackedspline\":\r\n        case \"fullstackedsplinearea\":\r\n            that.fullStacked = true;\r\n            that.adjustSeriesValues = adjustStackedSeriesValues;\r\n            break;\r\n        case \"stackedarea\":\r\n        case \"stackedsplinearea\":\r\n        case \"stackedline\":\r\n        case \"stackedspline\":\r\n            that.adjustSeriesValues = adjustStackedSeriesValues;\r\n            break;\r\n        case \"candlestick\":\r\n        case \"stock\":\r\n            that.adjustSeriesDimensions = adjustCandlestickSeriesDimensions;\r\n            break;\r\n        case \"bubble\":\r\n            that.adjustSeriesDimensions = adjustBubbleSeriesDimensions\r\n    }\r\n}\r\nSeriesFamily.prototype = {\r\n    constructor: SeriesFamily,\r\n    adjustSeriesDimensions: _common.noop,\r\n    adjustSeriesValues: _common.noop,\r\n    updateSeriesValues: _common.noop,\r\n    updateOptions: function(options) {\r\n        this._options = options\r\n    },\r\n    dispose: function() {\r\n        this.series = null\r\n    },\r\n    add: function(series) {\r\n        var type = this.type;\r\n        this.series = (0, _utils.map)(series, function(singleSeries) {\r\n            return singleSeries.type === type ? singleSeries : null\r\n        })\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}