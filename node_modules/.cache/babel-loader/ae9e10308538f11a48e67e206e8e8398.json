{"ast":null,"code":"/**\r\n * DevExtreme (viz/components/parse_utils.js)\r\n * Version: 20.2.3\r\n * Build date: Tue Oct 20 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.correctValueType = correctValueType;\nexports.getParser = void 0;\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _date_serialization = _interopRequireDefault(require(\"../../core/utils/date_serialization\"));\n\nvar _type = require(\"../../core/utils/type\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar parsers = {\n  string: function (val) {\n    return (0, _type.isDefined)(val) ? \"\" + val : val;\n  },\n  numeric: function (val) {\n    if (!(0, _type.isDefined)(val)) {\n      return val;\n    }\n\n    var parsedVal = Number(val);\n\n    if (isNaN(parsedVal)) {\n      parsedVal = void 0;\n    }\n\n    return parsedVal;\n  },\n  datetime: function (val) {\n    if (!(0, _type.isDefined)(val)) {\n      return val;\n    }\n\n    var parsedVal;\n    var numVal = Number(val);\n\n    if (!isNaN(numVal)) {\n      parsedVal = new Date(numVal);\n    } else {\n      parsedVal = _date_serialization.default.deserializeDate(val);\n    }\n\n    if (isNaN(Number(parsedVal))) {\n      parsedVal = void 0;\n    }\n\n    return parsedVal;\n  }\n};\n\nfunction correctValueType(type) {\n  return \"numeric\" === type || \"datetime\" === type || \"string\" === type ? type : \"\";\n}\n\nvar getParser = function (valueType) {\n  return parsers[correctValueType(valueType)] || _common.noop;\n};\n\nexports.getParser = getParser;","map":{"version":3,"sources":["E:/Monday.com/quickstart-react/node_modules/devextreme/viz/components/parse_utils.js"],"names":["exports","correctValueType","getParser","_common","require","_date_serialization","_interopRequireDefault","_type","obj","__esModule","parsers","string","val","isDefined","numeric","parsedVal","Number","isNaN","datetime","numVal","Date","default","deserializeDate","type","valueType","noop"],"mappings":"AAAA;;;;;;;;AAQA;;AACAA,OAAO,CAACC,gBAAR,GAA2BA,gBAA3B;AACAD,OAAO,CAACE,SAAR,GAAoB,KAAK,CAAzB;;AACA,IAAIC,OAAO,GAAGC,OAAO,CAAC,yBAAD,CAArB;;AACA,IAAIC,mBAAmB,GAAGC,sBAAsB,CAACF,OAAO,CAAC,qCAAD,CAAR,CAAhD;;AACA,IAAIG,KAAK,GAAGH,OAAO,CAAC,uBAAD,CAAnB;;AAEA,SAASE,sBAAT,CAAgCE,GAAhC,EAAqC;AACjC,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AACjC,eAAWA;AADsB,GAArC;AAGH;;AACD,IAAIE,OAAO,GAAG;AACVC,EAAAA,MAAM,EAAE,UAASC,GAAT,EAAc;AAClB,WAAO,CAAC,GAAGL,KAAK,CAACM,SAAV,EAAqBD,GAArB,IAA4B,KAAKA,GAAjC,GAAuCA,GAA9C;AACH,GAHS;AAIVE,EAAAA,OAAO,EAAE,UAASF,GAAT,EAAc;AACnB,QAAI,CAAC,CAAC,GAAGL,KAAK,CAACM,SAAV,EAAqBD,GAArB,CAAL,EAAgC;AAC5B,aAAOA,GAAP;AACH;;AACD,QAAIG,SAAS,GAAGC,MAAM,CAACJ,GAAD,CAAtB;;AACA,QAAIK,KAAK,CAACF,SAAD,CAAT,EAAsB;AAClBA,MAAAA,SAAS,GAAG,KAAK,CAAjB;AACH;;AACD,WAAOA,SAAP;AACH,GAbS;AAcVG,EAAAA,QAAQ,EAAE,UAASN,GAAT,EAAc;AACpB,QAAI,CAAC,CAAC,GAAGL,KAAK,CAACM,SAAV,EAAqBD,GAArB,CAAL,EAAgC;AAC5B,aAAOA,GAAP;AACH;;AACD,QAAIG,SAAJ;AACA,QAAII,MAAM,GAAGH,MAAM,CAACJ,GAAD,CAAnB;;AACA,QAAI,CAACK,KAAK,CAACE,MAAD,CAAV,EAAoB;AAChBJ,MAAAA,SAAS,GAAG,IAAIK,IAAJ,CAASD,MAAT,CAAZ;AACH,KAFD,MAEO;AACHJ,MAAAA,SAAS,GAAGV,mBAAmB,CAACgB,OAApB,CAA4BC,eAA5B,CAA4CV,GAA5C,CAAZ;AACH;;AACD,QAAIK,KAAK,CAACD,MAAM,CAACD,SAAD,CAAP,CAAT,EAA8B;AAC1BA,MAAAA,SAAS,GAAG,KAAK,CAAjB;AACH;;AACD,WAAOA,SAAP;AACH;AA7BS,CAAd;;AAgCA,SAASd,gBAAT,CAA0BsB,IAA1B,EAAgC;AAC5B,SAAO,cAAcA,IAAd,IAAsB,eAAeA,IAArC,IAA6C,aAAaA,IAA1D,GAAiEA,IAAjE,GAAwE,EAA/E;AACH;;AACD,IAAIrB,SAAS,GAAG,UAASsB,SAAT,EAAoB;AAChC,SAAOd,OAAO,CAACT,gBAAgB,CAACuB,SAAD,CAAjB,CAAP,IAAwCrB,OAAO,CAACsB,IAAvD;AACH,CAFD;;AAGAzB,OAAO,CAACE,SAAR,GAAoBA,SAApB","sourcesContent":["/**\r\n * DevExtreme (viz/components/parse_utils.js)\r\n * Version: 20.2.3\r\n * Build date: Tue Oct 20 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.correctValueType = correctValueType;\r\nexports.getParser = void 0;\r\nvar _common = require(\"../../core/utils/common\");\r\nvar _date_serialization = _interopRequireDefault(require(\"../../core/utils/date_serialization\"));\r\nvar _type = require(\"../../core/utils/type\");\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar parsers = {\r\n    string: function(val) {\r\n        return (0, _type.isDefined)(val) ? \"\" + val : val\r\n    },\r\n    numeric: function(val) {\r\n        if (!(0, _type.isDefined)(val)) {\r\n            return val\r\n        }\r\n        var parsedVal = Number(val);\r\n        if (isNaN(parsedVal)) {\r\n            parsedVal = void 0\r\n        }\r\n        return parsedVal\r\n    },\r\n    datetime: function(val) {\r\n        if (!(0, _type.isDefined)(val)) {\r\n            return val\r\n        }\r\n        var parsedVal;\r\n        var numVal = Number(val);\r\n        if (!isNaN(numVal)) {\r\n            parsedVal = new Date(numVal)\r\n        } else {\r\n            parsedVal = _date_serialization.default.deserializeDate(val)\r\n        }\r\n        if (isNaN(Number(parsedVal))) {\r\n            parsedVal = void 0\r\n        }\r\n        return parsedVal\r\n    }\r\n};\r\n\r\nfunction correctValueType(type) {\r\n    return \"numeric\" === type || \"datetime\" === type || \"string\" === type ? type : \"\"\r\n}\r\nvar getParser = function(valueType) {\r\n    return parsers[correctValueType(valueType)] || _common.noop\r\n};\r\nexports.getParser = getParser;\r\n"]},"metadata":{},"sourceType":"script"}