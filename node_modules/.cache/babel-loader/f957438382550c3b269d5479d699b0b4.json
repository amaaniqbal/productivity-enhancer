{"ast":null,"code":"/**\r\n * DevExtreme (format_helper.js)\r\n * Version: 20.2.3\r\n * Build date: Tue Oct 20 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.default = void 0;\n\nvar _type = require(\"./core/utils/type\");\n\nvar _date = _interopRequireDefault(require(\"./core/utils/date\"));\n\nvar _number = _interopRequireDefault(require(\"./localization/number\"));\n\nvar _date2 = _interopRequireDefault(require(\"./localization/date\"));\n\nvar _dependency_injector = _interopRequireDefault(require(\"./core/utils/dependency_injector\"));\n\nrequire(\"./localization/currency\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar _default = (0, _dependency_injector.default)({\n  format: function (value, _format) {\n    var formatIsValid = (0, _type.isString)(_format) && \"\" !== _format || (0, _type.isPlainObject)(_format) || (0, _type.isFunction)(_format);\n    var valueIsValid = (0, _type.isNumeric)(value) || (0, _type.isDate)(value);\n\n    if (!formatIsValid || !valueIsValid) {\n      return (0, _type.isDefined)(value) ? value.toString() : \"\";\n    }\n\n    if ((0, _type.isFunction)(_format)) {\n      return _format(value);\n    }\n\n    if ((0, _type.isString)(_format)) {\n      _format = {\n        type: _format\n      };\n    }\n\n    if ((0, _type.isNumeric)(value)) {\n      return _number.default.format(value, _format);\n    }\n\n    if ((0, _type.isDate)(value)) {\n      return _date2.default.format(value, _format);\n    }\n  },\n  getTimeFormat: function (showSecond) {\n    return showSecond ? \"longtime\" : \"shorttime\";\n  },\n  _normalizeFormat: function (format) {\n    if (!Array.isArray(format)) {\n      return format;\n    }\n\n    if (1 === format.length) {\n      return format[0];\n    }\n\n    return function (date) {\n      return format.map(function (formatPart) {\n        return _date2.default.format(date, formatPart);\n      }).join(\" \");\n    };\n  },\n  getDateFormatByDifferences: function (dateDifferences, intervalFormat) {\n    var resultFormat = [];\n    var needSpecialSecondFormatter = intervalFormat && dateDifferences.millisecond && !(dateDifferences.year || dateDifferences.month || dateDifferences.day);\n\n    if (needSpecialSecondFormatter) {\n      var secondFormatter = function (date) {\n        return date.getSeconds() + date.getMilliseconds() / 1e3 + \"s\";\n      };\n\n      resultFormat.push(secondFormatter);\n    } else {\n      if (dateDifferences.millisecond) {\n        resultFormat.push(\"millisecond\");\n      }\n    }\n\n    if (dateDifferences.hour || dateDifferences.minute || !needSpecialSecondFormatter && dateDifferences.second) {\n      resultFormat.unshift(this.getTimeFormat(dateDifferences.second));\n    }\n\n    if (dateDifferences.year && dateDifferences.month && dateDifferences.day) {\n      if (intervalFormat && \"month\" === intervalFormat) {\n        return \"monthandyear\";\n      } else {\n        resultFormat.unshift(\"shortdate\");\n        return this._normalizeFormat(resultFormat);\n      }\n    }\n\n    if (dateDifferences.year && dateDifferences.month) {\n      return \"monthandyear\";\n    }\n\n    if (dateDifferences.year && dateDifferences.quarter) {\n      return \"quarterandyear\";\n    }\n\n    if (dateDifferences.year) {\n      return \"year\";\n    }\n\n    if (dateDifferences.quarter) {\n      return \"quarter\";\n    }\n\n    if (dateDifferences.month && dateDifferences.day) {\n      if (intervalFormat) {\n        var monthDayFormatter = function (date) {\n          return _date2.default.getMonthNames(\"abbreviated\")[date.getMonth()] + \" \" + _date2.default.format(date, \"day\");\n        };\n\n        resultFormat.unshift(monthDayFormatter);\n      } else {\n        resultFormat.unshift(\"monthandday\");\n      }\n\n      return this._normalizeFormat(resultFormat);\n    }\n\n    if (dateDifferences.month) {\n      return \"month\";\n    }\n\n    if (dateDifferences.day) {\n      if (intervalFormat) {\n        resultFormat.unshift(\"day\");\n      } else {\n        var dayFormatter = function (date) {\n          return _date2.default.format(date, \"dayofweek\") + \", \" + _date2.default.format(date, \"day\");\n        };\n\n        resultFormat.unshift(dayFormatter);\n      }\n\n      return this._normalizeFormat(resultFormat);\n    }\n\n    return this._normalizeFormat(resultFormat);\n  },\n  getDateFormatByTicks: function (ticks) {\n    var maxDiff;\n    var currentDiff;\n    var i;\n\n    if (ticks.length > 1) {\n      maxDiff = _date.default.getDatesDifferences(ticks[0], ticks[1]);\n\n      for (i = 1; i < ticks.length - 1; i++) {\n        currentDiff = _date.default.getDatesDifferences(ticks[i], ticks[i + 1]);\n\n        if (maxDiff.count < currentDiff.count) {\n          maxDiff = currentDiff;\n        }\n      }\n    } else {\n      maxDiff = {\n        year: true,\n        month: true,\n        day: true,\n        hour: ticks[0].getHours() > 0,\n        minute: ticks[0].getMinutes() > 0,\n        second: ticks[0].getSeconds() > 0,\n        millisecond: ticks[0].getMilliseconds() > 0\n      };\n    }\n\n    var resultFormat = this.getDateFormatByDifferences(maxDiff);\n    return resultFormat;\n  },\n  getDateFormatByTickInterval: function (startValue, endValue, tickInterval) {\n    var dateUnitInterval;\n    var dateDifferencesConverter = {\n      week: \"day\"\n    };\n\n    var correctDateDifferences = function (dateDifferences, tickInterval, value) {\n      switch (tickInterval) {\n        case \"year\":\n        case \"quarter\":\n          dateDifferences.month = value;\n\n        case \"month\":\n          dateDifferences.day = value;\n\n        case \"week\":\n        case \"day\":\n          dateDifferences.hour = value;\n\n        case \"hour\":\n          dateDifferences.minute = value;\n\n        case \"minute\":\n          dateDifferences.second = value;\n\n        case \"second\":\n          dateDifferences.millisecond = value;\n      }\n    };\n\n    var correctDifferencesByMaxDate = function (differences, minDate, maxDate) {\n      if (!maxDate.getMilliseconds() && maxDate.getSeconds()) {\n        if (maxDate.getSeconds() - minDate.getSeconds() === 1) {\n          differences.millisecond = true;\n          differences.second = false;\n        }\n      } else {\n        if (!maxDate.getSeconds() && maxDate.getMinutes()) {\n          if (maxDate.getMinutes() - minDate.getMinutes() === 1) {\n            differences.second = true;\n            differences.minute = false;\n          }\n        } else {\n          if (!maxDate.getMinutes() && maxDate.getHours()) {\n            if (maxDate.getHours() - minDate.getHours() === 1) {\n              differences.minute = true;\n              differences.hour = false;\n            }\n          } else {\n            if (!maxDate.getHours() && maxDate.getDate() > 1) {\n              if (maxDate.getDate() - minDate.getDate() === 1) {\n                differences.hour = true;\n                differences.day = false;\n              }\n            } else {\n              if (1 === maxDate.getDate() && maxDate.getMonth()) {\n                if (maxDate.getMonth() - minDate.getMonth() === 1) {\n                  differences.day = true;\n                  differences.month = false;\n                }\n              } else {\n                if (!maxDate.getMonth() && maxDate.getFullYear()) {\n                  if (maxDate.getFullYear() - minDate.getFullYear() === 1) {\n                    differences.month = true;\n                    differences.year = false;\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    };\n\n    tickInterval = (0, _type.isString)(tickInterval) ? tickInterval.toLowerCase() : tickInterval;\n\n    var dateDifferences = _date.default.getDatesDifferences(startValue, endValue);\n\n    if (startValue !== endValue) {\n      correctDifferencesByMaxDate(dateDifferences, startValue > endValue ? endValue : startValue, startValue > endValue ? startValue : endValue);\n    }\n\n    dateUnitInterval = _date.default.getDateUnitInterval(dateDifferences);\n    correctDateDifferences(dateDifferences, dateUnitInterval, true);\n    dateUnitInterval = _date.default.getDateUnitInterval(tickInterval || \"second\");\n    correctDateDifferences(dateDifferences, dateUnitInterval, false);\n    dateDifferences[dateDifferencesConverter[dateUnitInterval] || dateUnitInterval] = true;\n    var resultFormat = this.getDateFormatByDifferences(dateDifferences);\n    return resultFormat;\n  }\n});\n\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["E:/Monday.com/quickstart-react/node_modules/devextreme/format_helper.js"],"names":["exports","default","_type","require","_date","_interopRequireDefault","_number","_date2","_dependency_injector","obj","__esModule","_default","format","value","_format","formatIsValid","isString","isPlainObject","isFunction","valueIsValid","isNumeric","isDate","isDefined","toString","type","getTimeFormat","showSecond","_normalizeFormat","Array","isArray","length","date","map","formatPart","join","getDateFormatByDifferences","dateDifferences","intervalFormat","resultFormat","needSpecialSecondFormatter","millisecond","year","month","day","secondFormatter","getSeconds","getMilliseconds","push","hour","minute","second","unshift","quarter","monthDayFormatter","getMonthNames","getMonth","dayFormatter","getDateFormatByTicks","ticks","maxDiff","currentDiff","i","getDatesDifferences","count","getHours","getMinutes","getDateFormatByTickInterval","startValue","endValue","tickInterval","dateUnitInterval","dateDifferencesConverter","week","correctDateDifferences","correctDifferencesByMaxDate","differences","minDate","maxDate","getDate","getFullYear","toLowerCase","getDateUnitInterval","module"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (format_helper.js)\r\n * Version: 20.2.3\r\n * Build date: Tue Oct 20 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.default = void 0;\r\nvar _type = require(\"./core/utils/type\");\r\nvar _date = _interopRequireDefault(require(\"./core/utils/date\"));\r\nvar _number = _interopRequireDefault(require(\"./localization/number\"));\r\nvar _date2 = _interopRequireDefault(require(\"./localization/date\"));\r\nvar _dependency_injector = _interopRequireDefault(require(\"./core/utils/dependency_injector\"));\r\nrequire(\"./localization/currency\");\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar _default = (0, _dependency_injector.default)({\r\n    format: function(value, _format) {\r\n        var formatIsValid = (0, _type.isString)(_format) && \"\" !== _format || (0, _type.isPlainObject)(_format) || (0, _type.isFunction)(_format);\r\n        var valueIsValid = (0, _type.isNumeric)(value) || (0, _type.isDate)(value);\r\n        if (!formatIsValid || !valueIsValid) {\r\n            return (0, _type.isDefined)(value) ? value.toString() : \"\"\r\n        }\r\n        if ((0, _type.isFunction)(_format)) {\r\n            return _format(value)\r\n        }\r\n        if ((0, _type.isString)(_format)) {\r\n            _format = {\r\n                type: _format\r\n            }\r\n        }\r\n        if ((0, _type.isNumeric)(value)) {\r\n            return _number.default.format(value, _format)\r\n        }\r\n        if ((0, _type.isDate)(value)) {\r\n            return _date2.default.format(value, _format)\r\n        }\r\n    },\r\n    getTimeFormat: function(showSecond) {\r\n        return showSecond ? \"longtime\" : \"shorttime\"\r\n    },\r\n    _normalizeFormat: function(format) {\r\n        if (!Array.isArray(format)) {\r\n            return format\r\n        }\r\n        if (1 === format.length) {\r\n            return format[0]\r\n        }\r\n        return function(date) {\r\n            return format.map(function(formatPart) {\r\n                return _date2.default.format(date, formatPart)\r\n            }).join(\" \")\r\n        }\r\n    },\r\n    getDateFormatByDifferences: function(dateDifferences, intervalFormat) {\r\n        var resultFormat = [];\r\n        var needSpecialSecondFormatter = intervalFormat && dateDifferences.millisecond && !(dateDifferences.year || dateDifferences.month || dateDifferences.day);\r\n        if (needSpecialSecondFormatter) {\r\n            var secondFormatter = function(date) {\r\n                return date.getSeconds() + date.getMilliseconds() / 1e3 + \"s\"\r\n            };\r\n            resultFormat.push(secondFormatter)\r\n        } else {\r\n            if (dateDifferences.millisecond) {\r\n                resultFormat.push(\"millisecond\")\r\n            }\r\n        }\r\n        if (dateDifferences.hour || dateDifferences.minute || !needSpecialSecondFormatter && dateDifferences.second) {\r\n            resultFormat.unshift(this.getTimeFormat(dateDifferences.second))\r\n        }\r\n        if (dateDifferences.year && dateDifferences.month && dateDifferences.day) {\r\n            if (intervalFormat && \"month\" === intervalFormat) {\r\n                return \"monthandyear\"\r\n            } else {\r\n                resultFormat.unshift(\"shortdate\");\r\n                return this._normalizeFormat(resultFormat)\r\n            }\r\n        }\r\n        if (dateDifferences.year && dateDifferences.month) {\r\n            return \"monthandyear\"\r\n        }\r\n        if (dateDifferences.year && dateDifferences.quarter) {\r\n            return \"quarterandyear\"\r\n        }\r\n        if (dateDifferences.year) {\r\n            return \"year\"\r\n        }\r\n        if (dateDifferences.quarter) {\r\n            return \"quarter\"\r\n        }\r\n        if (dateDifferences.month && dateDifferences.day) {\r\n            if (intervalFormat) {\r\n                var monthDayFormatter = function(date) {\r\n                    return _date2.default.getMonthNames(\"abbreviated\")[date.getMonth()] + \" \" + _date2.default.format(date, \"day\")\r\n                };\r\n                resultFormat.unshift(monthDayFormatter)\r\n            } else {\r\n                resultFormat.unshift(\"monthandday\")\r\n            }\r\n            return this._normalizeFormat(resultFormat)\r\n        }\r\n        if (dateDifferences.month) {\r\n            return \"month\"\r\n        }\r\n        if (dateDifferences.day) {\r\n            if (intervalFormat) {\r\n                resultFormat.unshift(\"day\")\r\n            } else {\r\n                var dayFormatter = function(date) {\r\n                    return _date2.default.format(date, \"dayofweek\") + \", \" + _date2.default.format(date, \"day\")\r\n                };\r\n                resultFormat.unshift(dayFormatter)\r\n            }\r\n            return this._normalizeFormat(resultFormat)\r\n        }\r\n        return this._normalizeFormat(resultFormat)\r\n    },\r\n    getDateFormatByTicks: function(ticks) {\r\n        var maxDiff;\r\n        var currentDiff;\r\n        var i;\r\n        if (ticks.length > 1) {\r\n            maxDiff = _date.default.getDatesDifferences(ticks[0], ticks[1]);\r\n            for (i = 1; i < ticks.length - 1; i++) {\r\n                currentDiff = _date.default.getDatesDifferences(ticks[i], ticks[i + 1]);\r\n                if (maxDiff.count < currentDiff.count) {\r\n                    maxDiff = currentDiff\r\n                }\r\n            }\r\n        } else {\r\n            maxDiff = {\r\n                year: true,\r\n                month: true,\r\n                day: true,\r\n                hour: ticks[0].getHours() > 0,\r\n                minute: ticks[0].getMinutes() > 0,\r\n                second: ticks[0].getSeconds() > 0,\r\n                millisecond: ticks[0].getMilliseconds() > 0\r\n            }\r\n        }\r\n        var resultFormat = this.getDateFormatByDifferences(maxDiff);\r\n        return resultFormat\r\n    },\r\n    getDateFormatByTickInterval: function(startValue, endValue, tickInterval) {\r\n        var dateUnitInterval;\r\n        var dateDifferencesConverter = {\r\n            week: \"day\"\r\n        };\r\n        var correctDateDifferences = function(dateDifferences, tickInterval, value) {\r\n            switch (tickInterval) {\r\n                case \"year\":\r\n                case \"quarter\":\r\n                    dateDifferences.month = value;\r\n                case \"month\":\r\n                    dateDifferences.day = value;\r\n                case \"week\":\r\n                case \"day\":\r\n                    dateDifferences.hour = value;\r\n                case \"hour\":\r\n                    dateDifferences.minute = value;\r\n                case \"minute\":\r\n                    dateDifferences.second = value;\r\n                case \"second\":\r\n                    dateDifferences.millisecond = value\r\n            }\r\n        };\r\n        var correctDifferencesByMaxDate = function(differences, minDate, maxDate) {\r\n            if (!maxDate.getMilliseconds() && maxDate.getSeconds()) {\r\n                if (maxDate.getSeconds() - minDate.getSeconds() === 1) {\r\n                    differences.millisecond = true;\r\n                    differences.second = false\r\n                }\r\n            } else {\r\n                if (!maxDate.getSeconds() && maxDate.getMinutes()) {\r\n                    if (maxDate.getMinutes() - minDate.getMinutes() === 1) {\r\n                        differences.second = true;\r\n                        differences.minute = false\r\n                    }\r\n                } else {\r\n                    if (!maxDate.getMinutes() && maxDate.getHours()) {\r\n                        if (maxDate.getHours() - minDate.getHours() === 1) {\r\n                            differences.minute = true;\r\n                            differences.hour = false\r\n                        }\r\n                    } else {\r\n                        if (!maxDate.getHours() && maxDate.getDate() > 1) {\r\n                            if (maxDate.getDate() - minDate.getDate() === 1) {\r\n                                differences.hour = true;\r\n                                differences.day = false\r\n                            }\r\n                        } else {\r\n                            if (1 === maxDate.getDate() && maxDate.getMonth()) {\r\n                                if (maxDate.getMonth() - minDate.getMonth() === 1) {\r\n                                    differences.day = true;\r\n                                    differences.month = false\r\n                                }\r\n                            } else {\r\n                                if (!maxDate.getMonth() && maxDate.getFullYear()) {\r\n                                    if (maxDate.getFullYear() - minDate.getFullYear() === 1) {\r\n                                        differences.month = true;\r\n                                        differences.year = false\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        tickInterval = (0, _type.isString)(tickInterval) ? tickInterval.toLowerCase() : tickInterval;\r\n        var dateDifferences = _date.default.getDatesDifferences(startValue, endValue);\r\n        if (startValue !== endValue) {\r\n            correctDifferencesByMaxDate(dateDifferences, startValue > endValue ? endValue : startValue, startValue > endValue ? startValue : endValue)\r\n        }\r\n        dateUnitInterval = _date.default.getDateUnitInterval(dateDifferences);\r\n        correctDateDifferences(dateDifferences, dateUnitInterval, true);\r\n        dateUnitInterval = _date.default.getDateUnitInterval(tickInterval || \"second\");\r\n        correctDateDifferences(dateDifferences, dateUnitInterval, false);\r\n        dateDifferences[dateDifferencesConverter[dateUnitInterval] || dateUnitInterval] = true;\r\n        var resultFormat = this.getDateFormatByDifferences(dateDifferences);\r\n        return resultFormat\r\n    }\r\n});\r\nexports.default = _default;\r\nmodule.exports = exports.default;\r\n"]},"metadata":{},"sourceType":"script"}