{"ast":null,"code":"/**\r\n * DevExtreme (viz/axes/smart_formatter.js)\r\n * Version: 20.2.3\r\n * Build date: Tue Oct 20 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.smartFormatter = smartFormatter;\nexports.formatRange = formatRange;\n\nvar _format_helper = _interopRequireDefault(require(\"../../format_helper\"));\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _date = _interopRequireDefault(require(\"../../core/utils/date\"));\n\nvar _math = require(\"../../core/utils/math\");\n\nvar _utils = require(\"../core/utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar _format = _format_helper.default.format;\nvar abs = Math.abs,\n    floor = Math.floor;\nvar EXPONENTIAL = \"exponential\";\nvar formats = [\"fixedPoint\", \"thousands\", \"millions\", \"billions\", \"trillions\", EXPONENTIAL];\nvar dateUnitIntervals = [\"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"month\", \"year\"];\n\nfunction getDatesDifferences(prevDate, curDate, nextDate, tickFormat) {\n  var prevDifferences;\n  var nextDifferences;\n  var dateUnitInterval;\n  var dateUnitsLength = dateUnitIntervals.length;\n  var i;\n  var j;\n\n  if (\"week\" === tickFormat) {\n    tickFormat = \"day\";\n  } else {\n    if (\"quarter\" === tickFormat) {\n      tickFormat = \"month\";\n    } else {\n      if (\"shorttime\" === tickFormat) {\n        tickFormat = \"hour\";\n      } else {\n        if (\"longtime\" === tickFormat) {\n          tickFormat = \"second\";\n        }\n      }\n    }\n  }\n\n  var tickFormatIndex = dateUnitIntervals.indexOf(tickFormat);\n\n  if (nextDate) {\n    nextDifferences = _date.default.getDatesDifferences(curDate, nextDate);\n    prevDifferences = _date.default.getDatesDifferences(curDate, prevDate);\n\n    if (nextDifferences[tickFormat]) {\n      for (i = dateUnitsLength - 1; i >= tickFormatIndex; i--) {\n        dateUnitInterval = dateUnitIntervals[i];\n\n        if (i === tickFormatIndex) {\n          setDateUnitInterval(nextDifferences, tickFormatIndex + (nextDifferences.millisecond ? 2 : 1));\n        } else {\n          if (nextDifferences[dateUnitInterval]) {\n            resetDateUnitInterval(nextDifferences, i);\n            break;\n          }\n        }\n      }\n    }\n  } else {\n    prevDifferences = _date.default.getDatesDifferences(prevDate, curDate);\n\n    for (i = dateUnitsLength - 1; i >= tickFormatIndex; i--) {\n      dateUnitInterval = dateUnitIntervals[i];\n\n      if (prevDifferences[dateUnitInterval]) {\n        if (i - tickFormatIndex > 1) {\n          for (j = tickFormatIndex + 1; j >= 0; j--) {\n            resetDateUnitInterval(prevDifferences, j);\n          }\n\n          break;\n        } else {\n          if (isDateTimeStart(curDate, dateUnitInterval)) {\n            for (j = i - 1; j > 0; j--) {\n              resetDateUnitInterval(prevDifferences, j);\n            }\n\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  return nextDate ? nextDifferences : prevDifferences;\n}\n\nfunction isDateTimeStart(date, dateUnitInterval) {\n  var unitNumbers = [date.getMilliseconds(), date.getSeconds(), date.getMinutes(), date.getHours(), date.getDate(), date.getMonth()];\n  var unitIndex = dateUnitIntervals.indexOf(dateUnitInterval);\n  var i;\n\n  for (i = 0; i < unitIndex; i++) {\n    if (4 === i && 1 !== unitNumbers[i] || 4 !== i && 0 !== unitNumbers[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction resetDateUnitInterval(differences, intervalIndex) {\n  var dateUnitInterval = dateUnitIntervals[intervalIndex];\n\n  if (differences[dateUnitInterval]) {\n    differences[dateUnitInterval] = false;\n    differences.count--;\n  }\n}\n\nfunction setDateUnitInterval(differences, intervalIndex) {\n  var dateUnitInterval = dateUnitIntervals[intervalIndex];\n\n  if (false === differences[dateUnitInterval]) {\n    differences[dateUnitInterval] = true;\n    differences.count++;\n  }\n}\n\nfunction getNoZeroIndex(str) {\n  return str.length - parseInt(str).toString().length;\n}\n\nfunction getTransitionTickIndex(ticks, value) {\n  var i;\n  var curDiff;\n  var minDiff;\n  var nearestTickIndex = 0;\n  minDiff = abs(value - ticks[0]);\n\n  for (i = 1; i < ticks.length; i++) {\n    curDiff = abs(value - ticks[i]);\n\n    if (curDiff < minDiff) {\n      minDiff = curDiff;\n      nearestTickIndex = i;\n    }\n  }\n\n  return nearestTickIndex;\n}\n\nfunction splitDecimalNumber(value) {\n  return value.toString().split(\".\");\n}\n\nfunction createFormat(type) {\n  var formatter;\n\n  if ((0, _type.isFunction)(type)) {\n    formatter = type;\n    type = null;\n  }\n\n  return {\n    type: type,\n    formatter: formatter\n  };\n}\n\nfunction smartFormatter(tick, options) {\n  var tickInterval = options.tickInterval;\n  var tickIntervalIndex;\n  var tickIndex;\n  var actualIndex;\n  var stringTick = abs(tick).toString();\n  var precision = 0;\n  var typeFormat;\n  var offset = 0;\n  var separatedTickInterval;\n  var indexOfFormat = 0;\n  var indexOfTick = -1;\n  var datesDifferences;\n  var format = options.labelOptions.format;\n  var ticks = options.ticks;\n  var log10Tick;\n  var prevDateIndex;\n  var nextDateIndex;\n  var isLogarithmic = \"logarithmic\" === options.type;\n\n  if (1 === ticks.length && 0 === ticks.indexOf(tick) && !(0, _type.isDefined)(tickInterval)) {\n    tickInterval = abs(tick) >= 1 ? 1 : (0, _math.adjust)(1 - abs(tick), tick);\n  }\n\n  if (!(0, _type.isDefined)(format) && \"discrete\" !== options.type && tick && (10 === options.logarithmBase || !isLogarithmic)) {\n    if (\"datetime\" !== options.dataType && (0, _type.isDefined)(tickInterval)) {\n      if (ticks.length && ticks.indexOf(tick) === -1) {\n        indexOfTick = getTransitionTickIndex(ticks, tick);\n        tickInterval = (0, _math.adjust)(abs(tick - ticks[indexOfTick]), tick);\n      }\n\n      separatedTickInterval = splitDecimalNumber(tickInterval);\n\n      if (separatedTickInterval < 2) {\n        separatedTickInterval = splitDecimalNumber(tick);\n      }\n\n      if (isLogarithmic) {\n        log10Tick = (0, _utils.getAdjustedLog10)(abs(tick));\n\n        if (log10Tick > 0) {\n          typeFormat = formats[floor(log10Tick / 3)] || EXPONENTIAL;\n        } else {\n          if (log10Tick < -4) {\n            typeFormat = EXPONENTIAL;\n          } else {\n            return _format((0, _math.adjust)(tick));\n          }\n        }\n      } else {\n        if (separatedTickInterval.length > 1 && !(0, _type.isExponential)(tickInterval)) {\n          precision = separatedTickInterval[1].length;\n          typeFormat = formats[indexOfFormat];\n        } else {\n          if ((0, _type.isExponential)(tickInterval) && (stringTick.indexOf(\".\") !== -1 || (0, _type.isExponential)(tick))) {\n            typeFormat = EXPONENTIAL;\n\n            if (!(0, _type.isExponential)(tick)) {\n              precision = abs(getNoZeroIndex(stringTick.split(\".\")[1]) - (0, _math.getExponent)(tickInterval) + 1);\n            } else {\n              precision = Math.max(abs((0, _math.getExponent)(tick) - (0, _math.getExponent)(tickInterval)), abs((0, _math.getPrecision)(tick) - (0, _math.getPrecision)(tickInterval)));\n            }\n          } else {\n            tickIntervalIndex = floor((0, _utils.getAdjustedLog10)(tickInterval));\n            actualIndex = tickIndex = floor((0, _utils.getAdjustedLog10)(abs(tick)));\n\n            if (tickIndex - tickIntervalIndex >= 2) {\n              actualIndex = tickIntervalIndex;\n            }\n\n            indexOfFormat = floor(actualIndex / 3);\n            offset = 3 * indexOfFormat;\n\n            if (indexOfFormat < 5) {\n              if (tickIntervalIndex - offset === 2 && tickIndex >= 3) {\n                indexOfFormat++;\n                offset = 3 * indexOfFormat;\n              }\n\n              typeFormat = formats[indexOfFormat];\n            } else {\n              typeFormat = formats[formats.length - 1];\n            }\n\n            if (offset > 0) {\n              separatedTickInterval = splitDecimalNumber(tickInterval / Math.pow(10, offset));\n\n              if (separatedTickInterval[1]) {\n                precision = separatedTickInterval[1].length;\n              }\n            }\n          }\n        }\n      }\n\n      if (void 0 !== typeFormat || void 0 !== precision) {\n        format = {\n          type: typeFormat,\n          precision: precision\n        };\n      }\n    } else {\n      if (\"datetime\" === options.dataType) {\n        typeFormat = _date.default.getDateFormatByTickInterval(tickInterval);\n\n        if (options.showTransition && ticks.length) {\n          indexOfTick = ticks.map(Number).indexOf(+tick);\n\n          if (1 === ticks.length && 0 === indexOfTick) {\n            typeFormat = _format_helper.default.getDateFormatByTicks(ticks);\n          } else {\n            if (indexOfTick === -1) {\n              prevDateIndex = getTransitionTickIndex(ticks, tick);\n            } else {\n              prevDateIndex = 0 === indexOfTick ? ticks.length - 1 : indexOfTick - 1;\n              nextDateIndex = 0 === indexOfTick ? 1 : -1;\n            }\n\n            datesDifferences = getDatesDifferences(ticks[prevDateIndex], tick, ticks[nextDateIndex], typeFormat);\n            typeFormat = _format_helper.default.getDateFormatByDifferences(datesDifferences, typeFormat);\n          }\n        }\n\n        format = createFormat(typeFormat);\n      }\n    }\n  }\n\n  return _format(tick, format);\n}\n\nfunction getHighDiffFormat(diff) {\n  var stop = false;\n\n  for (var i in diff) {\n    if (true === diff[i] || \"hour\" === i || stop) {\n      diff[i] = false;\n      stop = true;\n    } else {\n      if (false === diff[i]) {\n        diff[i] = true;\n      }\n    }\n  }\n\n  return createFormat(_format_helper.default.getDateFormatByDifferences(diff));\n}\n\nfunction getHighAndSelfDiffFormat(diff, interval) {\n  var stop = false;\n\n  for (var i in diff) {\n    if (stop) {\n      diff[i] = false;\n    } else {\n      if (i === interval) {\n        stop = true;\n      } else {\n        diff[i] = true;\n      }\n    }\n  }\n\n  return createFormat(_format_helper.default.getDateFormatByDifferences(diff));\n}\n\nfunction formatDateRange(startValue, endValue, tickInterval) {\n  var diff = getDatesDifferences(startValue, endValue);\n\n  var typeFormat = _date.default.getDateFormatByTickInterval(tickInterval);\n\n  var diffFormatType = _format_helper.default.getDateFormatByDifferences(diff, typeFormat);\n\n  var diffFormat = createFormat(diffFormatType);\n  var values = [];\n\n  if (tickInterval in diff) {\n    var rangeFormat = getHighAndSelfDiffFormat(getDatesDifferences(startValue, endValue), tickInterval);\n\n    var value = _format(startValue, rangeFormat);\n\n    if (value) {\n      values.push(value);\n    }\n  } else {\n    var _rangeFormat = getHighDiffFormat(getDatesDifferences(startValue, endValue));\n\n    var highValue = _format(startValue, _rangeFormat);\n\n    if (highValue) {\n      values.push(highValue);\n    }\n\n    values.push(\"\".concat(_format(startValue, diffFormat), \" - \").concat(_format(endValue, diffFormat)));\n  }\n\n  return values.join(\", \");\n}\n\nfunction processDateInterval(interval) {\n  if ((0, _type.isObject)(interval)) {\n    var dateUnits = Object.keys(interval);\n    var sum = dateUnits.reduce(function (sum, k) {\n      return interval[k] + sum;\n    }, 0);\n\n    if (1 === sum) {\n      var dateUnit = dateUnits.filter(function (k) {\n        return 1 === interval[k];\n      })[0];\n      return dateUnit.slice(0, dateUnit.length - 1);\n    }\n  }\n\n  return interval;\n}\n\nfunction formatRange(startValue, endValue, tickInterval, _ref) {\n  var dataType = _ref.dataType,\n      type = _ref.type,\n      logarithmBase = _ref.logarithmBase;\n\n  if (\"discrete\" === type) {\n    return \"\";\n  }\n\n  if (\"datetime\" === dataType) {\n    return formatDateRange(startValue, endValue, processDateInterval(tickInterval));\n  }\n\n  var formatOptions = {\n    ticks: [],\n    type: type,\n    dataType: dataType,\n    tickInterval: tickInterval,\n    logarithmBase: logarithmBase,\n    labelOptions: {}\n  };\n  return \"\".concat(smartFormatter(startValue, formatOptions), \" - \").concat(smartFormatter(endValue, formatOptions));\n}","map":{"version":3,"sources":["E:/Monday.com/quickstart-react/node_modules/devextreme/viz/axes/smart_formatter.js"],"names":["exports","smartFormatter","formatRange","_format_helper","_interopRequireDefault","require","_type","_date","_math","_utils","obj","__esModule","_format","default","format","abs","Math","floor","EXPONENTIAL","formats","dateUnitIntervals","getDatesDifferences","prevDate","curDate","nextDate","tickFormat","prevDifferences","nextDifferences","dateUnitInterval","dateUnitsLength","length","i","j","tickFormatIndex","indexOf","setDateUnitInterval","millisecond","resetDateUnitInterval","isDateTimeStart","date","unitNumbers","getMilliseconds","getSeconds","getMinutes","getHours","getDate","getMonth","unitIndex","differences","intervalIndex","count","getNoZeroIndex","str","parseInt","toString","getTransitionTickIndex","ticks","value","curDiff","minDiff","nearestTickIndex","splitDecimalNumber","split","createFormat","type","formatter","isFunction","tick","options","tickInterval","tickIntervalIndex","tickIndex","actualIndex","stringTick","precision","typeFormat","offset","separatedTickInterval","indexOfFormat","indexOfTick","datesDifferences","labelOptions","log10Tick","prevDateIndex","nextDateIndex","isLogarithmic","isDefined","adjust","logarithmBase","dataType","getAdjustedLog10","isExponential","getExponent","max","getPrecision","pow","getDateFormatByTickInterval","showTransition","map","Number","getDateFormatByTicks","getDateFormatByDifferences","getHighDiffFormat","diff","stop","getHighAndSelfDiffFormat","interval","formatDateRange","startValue","endValue","diffFormatType","diffFormat","values","rangeFormat","push","_rangeFormat","highValue","concat","join","processDateInterval","isObject","dateUnits","Object","keys","sum","reduce","k","dateUnit","filter","slice","_ref","formatOptions"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (viz/axes/smart_formatter.js)\r\n * Version: 20.2.3\r\n * Build date: Tue Oct 20 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.smartFormatter = smartFormatter;\r\nexports.formatRange = formatRange;\r\nvar _format_helper = _interopRequireDefault(require(\"../../format_helper\"));\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _date = _interopRequireDefault(require(\"../../core/utils/date\"));\r\nvar _math = require(\"../../core/utils/math\");\r\nvar _utils = require(\"../core/utils\");\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar _format = _format_helper.default.format;\r\nvar abs = Math.abs,\r\n    floor = Math.floor;\r\nvar EXPONENTIAL = \"exponential\";\r\nvar formats = [\"fixedPoint\", \"thousands\", \"millions\", \"billions\", \"trillions\", EXPONENTIAL];\r\nvar dateUnitIntervals = [\"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"month\", \"year\"];\r\n\r\nfunction getDatesDifferences(prevDate, curDate, nextDate, tickFormat) {\r\n    var prevDifferences;\r\n    var nextDifferences;\r\n    var dateUnitInterval;\r\n    var dateUnitsLength = dateUnitIntervals.length;\r\n    var i;\r\n    var j;\r\n    if (\"week\" === tickFormat) {\r\n        tickFormat = \"day\"\r\n    } else {\r\n        if (\"quarter\" === tickFormat) {\r\n            tickFormat = \"month\"\r\n        } else {\r\n            if (\"shorttime\" === tickFormat) {\r\n                tickFormat = \"hour\"\r\n            } else {\r\n                if (\"longtime\" === tickFormat) {\r\n                    tickFormat = \"second\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n    var tickFormatIndex = dateUnitIntervals.indexOf(tickFormat);\r\n    if (nextDate) {\r\n        nextDifferences = _date.default.getDatesDifferences(curDate, nextDate);\r\n        prevDifferences = _date.default.getDatesDifferences(curDate, prevDate);\r\n        if (nextDifferences[tickFormat]) {\r\n            for (i = dateUnitsLength - 1; i >= tickFormatIndex; i--) {\r\n                dateUnitInterval = dateUnitIntervals[i];\r\n                if (i === tickFormatIndex) {\r\n                    setDateUnitInterval(nextDifferences, tickFormatIndex + (nextDifferences.millisecond ? 2 : 1))\r\n                } else {\r\n                    if (nextDifferences[dateUnitInterval]) {\r\n                        resetDateUnitInterval(nextDifferences, i);\r\n                        break\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        prevDifferences = _date.default.getDatesDifferences(prevDate, curDate);\r\n        for (i = dateUnitsLength - 1; i >= tickFormatIndex; i--) {\r\n            dateUnitInterval = dateUnitIntervals[i];\r\n            if (prevDifferences[dateUnitInterval]) {\r\n                if (i - tickFormatIndex > 1) {\r\n                    for (j = tickFormatIndex + 1; j >= 0; j--) {\r\n                        resetDateUnitInterval(prevDifferences, j)\r\n                    }\r\n                    break\r\n                } else {\r\n                    if (isDateTimeStart(curDate, dateUnitInterval)) {\r\n                        for (j = i - 1; j > 0; j--) {\r\n                            resetDateUnitInterval(prevDifferences, j)\r\n                        }\r\n                        break\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return nextDate ? nextDifferences : prevDifferences\r\n}\r\n\r\nfunction isDateTimeStart(date, dateUnitInterval) {\r\n    var unitNumbers = [date.getMilliseconds(), date.getSeconds(), date.getMinutes(), date.getHours(), date.getDate(), date.getMonth()];\r\n    var unitIndex = dateUnitIntervals.indexOf(dateUnitInterval);\r\n    var i;\r\n    for (i = 0; i < unitIndex; i++) {\r\n        if (4 === i && 1 !== unitNumbers[i] || 4 !== i && 0 !== unitNumbers[i]) {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction resetDateUnitInterval(differences, intervalIndex) {\r\n    var dateUnitInterval = dateUnitIntervals[intervalIndex];\r\n    if (differences[dateUnitInterval]) {\r\n        differences[dateUnitInterval] = false;\r\n        differences.count--\r\n    }\r\n}\r\n\r\nfunction setDateUnitInterval(differences, intervalIndex) {\r\n    var dateUnitInterval = dateUnitIntervals[intervalIndex];\r\n    if (false === differences[dateUnitInterval]) {\r\n        differences[dateUnitInterval] = true;\r\n        differences.count++\r\n    }\r\n}\r\n\r\nfunction getNoZeroIndex(str) {\r\n    return str.length - parseInt(str).toString().length\r\n}\r\n\r\nfunction getTransitionTickIndex(ticks, value) {\r\n    var i;\r\n    var curDiff;\r\n    var minDiff;\r\n    var nearestTickIndex = 0;\r\n    minDiff = abs(value - ticks[0]);\r\n    for (i = 1; i < ticks.length; i++) {\r\n        curDiff = abs(value - ticks[i]);\r\n        if (curDiff < minDiff) {\r\n            minDiff = curDiff;\r\n            nearestTickIndex = i\r\n        }\r\n    }\r\n    return nearestTickIndex\r\n}\r\n\r\nfunction splitDecimalNumber(value) {\r\n    return value.toString().split(\".\")\r\n}\r\n\r\nfunction createFormat(type) {\r\n    var formatter;\r\n    if ((0, _type.isFunction)(type)) {\r\n        formatter = type;\r\n        type = null\r\n    }\r\n    return {\r\n        type: type,\r\n        formatter: formatter\r\n    }\r\n}\r\n\r\nfunction smartFormatter(tick, options) {\r\n    var tickInterval = options.tickInterval;\r\n    var tickIntervalIndex;\r\n    var tickIndex;\r\n    var actualIndex;\r\n    var stringTick = abs(tick).toString();\r\n    var precision = 0;\r\n    var typeFormat;\r\n    var offset = 0;\r\n    var separatedTickInterval;\r\n    var indexOfFormat = 0;\r\n    var indexOfTick = -1;\r\n    var datesDifferences;\r\n    var format = options.labelOptions.format;\r\n    var ticks = options.ticks;\r\n    var log10Tick;\r\n    var prevDateIndex;\r\n    var nextDateIndex;\r\n    var isLogarithmic = \"logarithmic\" === options.type;\r\n    if (1 === ticks.length && 0 === ticks.indexOf(tick) && !(0, _type.isDefined)(tickInterval)) {\r\n        tickInterval = abs(tick) >= 1 ? 1 : (0, _math.adjust)(1 - abs(tick), tick)\r\n    }\r\n    if (!(0, _type.isDefined)(format) && \"discrete\" !== options.type && tick && (10 === options.logarithmBase || !isLogarithmic)) {\r\n        if (\"datetime\" !== options.dataType && (0, _type.isDefined)(tickInterval)) {\r\n            if (ticks.length && ticks.indexOf(tick) === -1) {\r\n                indexOfTick = getTransitionTickIndex(ticks, tick);\r\n                tickInterval = (0, _math.adjust)(abs(tick - ticks[indexOfTick]), tick)\r\n            }\r\n            separatedTickInterval = splitDecimalNumber(tickInterval);\r\n            if (separatedTickInterval < 2) {\r\n                separatedTickInterval = splitDecimalNumber(tick)\r\n            }\r\n            if (isLogarithmic) {\r\n                log10Tick = (0, _utils.getAdjustedLog10)(abs(tick));\r\n                if (log10Tick > 0) {\r\n                    typeFormat = formats[floor(log10Tick / 3)] || EXPONENTIAL\r\n                } else {\r\n                    if (log10Tick < -4) {\r\n                        typeFormat = EXPONENTIAL\r\n                    } else {\r\n                        return _format((0, _math.adjust)(tick))\r\n                    }\r\n                }\r\n            } else {\r\n                if (separatedTickInterval.length > 1 && !(0, _type.isExponential)(tickInterval)) {\r\n                    precision = separatedTickInterval[1].length;\r\n                    typeFormat = formats[indexOfFormat]\r\n                } else {\r\n                    if ((0, _type.isExponential)(tickInterval) && (stringTick.indexOf(\".\") !== -1 || (0, _type.isExponential)(tick))) {\r\n                        typeFormat = EXPONENTIAL;\r\n                        if (!(0, _type.isExponential)(tick)) {\r\n                            precision = abs(getNoZeroIndex(stringTick.split(\".\")[1]) - (0, _math.getExponent)(tickInterval) + 1)\r\n                        } else {\r\n                            precision = Math.max(abs((0, _math.getExponent)(tick) - (0, _math.getExponent)(tickInterval)), abs((0, _math.getPrecision)(tick) - (0, _math.getPrecision)(tickInterval)))\r\n                        }\r\n                    } else {\r\n                        tickIntervalIndex = floor((0, _utils.getAdjustedLog10)(tickInterval));\r\n                        actualIndex = tickIndex = floor((0, _utils.getAdjustedLog10)(abs(tick)));\r\n                        if (tickIndex - tickIntervalIndex >= 2) {\r\n                            actualIndex = tickIntervalIndex\r\n                        }\r\n                        indexOfFormat = floor(actualIndex / 3);\r\n                        offset = 3 * indexOfFormat;\r\n                        if (indexOfFormat < 5) {\r\n                            if (tickIntervalIndex - offset === 2 && tickIndex >= 3) {\r\n                                indexOfFormat++;\r\n                                offset = 3 * indexOfFormat\r\n                            }\r\n                            typeFormat = formats[indexOfFormat]\r\n                        } else {\r\n                            typeFormat = formats[formats.length - 1]\r\n                        }\r\n                        if (offset > 0) {\r\n                            separatedTickInterval = splitDecimalNumber(tickInterval / Math.pow(10, offset));\r\n                            if (separatedTickInterval[1]) {\r\n                                precision = separatedTickInterval[1].length\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (void 0 !== typeFormat || void 0 !== precision) {\r\n                format = {\r\n                    type: typeFormat,\r\n                    precision: precision\r\n                }\r\n            }\r\n        } else {\r\n            if (\"datetime\" === options.dataType) {\r\n                typeFormat = _date.default.getDateFormatByTickInterval(tickInterval);\r\n                if (options.showTransition && ticks.length) {\r\n                    indexOfTick = ticks.map(Number).indexOf(+tick);\r\n                    if (1 === ticks.length && 0 === indexOfTick) {\r\n                        typeFormat = _format_helper.default.getDateFormatByTicks(ticks)\r\n                    } else {\r\n                        if (indexOfTick === -1) {\r\n                            prevDateIndex = getTransitionTickIndex(ticks, tick)\r\n                        } else {\r\n                            prevDateIndex = 0 === indexOfTick ? ticks.length - 1 : indexOfTick - 1;\r\n                            nextDateIndex = 0 === indexOfTick ? 1 : -1\r\n                        }\r\n                        datesDifferences = getDatesDifferences(ticks[prevDateIndex], tick, ticks[nextDateIndex], typeFormat);\r\n                        typeFormat = _format_helper.default.getDateFormatByDifferences(datesDifferences, typeFormat)\r\n                    }\r\n                }\r\n                format = createFormat(typeFormat)\r\n            }\r\n        }\r\n    }\r\n    return _format(tick, format)\r\n}\r\n\r\nfunction getHighDiffFormat(diff) {\r\n    var stop = false;\r\n    for (var i in diff) {\r\n        if (true === diff[i] || \"hour\" === i || stop) {\r\n            diff[i] = false;\r\n            stop = true\r\n        } else {\r\n            if (false === diff[i]) {\r\n                diff[i] = true\r\n            }\r\n        }\r\n    }\r\n    return createFormat(_format_helper.default.getDateFormatByDifferences(diff))\r\n}\r\n\r\nfunction getHighAndSelfDiffFormat(diff, interval) {\r\n    var stop = false;\r\n    for (var i in diff) {\r\n        if (stop) {\r\n            diff[i] = false\r\n        } else {\r\n            if (i === interval) {\r\n                stop = true\r\n            } else {\r\n                diff[i] = true\r\n            }\r\n        }\r\n    }\r\n    return createFormat(_format_helper.default.getDateFormatByDifferences(diff))\r\n}\r\n\r\nfunction formatDateRange(startValue, endValue, tickInterval) {\r\n    var diff = getDatesDifferences(startValue, endValue);\r\n    var typeFormat = _date.default.getDateFormatByTickInterval(tickInterval);\r\n    var diffFormatType = _format_helper.default.getDateFormatByDifferences(diff, typeFormat);\r\n    var diffFormat = createFormat(diffFormatType);\r\n    var values = [];\r\n    if (tickInterval in diff) {\r\n        var rangeFormat = getHighAndSelfDiffFormat(getDatesDifferences(startValue, endValue), tickInterval);\r\n        var value = _format(startValue, rangeFormat);\r\n        if (value) {\r\n            values.push(value)\r\n        }\r\n    } else {\r\n        var _rangeFormat = getHighDiffFormat(getDatesDifferences(startValue, endValue));\r\n        var highValue = _format(startValue, _rangeFormat);\r\n        if (highValue) {\r\n            values.push(highValue)\r\n        }\r\n        values.push(\"\".concat(_format(startValue, diffFormat), \" - \").concat(_format(endValue, diffFormat)))\r\n    }\r\n    return values.join(\", \")\r\n}\r\n\r\nfunction processDateInterval(interval) {\r\n    if ((0, _type.isObject)(interval)) {\r\n        var dateUnits = Object.keys(interval);\r\n        var sum = dateUnits.reduce(function(sum, k) {\r\n            return interval[k] + sum\r\n        }, 0);\r\n        if (1 === sum) {\r\n            var dateUnit = dateUnits.filter(function(k) {\r\n                return 1 === interval[k]\r\n            })[0];\r\n            return dateUnit.slice(0, dateUnit.length - 1)\r\n        }\r\n    }\r\n    return interval\r\n}\r\n\r\nfunction formatRange(startValue, endValue, tickInterval, _ref) {\r\n    var dataType = _ref.dataType,\r\n        type = _ref.type,\r\n        logarithmBase = _ref.logarithmBase;\r\n    if (\"discrete\" === type) {\r\n        return \"\"\r\n    }\r\n    if (\"datetime\" === dataType) {\r\n        return formatDateRange(startValue, endValue, processDateInterval(tickInterval))\r\n    }\r\n    var formatOptions = {\r\n        ticks: [],\r\n        type: type,\r\n        dataType: dataType,\r\n        tickInterval: tickInterval,\r\n        logarithmBase: logarithmBase,\r\n        labelOptions: {}\r\n    };\r\n    return \"\".concat(smartFormatter(startValue, formatOptions), \" - \").concat(smartFormatter(endValue, formatOptions))\r\n}\r\n"]},"metadata":{},"sourceType":"script"}