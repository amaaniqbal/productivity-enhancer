{"ast":null,"code":"/**\r\n * DevExtreme (viz/translators/translator2d.js)\r\n * Version: 20.2.3\r\n * Build date: Tue Oct 20 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.Translator2D = void 0;\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _range = require(\"./range\");\n\nvar _category_translator = _interopRequireDefault(require(\"./category_translator\"));\n\nvar _interval_translator = _interopRequireDefault(require(\"./interval_translator\"));\n\nvar _datetime_translator = _interopRequireDefault(require(\"./datetime_translator\"));\n\nvar _logarithmic_translator = _interopRequireDefault(require(\"./logarithmic_translator\"));\n\nvar _utils = require(\"../core/utils\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _math = require(\"../../core/utils/math\");\n\nvar _date = _interopRequireDefault(require(\"../../core/utils/date\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar _abs = Math.abs;\nvar CANVAS_PROP = [\"width\", \"height\", \"left\", \"top\", \"bottom\", \"right\"];\nvar dummyTranslator = {\n  to: function (value) {\n    var coord = this._canvasOptions.startPoint + (this._options.conversionValue ? value : Math.round(value));\n    return coord > this._canvasOptions.endPoint ? this._canvasOptions.endPoint : coord;\n  },\n  from: function (value) {\n    return value - this._canvasOptions.startPoint;\n  }\n};\n\nvar validateCanvas = function (canvas) {\n  (0, _iterator.each)(CANVAS_PROP, function (_, prop) {\n    canvas[prop] = parseInt(canvas[prop]) || 0;\n  });\n  return canvas;\n};\n\nvar makeCategoriesToPoints = function (categories) {\n  var categoriesToPoints = {};\n  categories.forEach(function (item, i) {\n    categoriesToPoints[item.valueOf()] = i;\n  });\n  return categoriesToPoints;\n};\n\nvar validateBusinessRange = function (businessRange) {\n  if (!(businessRange instanceof _range.Range)) {\n    businessRange = new _range.Range(businessRange);\n  }\n\n  function validate(valueSelector, baseValueSelector) {\n    if (!(0, _type.isDefined)(businessRange[valueSelector]) && (0, _type.isDefined)(businessRange[baseValueSelector])) {\n      businessRange[valueSelector] = businessRange[baseValueSelector];\n    }\n  }\n\n  validate(\"minVisible\", \"min\");\n  validate(\"maxVisible\", \"max\");\n  return businessRange;\n};\n\nfunction prepareBreaks(breaks, range) {\n  var transform = \"logarithmic\" === range.axisType ? function (value) {\n    return (0, _utils.getLogExt)(value, range.base);\n  } : function (value) {\n    return value;\n  };\n  var array = [];\n  var br;\n  var transformFrom;\n  var transformTo;\n  var i;\n  var length = breaks.length;\n  var sum = 0;\n\n  for (i = 0; i < length; i++) {\n    br = breaks[i];\n    transformFrom = transform(br.from);\n    transformTo = transform(br.to);\n    sum += transformTo - transformFrom;\n    array.push({\n      trFrom: transformFrom,\n      trTo: transformTo,\n      from: br.from,\n      to: br.to,\n      length: sum,\n      cumulativeWidth: br.cumulativeWidth\n    });\n  }\n\n  return array;\n}\n\nfunction getCanvasBounds(range) {\n  var min = range.min;\n  var max = range.max;\n  var minVisible = range.minVisible;\n  var maxVisible = range.maxVisible;\n  var isLogarithmic = \"logarithmic\" === range.axisType;\n\n  if (isLogarithmic) {\n    maxVisible = (0, _utils.getLogExt)(maxVisible, range.base, range.allowNegatives, range.linearThreshold);\n    minVisible = (0, _utils.getLogExt)(minVisible, range.base, range.allowNegatives, range.linearThreshold);\n    min = (0, _utils.getLogExt)(min, range.base, range.allowNegatives, range.linearThreshold);\n    max = (0, _utils.getLogExt)(max, range.base, range.allowNegatives, range.linearThreshold);\n  }\n\n  return {\n    base: range.base,\n    rangeMin: min,\n    rangeMax: max,\n    rangeMinVisible: minVisible,\n    rangeMaxVisible: maxVisible\n  };\n}\n\nfunction getCheckingMethodsAboutBreaks(inverted) {\n  return {\n    isStartSide: !inverted ? function (pos, breaks, start, end) {\n      return pos < breaks[0][start];\n    } : function (pos, breaks, start, end) {\n      return pos <= breaks[breaks.length - 1][end];\n    },\n    isEndSide: !inverted ? function (pos, breaks, start, end) {\n      return pos >= breaks[breaks.length - 1][end];\n    } : function (pos, breaks, start, end) {\n      return pos > breaks[0][start];\n    },\n    isInBreak: !inverted ? function (pos, br, start, end) {\n      return pos >= br[start] && pos < br[end];\n    } : function (pos, br, start, end) {\n      return pos > br[end] && pos <= br[start];\n    },\n    isBetweenBreaks: !inverted ? function (pos, br, prevBreak, start, end) {\n      return pos < br[start] && pos >= prevBreak[end];\n    } : function (pos, br, prevBreak, start, end) {\n      return pos >= br[end] && pos < prevBreak[start];\n    },\n    getLength: !inverted ? function (br) {\n      return br.length;\n    } : function (br, lastBreak) {\n      return lastBreak.length - br.length;\n    },\n    getBreaksSize: !inverted ? function (br) {\n      return br.cumulativeWidth;\n    } : function (br, lastBreak) {\n      return lastBreak.cumulativeWidth - br.cumulativeWidth;\n    }\n  };\n}\n\nvar _Translator2d = function (businessRange, canvas, options) {\n  this.update(businessRange, canvas, options);\n};\n\nexports.Translator2D = _Translator2d;\n_Translator2d.prototype = {\n  constructor: _Translator2d,\n  reinit: function () {\n    var that = this;\n    var options = that._options;\n    var range = that._businessRange;\n    var categories = range.categories || [];\n    var script = {};\n\n    var canvasOptions = that._prepareCanvasOptions();\n\n    var visibleCategories = (0, _utils.getCategoriesInfo)(categories, range.minVisible, range.maxVisible).categories;\n    var categoriesLength = visibleCategories.length;\n\n    if (range.isEmpty()) {\n      script = dummyTranslator;\n    } else {\n      switch (range.axisType) {\n        case \"logarithmic\":\n          script = _logarithmic_translator.default;\n          break;\n\n        case \"semidiscrete\":\n          script = _interval_translator.default;\n          canvasOptions.ratioOfCanvasRange = canvasOptions.canvasLength / (_date.default.addInterval(canvasOptions.rangeMaxVisible, options.interval) - canvasOptions.rangeMinVisible);\n          break;\n\n        case \"discrete\":\n          script = _category_translator.default;\n          that._categories = categories;\n          canvasOptions.interval = that._getDiscreteInterval(options.addSpiderCategory ? categoriesLength + 1 : categoriesLength, canvasOptions);\n          that._categoriesToPoints = makeCategoriesToPoints(categories, canvasOptions.invert);\n\n          if (categoriesLength) {\n            canvasOptions.startPointIndex = that._categoriesToPoints[visibleCategories[0].valueOf()];\n            that.visibleCategories = visibleCategories;\n          }\n\n          break;\n\n        default:\n          if (\"datetime\" === range.dataType) {\n            script = _datetime_translator.default;\n          }\n\n      }\n    }\n\n    (that._oldMethods || []).forEach(function (methodName) {\n      delete that[methodName];\n    });\n    that._oldMethods = Object.keys(script);\n    (0, _extend.extend)(that, script);\n    that._conversionValue = options.conversionValue ? function (value) {\n      return value;\n    } : function (value) {\n      return Math.round(value);\n    };\n    that.sc = {};\n    that._checkingMethodsAboutBreaks = [getCheckingMethodsAboutBreaks(false), getCheckingMethodsAboutBreaks(that.isInverted())];\n\n    that._translateBreaks();\n\n    that._calculateSpecialValues();\n  },\n  _translateBreaks: function () {\n    var breaks = this._breaks;\n    var size = this._options.breaksSize;\n    var i;\n    var b;\n    var end;\n    var length;\n\n    if (void 0 === breaks) {\n      return;\n    }\n\n    for (i = 0, length = breaks.length; i < length; i++) {\n      b = breaks[i];\n      end = this.translate(b.to);\n      b.end = end;\n      b.start = !b.gapSize ? !this.isInverted() ? end - size : end + size : end;\n    }\n  },\n  _checkValueAboutBreaks: function (breaks, pos, start, end, methods) {\n    var i;\n    var length;\n    var prop = {\n      length: 0,\n      breaksSize: void 0,\n      inBreak: false\n    };\n    var br;\n    var prevBreak;\n    var lastBreak = breaks[breaks.length - 1];\n\n    if (methods.isStartSide(pos, breaks, start, end)) {\n      return prop;\n    } else {\n      if (methods.isEndSide(pos, breaks, start, end)) {\n        return {\n          length: lastBreak.length,\n          breaksSize: lastBreak.cumulativeWidth,\n          inBreak: false\n        };\n      }\n    }\n\n    for (i = 0, length = breaks.length; i < length; i++) {\n      br = breaks[i];\n      prevBreak = breaks[i - 1];\n\n      if (methods.isInBreak(pos, br, start, end)) {\n        prop.inBreak = true;\n        prop.break = br;\n        break;\n      }\n\n      if (prevBreak && methods.isBetweenBreaks(pos, br, prevBreak, start, end)) {\n        prop = {\n          length: methods.getLength(prevBreak, lastBreak),\n          breaksSize: methods.getBreaksSize(prevBreak, lastBreak),\n          inBreak: false\n        };\n        break;\n      }\n    }\n\n    return prop;\n  },\n  isInverted: function () {\n    return !(this._options.isHorizontal ^ this._businessRange.invert);\n  },\n  _getDiscreteInterval: function (categoriesLength, canvasOptions) {\n    var correctedCategoriesCount = categoriesLength - (this._options.stick ? 1 : 0);\n    return correctedCategoriesCount > 0 ? canvasOptions.canvasLength / correctedCategoriesCount : canvasOptions.canvasLength;\n  },\n  _prepareCanvasOptions: function () {\n    var that = this;\n    var businessRange = that._businessRange;\n    var canvasOptions = that._canvasOptions = getCanvasBounds(businessRange);\n    var canvas = that._canvas;\n    var breaks = that._breaks;\n    var length;\n    canvasOptions.startPadding = canvas.startPadding || 0;\n    canvasOptions.endPadding = canvas.endPadding || 0;\n\n    if (that._options.isHorizontal) {\n      canvasOptions.startPoint = canvas.left + canvasOptions.startPadding;\n      length = canvas.width;\n      canvasOptions.endPoint = canvas.width - canvas.right - canvasOptions.endPadding;\n      canvasOptions.invert = businessRange.invert;\n    } else {\n      canvasOptions.startPoint = canvas.top + canvasOptions.startPadding;\n      length = canvas.height;\n      canvasOptions.endPoint = canvas.height - canvas.bottom - canvasOptions.endPadding;\n      canvasOptions.invert = !businessRange.invert;\n    }\n\n    that.canvasLength = canvasOptions.canvasLength = canvasOptions.endPoint - canvasOptions.startPoint;\n    canvasOptions.rangeDoubleError = Math.pow(10, (0, _utils.getPower)(canvasOptions.rangeMax - canvasOptions.rangeMin) - (0, _utils.getPower)(length) - 2);\n    canvasOptions.ratioOfCanvasRange = canvasOptions.canvasLength / (canvasOptions.rangeMaxVisible - canvasOptions.rangeMinVisible);\n\n    if (void 0 !== breaks) {\n      canvasOptions.ratioOfCanvasRange = (canvasOptions.canvasLength - breaks[breaks.length - 1].cumulativeWidth) / (canvasOptions.rangeMaxVisible - canvasOptions.rangeMinVisible - breaks[breaks.length - 1].length);\n    }\n\n    return canvasOptions;\n  },\n  updateCanvas: function (canvas) {\n    this._canvas = validateCanvas(canvas);\n    this.reinit();\n  },\n  updateBusinessRange: function (businessRange) {\n    var that = this;\n    var breaks = businessRange.breaks || [];\n    that._userBreaks = businessRange.userBreaks || [];\n    that._businessRange = validateBusinessRange(businessRange);\n    that._breaks = breaks.length ? prepareBreaks(breaks, that._businessRange) : void 0;\n    that.reinit();\n  },\n  update: function (businessRange, canvas, options) {\n    var that = this;\n    that._options = (0, _extend.extend)(that._options || {}, options);\n    that._canvas = validateCanvas(canvas);\n    that.updateBusinessRange(businessRange);\n  },\n  getBusinessRange: function () {\n    return this._businessRange;\n  },\n  getEventScale: function (zoomEvent) {\n    return zoomEvent.deltaScale || 1;\n  },\n  getCanvasVisibleArea: function () {\n    return {\n      min: this._canvasOptions.startPoint,\n      max: this._canvasOptions.endPoint\n    };\n  },\n  _calculateSpecialValues: function () {\n    var that = this;\n    var canvasOptions = that._canvasOptions;\n    var startPoint = canvasOptions.startPoint - canvasOptions.startPadding;\n    var endPoint = canvasOptions.endPoint + canvasOptions.endPadding;\n    var range = that._businessRange;\n    var minVisible = range.minVisible;\n    var maxVisible = range.maxVisible;\n    var canvas_position_center_middle = startPoint + canvasOptions.canvasLength / 2;\n    var canvas_position_default;\n\n    if (minVisible < 0 && maxVisible > 0 && minVisible !== maxVisible) {\n      canvas_position_default = that.translate(0, 1);\n    }\n\n    if (!(0, _type.isDefined)(canvas_position_default)) {\n      var invert = range.invert ^ (minVisible < 0 && maxVisible <= 0);\n\n      if (that._options.isHorizontal) {\n        canvas_position_default = invert ? endPoint : startPoint;\n      } else {\n        canvas_position_default = invert ? startPoint : endPoint;\n      }\n    }\n\n    that.sc = {\n      canvas_position_default: canvas_position_default,\n      canvas_position_left: startPoint,\n      canvas_position_top: startPoint,\n      canvas_position_center: canvas_position_center_middle,\n      canvas_position_middle: canvas_position_center_middle,\n      canvas_position_right: endPoint,\n      canvas_position_bottom: endPoint,\n      canvas_position_start: canvasOptions.invert ? endPoint : startPoint,\n      canvas_position_end: canvasOptions.invert ? startPoint : endPoint\n    };\n  },\n  translateSpecialCase: function (value) {\n    return this.sc[value];\n  },\n  _calculateProjection: function (distance) {\n    var canvasOptions = this._canvasOptions;\n    return canvasOptions.invert ? canvasOptions.endPoint - distance : canvasOptions.startPoint + distance;\n  },\n  _calculateUnProjection: function (distance) {\n    var canvasOptions = this._canvasOptions;\n    \"datetime\" === this._businessRange.dataType && (distance = Math.round(distance));\n    return canvasOptions.invert ? canvasOptions.rangeMaxVisible.valueOf() - distance : canvasOptions.rangeMinVisible.valueOf() + distance;\n  },\n  getMinBarSize: function (minBarSize) {\n    var visibleArea = this.getCanvasVisibleArea();\n    var minValue = this.from(visibleArea.min + minBarSize);\n    return _abs(this.from(visibleArea.min) - (!(0, _type.isDefined)(minValue) ? this.from(visibleArea.max) : minValue));\n  },\n  checkMinBarSize: function (value, minShownValue, stackValue) {\n    return _abs(value) < minShownValue ? value >= 0 ? minShownValue : -minShownValue : value;\n  },\n  translate: function (bp, direction) {\n    var specialValue = this.translateSpecialCase(bp);\n\n    if ((0, _type.isDefined)(specialValue)) {\n      return Math.round(specialValue);\n    }\n\n    if (isNaN(bp)) {\n      return null;\n    }\n\n    return this.to(bp, direction);\n  },\n  getInterval: function (interval) {\n    var _interval;\n\n    var canvasOptions = this._canvasOptions;\n    interval = null !== (_interval = interval) && void 0 !== _interval ? _interval : this._businessRange.interval;\n\n    if (interval) {\n      return Math.round(canvasOptions.ratioOfCanvasRange * interval);\n    }\n\n    return Math.round(canvasOptions.endPoint - canvasOptions.startPoint);\n  },\n  zoom: function (translate, scale, wholeRange) {\n    var canvasOptions = this._canvasOptions;\n\n    if (canvasOptions.rangeMinVisible.valueOf() === canvasOptions.rangeMaxVisible.valueOf() && 0 !== translate) {\n      return this.zoomZeroLengthRange(translate, scale);\n    }\n\n    var startPoint = canvasOptions.startPoint;\n    var endPoint = canvasOptions.endPoint;\n    var isInverted = this.isInverted();\n    var newStart = (startPoint + translate) / scale;\n    var newEnd = (endPoint + translate) / scale;\n    wholeRange = wholeRange || {};\n    var minPoint = this.to(isInverted ? wholeRange.endValue : wholeRange.startValue);\n    var maxPoint = this.to(isInverted ? wholeRange.startValue : wholeRange.endValue);\n    var min;\n    var max;\n\n    if (minPoint > newStart) {\n      newEnd -= newStart - minPoint;\n      newStart = minPoint;\n      min = isInverted ? wholeRange.endValue : wholeRange.startValue;\n    }\n\n    if (maxPoint < newEnd) {\n      newStart -= newEnd - maxPoint;\n      newEnd = maxPoint;\n      max = isInverted ? wholeRange.startValue : wholeRange.endValue;\n    }\n\n    if (maxPoint - minPoint < newEnd - newStart) {\n      newStart = minPoint;\n      newEnd = maxPoint;\n    }\n\n    translate = (endPoint - startPoint) * newStart / (newEnd - newStart) - startPoint;\n    scale = (startPoint + translate) / newStart || 1;\n    min = (0, _type.isDefined)(min) ? min : (0, _math.adjust)(this.from(newStart, 1));\n    max = (0, _type.isDefined)(max) ? max : (0, _math.adjust)(this.from(newEnd, -1));\n\n    if (scale <= 1) {\n      min = this._correctValueAboutBreaks(min, 1 === scale ? translate : -1);\n      max = this._correctValueAboutBreaks(max, 1 === scale ? translate : 1);\n    }\n\n    if (min > max) {\n      min = min > wholeRange.endValue ? wholeRange.endValue : min;\n      max = max < wholeRange.startValue ? wholeRange.startValue : max;\n    } else {\n      min = min < wholeRange.startValue ? wholeRange.startValue : min;\n      max = max > wholeRange.endValue ? wholeRange.endValue : max;\n    }\n\n    return {\n      min: min,\n      max: max,\n      translate: (0, _math.adjust)(translate),\n      scale: (0, _math.adjust)(scale)\n    };\n  },\n  _correctValueAboutBreaks: function (value, direction) {\n    var br = this._userBreaks.filter(function (br) {\n      return value >= br.from && value <= br.to;\n    });\n\n    if (br.length) {\n      return direction > 0 ? br[0].to : br[0].from;\n    } else {\n      return value;\n    }\n  },\n  zoomZeroLengthRange: function (translate, scale) {\n    var canvasOptions = this._canvasOptions;\n    var min = canvasOptions.rangeMin;\n    var max = canvasOptions.rangeMax;\n    var correction = (max.valueOf() !== min.valueOf() ? max.valueOf() - min.valueOf() : _abs(canvasOptions.rangeMinVisible.valueOf() - min.valueOf())) / canvasOptions.canvasLength;\n    var isDateTime = (0, _type.isDate)(max) || (0, _type.isDate)(min);\n    var isLogarithmic = \"logarithmic\" === this._businessRange.axisType;\n    var newMin = canvasOptions.rangeMinVisible.valueOf() - correction;\n    var newMax = canvasOptions.rangeMaxVisible.valueOf() + correction;\n    newMin = isLogarithmic ? (0, _math.adjust)((0, _utils.raiseToExt)(newMin, canvasOptions.base)) : isDateTime ? new Date(newMin) : newMin;\n    newMax = isLogarithmic ? (0, _math.adjust)((0, _utils.raiseToExt)(newMax, canvasOptions.base)) : isDateTime ? new Date(newMax) : newMax;\n    return {\n      min: newMin,\n      max: newMax,\n      translate: translate,\n      scale: scale\n    };\n  },\n  getMinScale: function (zoom) {\n    var _this$_businessRange = this._businessRange,\n        dataType = _this$_businessRange.dataType,\n        interval = _this$_businessRange.interval;\n\n    if (\"datetime\" === dataType && 1 === interval) {\n      return this.getDateTimeMinScale(zoom);\n    }\n\n    return zoom ? 1.1 : .9;\n  },\n  getDateTimeMinScale: function (zoom) {\n    var canvasOptions = this._canvasOptions;\n    var length = canvasOptions.canvasLength / canvasOptions.ratioOfCanvasRange;\n    length += (parseInt(.1 * length) || 1) * (zoom ? -2 : 2);\n    return canvasOptions.canvasLength / (Math.max(length, 1) * canvasOptions.ratioOfCanvasRange);\n  },\n  getScale: function (val1, val2) {\n    var canvasOptions = this._canvasOptions;\n\n    if (canvasOptions.rangeMax === canvasOptions.rangeMin) {\n      return 1;\n    }\n\n    val1 = (0, _type.isDefined)(val1) ? this._fromValue(val1) : canvasOptions.rangeMin;\n    val2 = (0, _type.isDefined)(val2) ? this._fromValue(val2) : canvasOptions.rangeMax;\n    return (canvasOptions.rangeMax - canvasOptions.rangeMin) / Math.abs(val1 - val2);\n  },\n  isValid: function (value) {\n    var co = this._canvasOptions;\n    value = this._fromValue(value);\n    return null !== value && !isNaN(value) && value.valueOf() + co.rangeDoubleError >= co.rangeMin && value.valueOf() - co.rangeDoubleError <= co.rangeMax;\n  },\n  getCorrectValue: function (value, direction) {\n    var that = this;\n    var breaks = that._breaks;\n    var prop;\n    value = that._fromValue(value);\n\n    if (that._breaks) {\n      prop = that._checkValueAboutBreaks(breaks, value, \"trFrom\", \"trTo\", that._checkingMethodsAboutBreaks[0]);\n\n      if (true === prop.inBreak) {\n        return that._toValue(direction > 0 ? prop.break.trTo : prop.break.trFrom);\n      }\n    }\n\n    return that._toValue(value);\n  },\n  to: function (bp, direction) {\n    var range = this.getBusinessRange();\n\n    if ((0, _type.isDefined)(range.maxVisible) && (0, _type.isDefined)(range.minVisible) && range.maxVisible.valueOf() === range.minVisible.valueOf()) {\n      if (!(0, _type.isDefined)(bp) || range.maxVisible.valueOf() !== bp.valueOf()) {\n        return null;\n      }\n\n      return this.translateSpecialCase(0 === bp && this._options.shiftZeroValue ? \"canvas_position_default\" : \"canvas_position_middle\");\n    }\n\n    bp = this._fromValue(bp);\n    var that = this;\n    var canvasOptions = that._canvasOptions;\n    var breaks = that._breaks;\n    var prop = {\n      length: 0\n    };\n    var commonBreakSize = 0;\n\n    if (void 0 !== breaks) {\n      prop = that._checkValueAboutBreaks(breaks, bp, \"trFrom\", \"trTo\", that._checkingMethodsAboutBreaks[0]);\n      commonBreakSize = (0, _type.isDefined)(prop.breaksSize) ? prop.breaksSize : 0;\n    }\n\n    if (true === prop.inBreak) {\n      if (direction > 0) {\n        return prop.break.start;\n      } else {\n        if (direction < 0) {\n          return prop.break.end;\n        } else {\n          return null;\n        }\n      }\n    }\n\n    return that._conversionValue(that._calculateProjection((bp - canvasOptions.rangeMinVisible - prop.length) * canvasOptions.ratioOfCanvasRange + commonBreakSize));\n  },\n  from: function (pos, direction) {\n    var that = this;\n    var breaks = that._breaks;\n    var prop = {\n      length: 0\n    };\n    var canvasOptions = that._canvasOptions;\n    var startPoint = canvasOptions.startPoint;\n    var commonBreakSize = 0;\n\n    if (void 0 !== breaks) {\n      prop = that._checkValueAboutBreaks(breaks, pos, \"start\", \"end\", that._checkingMethodsAboutBreaks[1]);\n      commonBreakSize = (0, _type.isDefined)(prop.breaksSize) ? prop.breaksSize : 0;\n    }\n\n    if (true === prop.inBreak) {\n      if (direction > 0) {\n        return that._toValue(prop.break.trTo);\n      } else {\n        if (direction < 0) {\n          return that._toValue(prop.break.trFrom);\n        } else {\n          return null;\n        }\n      }\n    }\n\n    return that._toValue(that._calculateUnProjection((pos - startPoint - commonBreakSize) / canvasOptions.ratioOfCanvasRange + prop.length));\n  },\n  isValueProlonged: false,\n  getRange: function () {\n    return [this._toValue(this._canvasOptions.rangeMin), this._toValue(this._canvasOptions.rangeMax)];\n  },\n  getScreenRange: function () {\n    return [this._canvasOptions.startPoint, this._canvasOptions.endPoint];\n  },\n  add: function (value, diff, dir) {\n    return this._add(value, diff, (this._businessRange.invert ? -1 : 1) * dir);\n  },\n  _add: function (value, diff, coeff) {\n    return this._toValue(this._fromValue(value) + diff * coeff);\n  },\n  _fromValue: function (value) {\n    return null !== value ? Number(value) : null;\n  },\n  _toValue: function (value) {\n    return null !== value ? Number(value) : null;\n  },\n  ratioOfCanvasRange: function () {\n    return this._canvasOptions.ratioOfCanvasRange;\n  }\n};","map":{"version":3,"sources":["E:/Monday.com/quickstart-react/node_modules/devextreme/viz/translators/translator2d.js"],"names":["exports","Translator2D","_extend","require","_iterator","_range","_category_translator","_interopRequireDefault","_interval_translator","_datetime_translator","_logarithmic_translator","_utils","_type","_math","_date","obj","__esModule","_abs","Math","abs","CANVAS_PROP","dummyTranslator","to","value","coord","_canvasOptions","startPoint","_options","conversionValue","round","endPoint","from","validateCanvas","canvas","each","_","prop","parseInt","makeCategoriesToPoints","categories","categoriesToPoints","forEach","item","i","valueOf","validateBusinessRange","businessRange","Range","validate","valueSelector","baseValueSelector","isDefined","prepareBreaks","breaks","range","transform","axisType","getLogExt","base","array","br","transformFrom","transformTo","length","sum","push","trFrom","trTo","cumulativeWidth","getCanvasBounds","min","max","minVisible","maxVisible","isLogarithmic","allowNegatives","linearThreshold","rangeMin","rangeMax","rangeMinVisible","rangeMaxVisible","getCheckingMethodsAboutBreaks","inverted","isStartSide","pos","start","end","isEndSide","isInBreak","isBetweenBreaks","prevBreak","getLength","lastBreak","getBreaksSize","_Translator2d","options","update","prototype","constructor","reinit","that","_businessRange","script","canvasOptions","_prepareCanvasOptions","visibleCategories","getCategoriesInfo","categoriesLength","isEmpty","default","ratioOfCanvasRange","canvasLength","addInterval","interval","_categories","_getDiscreteInterval","addSpiderCategory","_categoriesToPoints","invert","startPointIndex","dataType","_oldMethods","methodName","Object","keys","extend","_conversionValue","sc","_checkingMethodsAboutBreaks","isInverted","_translateBreaks","_calculateSpecialValues","_breaks","size","breaksSize","b","translate","gapSize","_checkValueAboutBreaks","methods","inBreak","break","isHorizontal","correctedCategoriesCount","stick","_canvas","startPadding","endPadding","left","width","right","top","height","bottom","rangeDoubleError","pow","getPower","updateCanvas","updateBusinessRange","_userBreaks","userBreaks","getBusinessRange","getEventScale","zoomEvent","deltaScale","getCanvasVisibleArea","canvas_position_center_middle","canvas_position_default","canvas_position_left","canvas_position_top","canvas_position_center","canvas_position_middle","canvas_position_right","canvas_position_bottom","canvas_position_start","canvas_position_end","translateSpecialCase","_calculateProjection","distance","_calculateUnProjection","getMinBarSize","minBarSize","visibleArea","minValue","checkMinBarSize","minShownValue","stackValue","bp","direction","specialValue","isNaN","getInterval","_interval","zoom","scale","wholeRange","zoomZeroLengthRange","newStart","newEnd","minPoint","endValue","startValue","maxPoint","adjust","_correctValueAboutBreaks","filter","correction","isDateTime","isDate","newMin","newMax","raiseToExt","Date","getMinScale","_this$_businessRange","getDateTimeMinScale","getScale","val1","val2","_fromValue","isValid","co","getCorrectValue","_toValue","shiftZeroValue","commonBreakSize","isValueProlonged","getRange","getScreenRange","add","diff","dir","_add","coeff","Number"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (viz/translators/translator2d.js)\r\n * Version: 20.2.3\r\n * Build date: Tue Oct 20 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.Translator2D = void 0;\r\nvar _extend = require(\"../../core/utils/extend\");\r\nvar _iterator = require(\"../../core/utils/iterator\");\r\nvar _range = require(\"./range\");\r\nvar _category_translator = _interopRequireDefault(require(\"./category_translator\"));\r\nvar _interval_translator = _interopRequireDefault(require(\"./interval_translator\"));\r\nvar _datetime_translator = _interopRequireDefault(require(\"./datetime_translator\"));\r\nvar _logarithmic_translator = _interopRequireDefault(require(\"./logarithmic_translator\"));\r\nvar _utils = require(\"../core/utils\");\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _math = require(\"../../core/utils/math\");\r\nvar _date = _interopRequireDefault(require(\"../../core/utils/date\"));\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar _abs = Math.abs;\r\nvar CANVAS_PROP = [\"width\", \"height\", \"left\", \"top\", \"bottom\", \"right\"];\r\nvar dummyTranslator = {\r\n    to: function(value) {\r\n        var coord = this._canvasOptions.startPoint + (this._options.conversionValue ? value : Math.round(value));\r\n        return coord > this._canvasOptions.endPoint ? this._canvasOptions.endPoint : coord\r\n    },\r\n    from: function(value) {\r\n        return value - this._canvasOptions.startPoint\r\n    }\r\n};\r\nvar validateCanvas = function(canvas) {\r\n    (0, _iterator.each)(CANVAS_PROP, function(_, prop) {\r\n        canvas[prop] = parseInt(canvas[prop]) || 0\r\n    });\r\n    return canvas\r\n};\r\nvar makeCategoriesToPoints = function(categories) {\r\n    var categoriesToPoints = {};\r\n    categories.forEach(function(item, i) {\r\n        categoriesToPoints[item.valueOf()] = i\r\n    });\r\n    return categoriesToPoints\r\n};\r\nvar validateBusinessRange = function(businessRange) {\r\n    if (!(businessRange instanceof _range.Range)) {\r\n        businessRange = new _range.Range(businessRange)\r\n    }\r\n\r\n    function validate(valueSelector, baseValueSelector) {\r\n        if (!(0, _type.isDefined)(businessRange[valueSelector]) && (0, _type.isDefined)(businessRange[baseValueSelector])) {\r\n            businessRange[valueSelector] = businessRange[baseValueSelector]\r\n        }\r\n    }\r\n    validate(\"minVisible\", \"min\");\r\n    validate(\"maxVisible\", \"max\");\r\n    return businessRange\r\n};\r\n\r\nfunction prepareBreaks(breaks, range) {\r\n    var transform = \"logarithmic\" === range.axisType ? function(value) {\r\n        return (0, _utils.getLogExt)(value, range.base)\r\n    } : function(value) {\r\n        return value\r\n    };\r\n    var array = [];\r\n    var br;\r\n    var transformFrom;\r\n    var transformTo;\r\n    var i;\r\n    var length = breaks.length;\r\n    var sum = 0;\r\n    for (i = 0; i < length; i++) {\r\n        br = breaks[i];\r\n        transformFrom = transform(br.from);\r\n        transformTo = transform(br.to);\r\n        sum += transformTo - transformFrom;\r\n        array.push({\r\n            trFrom: transformFrom,\r\n            trTo: transformTo,\r\n            from: br.from,\r\n            to: br.to,\r\n            length: sum,\r\n            cumulativeWidth: br.cumulativeWidth\r\n        })\r\n    }\r\n    return array\r\n}\r\n\r\nfunction getCanvasBounds(range) {\r\n    var min = range.min;\r\n    var max = range.max;\r\n    var minVisible = range.minVisible;\r\n    var maxVisible = range.maxVisible;\r\n    var isLogarithmic = \"logarithmic\" === range.axisType;\r\n    if (isLogarithmic) {\r\n        maxVisible = (0, _utils.getLogExt)(maxVisible, range.base, range.allowNegatives, range.linearThreshold);\r\n        minVisible = (0, _utils.getLogExt)(minVisible, range.base, range.allowNegatives, range.linearThreshold);\r\n        min = (0, _utils.getLogExt)(min, range.base, range.allowNegatives, range.linearThreshold);\r\n        max = (0, _utils.getLogExt)(max, range.base, range.allowNegatives, range.linearThreshold)\r\n    }\r\n    return {\r\n        base: range.base,\r\n        rangeMin: min,\r\n        rangeMax: max,\r\n        rangeMinVisible: minVisible,\r\n        rangeMaxVisible: maxVisible\r\n    }\r\n}\r\n\r\nfunction getCheckingMethodsAboutBreaks(inverted) {\r\n    return {\r\n        isStartSide: !inverted ? function(pos, breaks, start, end) {\r\n            return pos < breaks[0][start]\r\n        } : function(pos, breaks, start, end) {\r\n            return pos <= breaks[breaks.length - 1][end]\r\n        },\r\n        isEndSide: !inverted ? function(pos, breaks, start, end) {\r\n            return pos >= breaks[breaks.length - 1][end]\r\n        } : function(pos, breaks, start, end) {\r\n            return pos > breaks[0][start]\r\n        },\r\n        isInBreak: !inverted ? function(pos, br, start, end) {\r\n            return pos >= br[start] && pos < br[end]\r\n        } : function(pos, br, start, end) {\r\n            return pos > br[end] && pos <= br[start]\r\n        },\r\n        isBetweenBreaks: !inverted ? function(pos, br, prevBreak, start, end) {\r\n            return pos < br[start] && pos >= prevBreak[end]\r\n        } : function(pos, br, prevBreak, start, end) {\r\n            return pos >= br[end] && pos < prevBreak[start]\r\n        },\r\n        getLength: !inverted ? function(br) {\r\n            return br.length\r\n        } : function(br, lastBreak) {\r\n            return lastBreak.length - br.length\r\n        },\r\n        getBreaksSize: !inverted ? function(br) {\r\n            return br.cumulativeWidth\r\n        } : function(br, lastBreak) {\r\n            return lastBreak.cumulativeWidth - br.cumulativeWidth\r\n        }\r\n    }\r\n}\r\nvar _Translator2d = function(businessRange, canvas, options) {\r\n    this.update(businessRange, canvas, options)\r\n};\r\nexports.Translator2D = _Translator2d;\r\n_Translator2d.prototype = {\r\n    constructor: _Translator2d,\r\n    reinit: function() {\r\n        var that = this;\r\n        var options = that._options;\r\n        var range = that._businessRange;\r\n        var categories = range.categories || [];\r\n        var script = {};\r\n        var canvasOptions = that._prepareCanvasOptions();\r\n        var visibleCategories = (0, _utils.getCategoriesInfo)(categories, range.minVisible, range.maxVisible).categories;\r\n        var categoriesLength = visibleCategories.length;\r\n        if (range.isEmpty()) {\r\n            script = dummyTranslator\r\n        } else {\r\n            switch (range.axisType) {\r\n                case \"logarithmic\":\r\n                    script = _logarithmic_translator.default;\r\n                    break;\r\n                case \"semidiscrete\":\r\n                    script = _interval_translator.default;\r\n                    canvasOptions.ratioOfCanvasRange = canvasOptions.canvasLength / (_date.default.addInterval(canvasOptions.rangeMaxVisible, options.interval) - canvasOptions.rangeMinVisible);\r\n                    break;\r\n                case \"discrete\":\r\n                    script = _category_translator.default;\r\n                    that._categories = categories;\r\n                    canvasOptions.interval = that._getDiscreteInterval(options.addSpiderCategory ? categoriesLength + 1 : categoriesLength, canvasOptions);\r\n                    that._categoriesToPoints = makeCategoriesToPoints(categories, canvasOptions.invert);\r\n                    if (categoriesLength) {\r\n                        canvasOptions.startPointIndex = that._categoriesToPoints[visibleCategories[0].valueOf()];\r\n                        that.visibleCategories = visibleCategories\r\n                    }\r\n                    break;\r\n                default:\r\n                    if (\"datetime\" === range.dataType) {\r\n                        script = _datetime_translator.default\r\n                    }\r\n            }\r\n        }(that._oldMethods || []).forEach(function(methodName) {\r\n            delete that[methodName]\r\n        });\r\n        that._oldMethods = Object.keys(script);\r\n        (0, _extend.extend)(that, script);\r\n        that._conversionValue = options.conversionValue ? function(value) {\r\n            return value\r\n        } : function(value) {\r\n            return Math.round(value)\r\n        };\r\n        that.sc = {};\r\n        that._checkingMethodsAboutBreaks = [getCheckingMethodsAboutBreaks(false), getCheckingMethodsAboutBreaks(that.isInverted())];\r\n        that._translateBreaks();\r\n        that._calculateSpecialValues()\r\n    },\r\n    _translateBreaks: function() {\r\n        var breaks = this._breaks;\r\n        var size = this._options.breaksSize;\r\n        var i;\r\n        var b;\r\n        var end;\r\n        var length;\r\n        if (void 0 === breaks) {\r\n            return\r\n        }\r\n        for (i = 0, length = breaks.length; i < length; i++) {\r\n            b = breaks[i];\r\n            end = this.translate(b.to);\r\n            b.end = end;\r\n            b.start = !b.gapSize ? !this.isInverted() ? end - size : end + size : end\r\n        }\r\n    },\r\n    _checkValueAboutBreaks: function(breaks, pos, start, end, methods) {\r\n        var i;\r\n        var length;\r\n        var prop = {\r\n            length: 0,\r\n            breaksSize: void 0,\r\n            inBreak: false\r\n        };\r\n        var br;\r\n        var prevBreak;\r\n        var lastBreak = breaks[breaks.length - 1];\r\n        if (methods.isStartSide(pos, breaks, start, end)) {\r\n            return prop\r\n        } else {\r\n            if (methods.isEndSide(pos, breaks, start, end)) {\r\n                return {\r\n                    length: lastBreak.length,\r\n                    breaksSize: lastBreak.cumulativeWidth,\r\n                    inBreak: false\r\n                }\r\n            }\r\n        }\r\n        for (i = 0, length = breaks.length; i < length; i++) {\r\n            br = breaks[i];\r\n            prevBreak = breaks[i - 1];\r\n            if (methods.isInBreak(pos, br, start, end)) {\r\n                prop.inBreak = true;\r\n                prop.break = br;\r\n                break\r\n            }\r\n            if (prevBreak && methods.isBetweenBreaks(pos, br, prevBreak, start, end)) {\r\n                prop = {\r\n                    length: methods.getLength(prevBreak, lastBreak),\r\n                    breaksSize: methods.getBreaksSize(prevBreak, lastBreak),\r\n                    inBreak: false\r\n                };\r\n                break\r\n            }\r\n        }\r\n        return prop\r\n    },\r\n    isInverted: function() {\r\n        return !(this._options.isHorizontal ^ this._businessRange.invert)\r\n    },\r\n    _getDiscreteInterval: function(categoriesLength, canvasOptions) {\r\n        var correctedCategoriesCount = categoriesLength - (this._options.stick ? 1 : 0);\r\n        return correctedCategoriesCount > 0 ? canvasOptions.canvasLength / correctedCategoriesCount : canvasOptions.canvasLength\r\n    },\r\n    _prepareCanvasOptions: function() {\r\n        var that = this;\r\n        var businessRange = that._businessRange;\r\n        var canvasOptions = that._canvasOptions = getCanvasBounds(businessRange);\r\n        var canvas = that._canvas;\r\n        var breaks = that._breaks;\r\n        var length;\r\n        canvasOptions.startPadding = canvas.startPadding || 0;\r\n        canvasOptions.endPadding = canvas.endPadding || 0;\r\n        if (that._options.isHorizontal) {\r\n            canvasOptions.startPoint = canvas.left + canvasOptions.startPadding;\r\n            length = canvas.width;\r\n            canvasOptions.endPoint = canvas.width - canvas.right - canvasOptions.endPadding;\r\n            canvasOptions.invert = businessRange.invert\r\n        } else {\r\n            canvasOptions.startPoint = canvas.top + canvasOptions.startPadding;\r\n            length = canvas.height;\r\n            canvasOptions.endPoint = canvas.height - canvas.bottom - canvasOptions.endPadding;\r\n            canvasOptions.invert = !businessRange.invert\r\n        }\r\n        that.canvasLength = canvasOptions.canvasLength = canvasOptions.endPoint - canvasOptions.startPoint;\r\n        canvasOptions.rangeDoubleError = Math.pow(10, (0, _utils.getPower)(canvasOptions.rangeMax - canvasOptions.rangeMin) - (0, _utils.getPower)(length) - 2);\r\n        canvasOptions.ratioOfCanvasRange = canvasOptions.canvasLength / (canvasOptions.rangeMaxVisible - canvasOptions.rangeMinVisible);\r\n        if (void 0 !== breaks) {\r\n            canvasOptions.ratioOfCanvasRange = (canvasOptions.canvasLength - breaks[breaks.length - 1].cumulativeWidth) / (canvasOptions.rangeMaxVisible - canvasOptions.rangeMinVisible - breaks[breaks.length - 1].length)\r\n        }\r\n        return canvasOptions\r\n    },\r\n    updateCanvas: function(canvas) {\r\n        this._canvas = validateCanvas(canvas);\r\n        this.reinit()\r\n    },\r\n    updateBusinessRange: function(businessRange) {\r\n        var that = this;\r\n        var breaks = businessRange.breaks || [];\r\n        that._userBreaks = businessRange.userBreaks || [];\r\n        that._businessRange = validateBusinessRange(businessRange);\r\n        that._breaks = breaks.length ? prepareBreaks(breaks, that._businessRange) : void 0;\r\n        that.reinit()\r\n    },\r\n    update: function(businessRange, canvas, options) {\r\n        var that = this;\r\n        that._options = (0, _extend.extend)(that._options || {}, options);\r\n        that._canvas = validateCanvas(canvas);\r\n        that.updateBusinessRange(businessRange)\r\n    },\r\n    getBusinessRange: function() {\r\n        return this._businessRange\r\n    },\r\n    getEventScale: function(zoomEvent) {\r\n        return zoomEvent.deltaScale || 1\r\n    },\r\n    getCanvasVisibleArea: function() {\r\n        return {\r\n            min: this._canvasOptions.startPoint,\r\n            max: this._canvasOptions.endPoint\r\n        }\r\n    },\r\n    _calculateSpecialValues: function() {\r\n        var that = this;\r\n        var canvasOptions = that._canvasOptions;\r\n        var startPoint = canvasOptions.startPoint - canvasOptions.startPadding;\r\n        var endPoint = canvasOptions.endPoint + canvasOptions.endPadding;\r\n        var range = that._businessRange;\r\n        var minVisible = range.minVisible;\r\n        var maxVisible = range.maxVisible;\r\n        var canvas_position_center_middle = startPoint + canvasOptions.canvasLength / 2;\r\n        var canvas_position_default;\r\n        if (minVisible < 0 && maxVisible > 0 && minVisible !== maxVisible) {\r\n            canvas_position_default = that.translate(0, 1)\r\n        }\r\n        if (!(0, _type.isDefined)(canvas_position_default)) {\r\n            var invert = range.invert ^ (minVisible < 0 && maxVisible <= 0);\r\n            if (that._options.isHorizontal) {\r\n                canvas_position_default = invert ? endPoint : startPoint\r\n            } else {\r\n                canvas_position_default = invert ? startPoint : endPoint\r\n            }\r\n        }\r\n        that.sc = {\r\n            canvas_position_default: canvas_position_default,\r\n            canvas_position_left: startPoint,\r\n            canvas_position_top: startPoint,\r\n            canvas_position_center: canvas_position_center_middle,\r\n            canvas_position_middle: canvas_position_center_middle,\r\n            canvas_position_right: endPoint,\r\n            canvas_position_bottom: endPoint,\r\n            canvas_position_start: canvasOptions.invert ? endPoint : startPoint,\r\n            canvas_position_end: canvasOptions.invert ? startPoint : endPoint\r\n        }\r\n    },\r\n    translateSpecialCase: function(value) {\r\n        return this.sc[value]\r\n    },\r\n    _calculateProjection: function(distance) {\r\n        var canvasOptions = this._canvasOptions;\r\n        return canvasOptions.invert ? canvasOptions.endPoint - distance : canvasOptions.startPoint + distance\r\n    },\r\n    _calculateUnProjection: function(distance) {\r\n        var canvasOptions = this._canvasOptions;\r\n        \"datetime\" === this._businessRange.dataType && (distance = Math.round(distance));\r\n        return canvasOptions.invert ? canvasOptions.rangeMaxVisible.valueOf() - distance : canvasOptions.rangeMinVisible.valueOf() + distance\r\n    },\r\n    getMinBarSize: function(minBarSize) {\r\n        var visibleArea = this.getCanvasVisibleArea();\r\n        var minValue = this.from(visibleArea.min + minBarSize);\r\n        return _abs(this.from(visibleArea.min) - (!(0, _type.isDefined)(minValue) ? this.from(visibleArea.max) : minValue))\r\n    },\r\n    checkMinBarSize: function(value, minShownValue, stackValue) {\r\n        return _abs(value) < minShownValue ? value >= 0 ? minShownValue : -minShownValue : value\r\n    },\r\n    translate: function(bp, direction) {\r\n        var specialValue = this.translateSpecialCase(bp);\r\n        if ((0, _type.isDefined)(specialValue)) {\r\n            return Math.round(specialValue)\r\n        }\r\n        if (isNaN(bp)) {\r\n            return null\r\n        }\r\n        return this.to(bp, direction)\r\n    },\r\n    getInterval: function(interval) {\r\n        var _interval;\r\n        var canvasOptions = this._canvasOptions;\r\n        interval = null !== (_interval = interval) && void 0 !== _interval ? _interval : this._businessRange.interval;\r\n        if (interval) {\r\n            return Math.round(canvasOptions.ratioOfCanvasRange * interval)\r\n        }\r\n        return Math.round(canvasOptions.endPoint - canvasOptions.startPoint)\r\n    },\r\n    zoom: function(translate, scale, wholeRange) {\r\n        var canvasOptions = this._canvasOptions;\r\n        if (canvasOptions.rangeMinVisible.valueOf() === canvasOptions.rangeMaxVisible.valueOf() && 0 !== translate) {\r\n            return this.zoomZeroLengthRange(translate, scale)\r\n        }\r\n        var startPoint = canvasOptions.startPoint;\r\n        var endPoint = canvasOptions.endPoint;\r\n        var isInverted = this.isInverted();\r\n        var newStart = (startPoint + translate) / scale;\r\n        var newEnd = (endPoint + translate) / scale;\r\n        wholeRange = wholeRange || {};\r\n        var minPoint = this.to(isInverted ? wholeRange.endValue : wholeRange.startValue);\r\n        var maxPoint = this.to(isInverted ? wholeRange.startValue : wholeRange.endValue);\r\n        var min;\r\n        var max;\r\n        if (minPoint > newStart) {\r\n            newEnd -= newStart - minPoint;\r\n            newStart = minPoint;\r\n            min = isInverted ? wholeRange.endValue : wholeRange.startValue\r\n        }\r\n        if (maxPoint < newEnd) {\r\n            newStart -= newEnd - maxPoint;\r\n            newEnd = maxPoint;\r\n            max = isInverted ? wholeRange.startValue : wholeRange.endValue\r\n        }\r\n        if (maxPoint - minPoint < newEnd - newStart) {\r\n            newStart = minPoint;\r\n            newEnd = maxPoint\r\n        }\r\n        translate = (endPoint - startPoint) * newStart / (newEnd - newStart) - startPoint;\r\n        scale = (startPoint + translate) / newStart || 1;\r\n        min = (0, _type.isDefined)(min) ? min : (0, _math.adjust)(this.from(newStart, 1));\r\n        max = (0, _type.isDefined)(max) ? max : (0, _math.adjust)(this.from(newEnd, -1));\r\n        if (scale <= 1) {\r\n            min = this._correctValueAboutBreaks(min, 1 === scale ? translate : -1);\r\n            max = this._correctValueAboutBreaks(max, 1 === scale ? translate : 1)\r\n        }\r\n        if (min > max) {\r\n            min = min > wholeRange.endValue ? wholeRange.endValue : min;\r\n            max = max < wholeRange.startValue ? wholeRange.startValue : max\r\n        } else {\r\n            min = min < wholeRange.startValue ? wholeRange.startValue : min;\r\n            max = max > wholeRange.endValue ? wholeRange.endValue : max\r\n        }\r\n        return {\r\n            min: min,\r\n            max: max,\r\n            translate: (0, _math.adjust)(translate),\r\n            scale: (0, _math.adjust)(scale)\r\n        }\r\n    },\r\n    _correctValueAboutBreaks: function(value, direction) {\r\n        var br = this._userBreaks.filter(function(br) {\r\n            return value >= br.from && value <= br.to\r\n        });\r\n        if (br.length) {\r\n            return direction > 0 ? br[0].to : br[0].from\r\n        } else {\r\n            return value\r\n        }\r\n    },\r\n    zoomZeroLengthRange: function(translate, scale) {\r\n        var canvasOptions = this._canvasOptions;\r\n        var min = canvasOptions.rangeMin;\r\n        var max = canvasOptions.rangeMax;\r\n        var correction = (max.valueOf() !== min.valueOf() ? max.valueOf() - min.valueOf() : _abs(canvasOptions.rangeMinVisible.valueOf() - min.valueOf())) / canvasOptions.canvasLength;\r\n        var isDateTime = (0, _type.isDate)(max) || (0, _type.isDate)(min);\r\n        var isLogarithmic = \"logarithmic\" === this._businessRange.axisType;\r\n        var newMin = canvasOptions.rangeMinVisible.valueOf() - correction;\r\n        var newMax = canvasOptions.rangeMaxVisible.valueOf() + correction;\r\n        newMin = isLogarithmic ? (0, _math.adjust)((0, _utils.raiseToExt)(newMin, canvasOptions.base)) : isDateTime ? new Date(newMin) : newMin;\r\n        newMax = isLogarithmic ? (0, _math.adjust)((0, _utils.raiseToExt)(newMax, canvasOptions.base)) : isDateTime ? new Date(newMax) : newMax;\r\n        return {\r\n            min: newMin,\r\n            max: newMax,\r\n            translate: translate,\r\n            scale: scale\r\n        }\r\n    },\r\n    getMinScale: function(zoom) {\r\n        var _this$_businessRange = this._businessRange,\r\n            dataType = _this$_businessRange.dataType,\r\n            interval = _this$_businessRange.interval;\r\n        if (\"datetime\" === dataType && 1 === interval) {\r\n            return this.getDateTimeMinScale(zoom)\r\n        }\r\n        return zoom ? 1.1 : .9\r\n    },\r\n    getDateTimeMinScale: function(zoom) {\r\n        var canvasOptions = this._canvasOptions;\r\n        var length = canvasOptions.canvasLength / canvasOptions.ratioOfCanvasRange;\r\n        length += (parseInt(.1 * length) || 1) * (zoom ? -2 : 2);\r\n        return canvasOptions.canvasLength / (Math.max(length, 1) * canvasOptions.ratioOfCanvasRange)\r\n    },\r\n    getScale: function(val1, val2) {\r\n        var canvasOptions = this._canvasOptions;\r\n        if (canvasOptions.rangeMax === canvasOptions.rangeMin) {\r\n            return 1\r\n        }\r\n        val1 = (0, _type.isDefined)(val1) ? this._fromValue(val1) : canvasOptions.rangeMin;\r\n        val2 = (0, _type.isDefined)(val2) ? this._fromValue(val2) : canvasOptions.rangeMax;\r\n        return (canvasOptions.rangeMax - canvasOptions.rangeMin) / Math.abs(val1 - val2)\r\n    },\r\n    isValid: function(value) {\r\n        var co = this._canvasOptions;\r\n        value = this._fromValue(value);\r\n        return null !== value && !isNaN(value) && value.valueOf() + co.rangeDoubleError >= co.rangeMin && value.valueOf() - co.rangeDoubleError <= co.rangeMax\r\n    },\r\n    getCorrectValue: function(value, direction) {\r\n        var that = this;\r\n        var breaks = that._breaks;\r\n        var prop;\r\n        value = that._fromValue(value);\r\n        if (that._breaks) {\r\n            prop = that._checkValueAboutBreaks(breaks, value, \"trFrom\", \"trTo\", that._checkingMethodsAboutBreaks[0]);\r\n            if (true === prop.inBreak) {\r\n                return that._toValue(direction > 0 ? prop.break.trTo : prop.break.trFrom)\r\n            }\r\n        }\r\n        return that._toValue(value)\r\n    },\r\n    to: function(bp, direction) {\r\n        var range = this.getBusinessRange();\r\n        if ((0, _type.isDefined)(range.maxVisible) && (0, _type.isDefined)(range.minVisible) && range.maxVisible.valueOf() === range.minVisible.valueOf()) {\r\n            if (!(0, _type.isDefined)(bp) || range.maxVisible.valueOf() !== bp.valueOf()) {\r\n                return null\r\n            }\r\n            return this.translateSpecialCase(0 === bp && this._options.shiftZeroValue ? \"canvas_position_default\" : \"canvas_position_middle\")\r\n        }\r\n        bp = this._fromValue(bp);\r\n        var that = this;\r\n        var canvasOptions = that._canvasOptions;\r\n        var breaks = that._breaks;\r\n        var prop = {\r\n            length: 0\r\n        };\r\n        var commonBreakSize = 0;\r\n        if (void 0 !== breaks) {\r\n            prop = that._checkValueAboutBreaks(breaks, bp, \"trFrom\", \"trTo\", that._checkingMethodsAboutBreaks[0]);\r\n            commonBreakSize = (0, _type.isDefined)(prop.breaksSize) ? prop.breaksSize : 0\r\n        }\r\n        if (true === prop.inBreak) {\r\n            if (direction > 0) {\r\n                return prop.break.start\r\n            } else {\r\n                if (direction < 0) {\r\n                    return prop.break.end\r\n                } else {\r\n                    return null\r\n                }\r\n            }\r\n        }\r\n        return that._conversionValue(that._calculateProjection((bp - canvasOptions.rangeMinVisible - prop.length) * canvasOptions.ratioOfCanvasRange + commonBreakSize))\r\n    },\r\n    from: function(pos, direction) {\r\n        var that = this;\r\n        var breaks = that._breaks;\r\n        var prop = {\r\n            length: 0\r\n        };\r\n        var canvasOptions = that._canvasOptions;\r\n        var startPoint = canvasOptions.startPoint;\r\n        var commonBreakSize = 0;\r\n        if (void 0 !== breaks) {\r\n            prop = that._checkValueAboutBreaks(breaks, pos, \"start\", \"end\", that._checkingMethodsAboutBreaks[1]);\r\n            commonBreakSize = (0, _type.isDefined)(prop.breaksSize) ? prop.breaksSize : 0\r\n        }\r\n        if (true === prop.inBreak) {\r\n            if (direction > 0) {\r\n                return that._toValue(prop.break.trTo)\r\n            } else {\r\n                if (direction < 0) {\r\n                    return that._toValue(prop.break.trFrom)\r\n                } else {\r\n                    return null\r\n                }\r\n            }\r\n        }\r\n        return that._toValue(that._calculateUnProjection((pos - startPoint - commonBreakSize) / canvasOptions.ratioOfCanvasRange + prop.length))\r\n    },\r\n    isValueProlonged: false,\r\n    getRange: function() {\r\n        return [this._toValue(this._canvasOptions.rangeMin), this._toValue(this._canvasOptions.rangeMax)]\r\n    },\r\n    getScreenRange: function() {\r\n        return [this._canvasOptions.startPoint, this._canvasOptions.endPoint]\r\n    },\r\n    add: function(value, diff, dir) {\r\n        return this._add(value, diff, (this._businessRange.invert ? -1 : 1) * dir)\r\n    },\r\n    _add: function(value, diff, coeff) {\r\n        return this._toValue(this._fromValue(value) + diff * coeff)\r\n    },\r\n    _fromValue: function(value) {\r\n        return null !== value ? Number(value) : null\r\n    },\r\n    _toValue: function(value) {\r\n        return null !== value ? Number(value) : null\r\n    },\r\n    ratioOfCanvasRange: function() {\r\n        return this._canvasOptions.ratioOfCanvasRange\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}