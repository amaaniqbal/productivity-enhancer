{"ast":null,"code":"/**\r\n * DevExtreme (core/utils/date_serialization.js)\r\n * Version: 20.2.3\r\n * Build date: Tue Oct 20 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.default = void 0;\n\nvar _config = _interopRequireDefault(require(\"../config\"));\n\nvar _date = require(\"../../localization/ldml/date.formatter\");\n\nvar _default_date_names = _interopRequireDefault(require(\"../../localization/default_date_names\"));\n\nvar _type = require(\"./type\");\n\nvar _browser = _interopRequireDefault(require(\"./browser\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar NUMBER_SERIALIZATION_FORMAT = \"number\";\nvar DATE_SERIALIZATION_FORMAT = \"yyyy/MM/dd\";\nvar DATETIME_SERIALIZATION_FORMAT = \"yyyy/MM/dd HH:mm:ss\";\nvar ISO8601_PATTERN = /^(\\d{4,})(-)?(\\d{2})(-)?(\\d{2})(?:T(\\d{2})(:)?(\\d{2})?(:)?(\\d{2}(?:\\.(\\d{1,3})\\d*)?)?)?(Z|([+-])(\\d{2})(:)?(\\d{2})?)?$/;\nvar ISO8601_TIME_PATTERN = /^(\\d{2}):(\\d{2})(:(\\d{2}))?$/;\nvar ISO8601_PATTERN_PARTS = [\"\", \"yyyy\", \"\", \"MM\", \"\", \"dd\", \"THH\", \"\", \"mm\", \"\", \"ss\", \".SSS\"];\nvar DATE_SERIALIZATION_PATTERN = /^(\\d{4})\\/(\\d{2})\\/(\\d{2})$/;\nvar MILLISECOND_LENGHT = 3;\nvar isIE11 = _browser.default.msie && parseInt(_browser.default.version) <= 11;\n\nvar dateParser = function dateParser(text, skipISO8601Parsing) {\n  var result;\n\n  if ((0, _type.isString)(text) && !skipISO8601Parsing) {\n    result = parseISO8601String(text);\n  }\n\n  return result || parseDate(text);\n};\n\nfunction getTimePart(part) {\n  return +part || 0;\n}\n\nfunction parseDate(text) {\n  var isDefaultSerializationFormat = getDateSerializationFormat(text) === DATE_SERIALIZATION_FORMAT;\n  var parsedValue = !(0, _type.isDate)(text) && Date.parse(text);\n\n  if ((!parsedValue || isIE11) && isDefaultSerializationFormat) {\n    var parts = text.match(DATE_SERIALIZATION_PATTERN);\n\n    if (parts) {\n      var newDate = new Date(getTimePart(parts[1]), getTimePart(parts[2]), getTimePart(parts[3]));\n      newDate.setFullYear(getTimePart(parts[1]));\n      newDate.setMonth(getTimePart(parts[2]) - 1);\n      newDate.setDate(getTimePart(parts[3]));\n      return newDate;\n    }\n  }\n\n  return (0, _type.isNumeric)(parsedValue) ? new Date(parsedValue) : text;\n}\n\nfunction parseISO8601String(text) {\n  var parts = text.match(ISO8601_PATTERN);\n\n  if (!parts) {\n    parts = text.match(ISO8601_TIME_PATTERN);\n\n    if (parts) {\n      return new Date(0, 0, 0, getTimePart(parts[1]), getTimePart(parts[2]), getTimePart(parts[4]));\n    }\n\n    return;\n  }\n\n  var year = parts[1];\n  var month = --parts[3];\n  var day = parts[5];\n  var timeZoneHour = 0;\n  var timeZoneMinute = 0;\n  timeZoneHour = getTimePart(parts[14]);\n  timeZoneMinute = getTimePart(parts[16]);\n\n  if (\"-\" === parts[13]) {\n    timeZoneHour = -timeZoneHour;\n    timeZoneMinute = -timeZoneMinute;\n  }\n\n  var hour = getTimePart(parts[6]) - timeZoneHour;\n  var minute = getTimePart(parts[8]) - timeZoneMinute;\n  var second = getTimePart(parts[10]);\n\n  var parseMilliseconds = function parseMilliseconds(part) {\n    part = part || \"\";\n    return getTimePart(part) * Math.pow(10, MILLISECOND_LENGHT - part.length);\n  };\n\n  var millisecond = parseMilliseconds(parts[11]);\n\n  if (parts[12]) {\n    return new Date(Date.UTC(year, month, day, hour, minute, second, millisecond));\n  }\n\n  return new Date(year, month, day, hour, minute, second, millisecond);\n}\n\nvar getIso8601Format = function getIso8601Format(text, useUtc) {\n  var parts = text.match(ISO8601_PATTERN);\n  var result = \"\";\n\n  if (!parts) {\n    parts = text.match(ISO8601_TIME_PATTERN);\n\n    if (parts) {\n      return parts[3] ? \"HH:mm:ss\" : \"HH:mm\";\n    }\n\n    return;\n  }\n\n  for (var i = 1; i < ISO8601_PATTERN_PARTS.length; i++) {\n    if (parts[i]) {\n      result += ISO8601_PATTERN_PARTS[i] || parts[i];\n    }\n  }\n\n  if (\"Z\" === parts[12]) {\n    result += \"'Z'\";\n  }\n\n  if (parts[14]) {\n    if (parts[15]) {\n      result += \"xxx\";\n    } else {\n      if (parts[16]) {\n        result += \"xx\";\n      } else {\n        result += \"x\";\n      }\n    }\n  }\n\n  return result;\n};\n\nvar deserializeDate = function deserializeDate(value) {\n  if (\"number\" === typeof value) {\n    return new Date(value);\n  }\n\n  return dateParser(value, !(0, _config.default)().forceIsoDateParsing);\n};\n\nvar serializeDate = function serializeDate(value, serializationFormat) {\n  if (!serializationFormat) {\n    return value;\n  }\n\n  if (!(0, _type.isDate)(value)) {\n    return null;\n  }\n\n  if (serializationFormat === NUMBER_SERIALIZATION_FORMAT) {\n    return value && value.valueOf ? value.valueOf() : null;\n  }\n\n  return (0, _date.getFormatter)(serializationFormat, _default_date_names.default)(value);\n};\n\nvar getDateSerializationFormat = function getDateSerializationFormat(value) {\n  if (\"number\" === typeof value) {\n    return NUMBER_SERIALIZATION_FORMAT;\n  } else {\n    if ((0, _type.isString)(value)) {\n      var format;\n\n      if ((0, _config.default)().forceIsoDateParsing) {\n        format = getIso8601Format(value);\n      }\n\n      if (format) {\n        return format;\n      } else {\n        if (value.indexOf(\":\") >= 0) {\n          return DATETIME_SERIALIZATION_FORMAT;\n        } else {\n          return DATE_SERIALIZATION_FORMAT;\n        }\n      }\n    } else {\n      if (value) {\n        return null;\n      }\n    }\n  }\n};\n\nvar _default = {\n  dateParser: dateParser,\n  deserializeDate: deserializeDate,\n  serializeDate: serializeDate,\n  getDateSerializationFormat: getDateSerializationFormat\n};\nexports.default = _default;\nmodule.exports = exports.default;","map":{"version":3,"sources":["E:/Monday.com/quickstart-react/node_modules/devextreme/core/utils/date_serialization.js"],"names":["exports","default","_config","_interopRequireDefault","require","_date","_default_date_names","_type","_browser","obj","__esModule","NUMBER_SERIALIZATION_FORMAT","DATE_SERIALIZATION_FORMAT","DATETIME_SERIALIZATION_FORMAT","ISO8601_PATTERN","ISO8601_TIME_PATTERN","ISO8601_PATTERN_PARTS","DATE_SERIALIZATION_PATTERN","MILLISECOND_LENGHT","isIE11","msie","parseInt","version","dateParser","text","skipISO8601Parsing","result","isString","parseISO8601String","parseDate","getTimePart","part","isDefaultSerializationFormat","getDateSerializationFormat","parsedValue","isDate","Date","parse","parts","match","newDate","setFullYear","setMonth","setDate","isNumeric","year","month","day","timeZoneHour","timeZoneMinute","hour","minute","second","parseMilliseconds","Math","pow","length","millisecond","UTC","getIso8601Format","useUtc","i","deserializeDate","value","forceIsoDateParsing","serializeDate","serializationFormat","valueOf","getFormatter","format","indexOf","_default","module"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (core/utils/date_serialization.js)\r\n * Version: 20.2.3\r\n * Build date: Tue Oct 20 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.default = void 0;\r\nvar _config = _interopRequireDefault(require(\"../config\"));\r\nvar _date = require(\"../../localization/ldml/date.formatter\");\r\nvar _default_date_names = _interopRequireDefault(require(\"../../localization/default_date_names\"));\r\nvar _type = require(\"./type\");\r\nvar _browser = _interopRequireDefault(require(\"./browser\"));\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar NUMBER_SERIALIZATION_FORMAT = \"number\";\r\nvar DATE_SERIALIZATION_FORMAT = \"yyyy/MM/dd\";\r\nvar DATETIME_SERIALIZATION_FORMAT = \"yyyy/MM/dd HH:mm:ss\";\r\nvar ISO8601_PATTERN = /^(\\d{4,})(-)?(\\d{2})(-)?(\\d{2})(?:T(\\d{2})(:)?(\\d{2})?(:)?(\\d{2}(?:\\.(\\d{1,3})\\d*)?)?)?(Z|([+-])(\\d{2})(:)?(\\d{2})?)?$/;\r\nvar ISO8601_TIME_PATTERN = /^(\\d{2}):(\\d{2})(:(\\d{2}))?$/;\r\nvar ISO8601_PATTERN_PARTS = [\"\", \"yyyy\", \"\", \"MM\", \"\", \"dd\", \"THH\", \"\", \"mm\", \"\", \"ss\", \".SSS\"];\r\nvar DATE_SERIALIZATION_PATTERN = /^(\\d{4})\\/(\\d{2})\\/(\\d{2})$/;\r\nvar MILLISECOND_LENGHT = 3;\r\nvar isIE11 = _browser.default.msie && parseInt(_browser.default.version) <= 11;\r\nvar dateParser = function(text, skipISO8601Parsing) {\r\n    var result;\r\n    if ((0, _type.isString)(text) && !skipISO8601Parsing) {\r\n        result = parseISO8601String(text)\r\n    }\r\n    return result || parseDate(text)\r\n};\r\n\r\nfunction getTimePart(part) {\r\n    return +part || 0\r\n}\r\n\r\nfunction parseDate(text) {\r\n    var isDefaultSerializationFormat = getDateSerializationFormat(text) === DATE_SERIALIZATION_FORMAT;\r\n    var parsedValue = !(0, _type.isDate)(text) && Date.parse(text);\r\n    if ((!parsedValue || isIE11) && isDefaultSerializationFormat) {\r\n        var parts = text.match(DATE_SERIALIZATION_PATTERN);\r\n        if (parts) {\r\n            var newDate = new Date(getTimePart(parts[1]), getTimePart(parts[2]), getTimePart(parts[3]));\r\n            newDate.setFullYear(getTimePart(parts[1]));\r\n            newDate.setMonth(getTimePart(parts[2]) - 1);\r\n            newDate.setDate(getTimePart(parts[3]));\r\n            return newDate\r\n        }\r\n    }\r\n    return (0, _type.isNumeric)(parsedValue) ? new Date(parsedValue) : text\r\n}\r\n\r\nfunction parseISO8601String(text) {\r\n    var parts = text.match(ISO8601_PATTERN);\r\n    if (!parts) {\r\n        parts = text.match(ISO8601_TIME_PATTERN);\r\n        if (parts) {\r\n            return new Date(0, 0, 0, getTimePart(parts[1]), getTimePart(parts[2]), getTimePart(parts[4]))\r\n        }\r\n        return\r\n    }\r\n    var year = parts[1];\r\n    var month = --parts[3];\r\n    var day = parts[5];\r\n    var timeZoneHour = 0;\r\n    var timeZoneMinute = 0;\r\n    timeZoneHour = getTimePart(parts[14]);\r\n    timeZoneMinute = getTimePart(parts[16]);\r\n    if (\"-\" === parts[13]) {\r\n        timeZoneHour = -timeZoneHour;\r\n        timeZoneMinute = -timeZoneMinute\r\n    }\r\n    var hour = getTimePart(parts[6]) - timeZoneHour;\r\n    var minute = getTimePart(parts[8]) - timeZoneMinute;\r\n    var second = getTimePart(parts[10]);\r\n    var parseMilliseconds = function(part) {\r\n        part = part || \"\";\r\n        return getTimePart(part) * Math.pow(10, MILLISECOND_LENGHT - part.length)\r\n    };\r\n    var millisecond = parseMilliseconds(parts[11]);\r\n    if (parts[12]) {\r\n        return new Date(Date.UTC(year, month, day, hour, minute, second, millisecond))\r\n    }\r\n    return new Date(year, month, day, hour, minute, second, millisecond)\r\n}\r\nvar getIso8601Format = function(text, useUtc) {\r\n    var parts = text.match(ISO8601_PATTERN);\r\n    var result = \"\";\r\n    if (!parts) {\r\n        parts = text.match(ISO8601_TIME_PATTERN);\r\n        if (parts) {\r\n            return parts[3] ? \"HH:mm:ss\" : \"HH:mm\"\r\n        }\r\n        return\r\n    }\r\n    for (var i = 1; i < ISO8601_PATTERN_PARTS.length; i++) {\r\n        if (parts[i]) {\r\n            result += ISO8601_PATTERN_PARTS[i] || parts[i]\r\n        }\r\n    }\r\n    if (\"Z\" === parts[12]) {\r\n        result += \"'Z'\"\r\n    }\r\n    if (parts[14]) {\r\n        if (parts[15]) {\r\n            result += \"xxx\"\r\n        } else {\r\n            if (parts[16]) {\r\n                result += \"xx\"\r\n            } else {\r\n                result += \"x\"\r\n            }\r\n        }\r\n    }\r\n    return result\r\n};\r\nvar deserializeDate = function(value) {\r\n    if (\"number\" === typeof value) {\r\n        return new Date(value)\r\n    }\r\n    return dateParser(value, !(0, _config.default)().forceIsoDateParsing)\r\n};\r\nvar serializeDate = function(value, serializationFormat) {\r\n    if (!serializationFormat) {\r\n        return value\r\n    }\r\n    if (!(0, _type.isDate)(value)) {\r\n        return null\r\n    }\r\n    if (serializationFormat === NUMBER_SERIALIZATION_FORMAT) {\r\n        return value && value.valueOf ? value.valueOf() : null\r\n    }\r\n    return (0, _date.getFormatter)(serializationFormat, _default_date_names.default)(value)\r\n};\r\nvar getDateSerializationFormat = function(value) {\r\n    if (\"number\" === typeof value) {\r\n        return NUMBER_SERIALIZATION_FORMAT\r\n    } else {\r\n        if ((0, _type.isString)(value)) {\r\n            var format;\r\n            if ((0, _config.default)().forceIsoDateParsing) {\r\n                format = getIso8601Format(value)\r\n            }\r\n            if (format) {\r\n                return format\r\n            } else {\r\n                if (value.indexOf(\":\") >= 0) {\r\n                    return DATETIME_SERIALIZATION_FORMAT\r\n                } else {\r\n                    return DATE_SERIALIZATION_FORMAT\r\n                }\r\n            }\r\n        } else {\r\n            if (value) {\r\n                return null\r\n            }\r\n        }\r\n    }\r\n};\r\nvar _default = {\r\n    dateParser: dateParser,\r\n    deserializeDate: deserializeDate,\r\n    serializeDate: serializeDate,\r\n    getDateSerializationFormat: getDateSerializationFormat\r\n};\r\nexports.default = _default;\r\nmodule.exports = exports.default;\r\n"]},"metadata":{},"sourceType":"script"}