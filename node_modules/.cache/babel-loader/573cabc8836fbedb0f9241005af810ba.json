{"ast":null,"code":"/**\r\n * DevExtreme (viz/series/stacked_series.js)\r\n * Version: 20.2.3\r\n * Build date: Tue Oct 20 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nexports.polar = exports.chart = void 0;\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _extend2 = require(\"../../core/utils/extend\");\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _area_series = require(\"./area_series\");\n\nvar _bar_series = require(\"./bar_series\");\n\nvar _line_series = require(\"./line_series\");\n\nvar _utils = require(\"../core/utils\");\n\nvar _object = require(\"../../core/utils/object\");\n\nvar chartAreaSeries = _area_series.chart.area;\nvar chartBarSeries = _bar_series.chart.bar;\nvar baseStackedSeries = {\n  _calculateErrorBars: _common.noop,\n  _updateOptions: function (options) {\n    this._stackName = \"axis_\" + (options.axis || \"default\");\n  }\n};\nvar chart = {};\nexports.chart = chart;\nvar polar = {};\nexports.polar = polar;\nchart.stackedline = (0, _extend2.extend)({}, _line_series.chart.line, baseStackedSeries, {});\nchart.stackedspline = (0, _extend2.extend)({}, _line_series.chart.spline, baseStackedSeries, {});\nchart.fullstackedline = (0, _extend2.extend)({}, _line_series.chart.line, baseStackedSeries, {\n  getValueRangeInitialValue: _area_series.chart.area.getValueRangeInitialValue\n});\nchart.fullstackedspline = (0, _extend2.extend)({}, _line_series.chart.spline, baseStackedSeries, {\n  getValueRangeInitialValue: _area_series.chart.area.getValueRangeInitialValue\n});\nvar stackedBar = chart.stackedbar = (0, _extend2.extend)({}, chartBarSeries, baseStackedSeries, {\n  _updateOptions: function (options) {\n    baseStackedSeries._updateOptions.call(this, options);\n\n    this._stackName = this._stackName + \"_stack_\" + (options.stack || \"default\");\n  }\n});\nchart.fullstackedbar = (0, _extend2.extend)({}, chartBarSeries, baseStackedSeries, {\n  _updateOptions: stackedBar._updateOptions\n});\n\nfunction clonePoint(point, value, minValue, position) {\n  point = (0, _object.clone)(point);\n  point.value = value;\n  point.minValue = minValue;\n  point.translate();\n  point.argument = point.argument + position;\n  return point;\n}\n\nfunction preparePointsForStackedAreaSegment(points) {\n  var i = 0;\n  var p;\n  var result = [];\n  var array;\n  var len = points.length;\n\n  while (i < len) {\n    p = points[i];\n    array = [p];\n\n    if (p.leftHole) {\n      array = [clonePoint(p, p.leftHole, p.minLeftHole, \"left\"), p];\n    }\n\n    if (p.rightHole) {\n      array.push(clonePoint(p, p.rightHole, p.minRightHole, \"right\"));\n    }\n\n    result.push(array);\n    i++;\n  }\n\n  return [].concat.apply([], result);\n}\n\nchart.stackedarea = (0, _extend2.extend)({}, chartAreaSeries, baseStackedSeries, {\n  _prepareSegment: function (points, rotated) {\n    return chartAreaSeries._prepareSegment.call(this, preparePointsForStackedAreaSegment(points), rotated);\n  },\n  _appendInGroup: function () {\n    this._group.append(this._extGroups.seriesGroup).toBackground();\n  }\n});\n\nfunction getPointsByArgFromPrevSeries(prevSeries, argument) {\n  var result;\n\n  while (!result && prevSeries) {\n    result = prevSeries._segmentByArg && prevSeries._segmentByArg[argument];\n    prevSeries = prevSeries._prevSeries;\n  }\n\n  return result;\n}\n\nchart.stackedsplinearea = (0, _extend2.extend)({}, _area_series.chart.splinearea, baseStackedSeries, {\n  _prepareSegment: function (points, rotated) {\n    var that = this;\n    var areaSegment;\n    points = preparePointsForStackedAreaSegment(points);\n\n    if (!this._prevSeries || 1 === points.length) {\n      areaSegment = _area_series.chart.splinearea._prepareSegment.call(this, points, rotated);\n    } else {\n      var forwardPoints = _line_series.chart.spline._calculateBezierPoints(points, rotated);\n\n      var backwardPoints = (0, _utils.map)(points, function (p) {\n        var point = p.getCoords(true);\n        point.argument = p.argument;\n        return point;\n      });\n      var prevSeriesForwardPoints = [];\n      var pointByArg = {};\n      var i = 0;\n      var len = that._prevSeries._segments.length;\n\n      while (i < len) {\n        prevSeriesForwardPoints = prevSeriesForwardPoints.concat(that._prevSeries._segments[i].line);\n        i++;\n      }\n\n      (0, _iterator.each)(prevSeriesForwardPoints, function (_, p) {\n        if (null !== p.argument) {\n          var argument = p.argument.valueOf();\n\n          if (!pointByArg[argument]) {\n            pointByArg[argument] = [p];\n          } else {\n            pointByArg[argument].push(p);\n          }\n        }\n      });\n      that._prevSeries._segmentByArg = pointByArg;\n      backwardPoints = _line_series.chart.spline._calculateBezierPoints(backwardPoints, rotated);\n      (0, _iterator.each)(backwardPoints, function (i, p) {\n        var argument = p.argument.valueOf();\n        var prevSeriesPoints;\n\n        if (i % 3 === 0) {\n          prevSeriesPoints = pointByArg[argument] || getPointsByArgFromPrevSeries(that._prevSeries, argument);\n\n          if (prevSeriesPoints) {\n            backwardPoints[i - 1] && prevSeriesPoints[0] && (backwardPoints[i - 1] = prevSeriesPoints[0]);\n            backwardPoints[i + 1] && (backwardPoints[i + 1] = prevSeriesPoints[2] || p);\n          }\n        }\n      });\n      areaSegment = {\n        line: forwardPoints,\n        area: forwardPoints.concat(backwardPoints.reverse())\n      };\n\n      that._areaPointsToSplineAreaPoints(areaSegment.area);\n    }\n\n    return areaSegment;\n  },\n  _appendInGroup: chart.stackedarea._appendInGroup\n});\nchart.fullstackedarea = (0, _extend2.extend)({}, chartAreaSeries, baseStackedSeries, {\n  _prepareSegment: chart.stackedarea._prepareSegment,\n  _appendInGroup: chart.stackedarea._appendInGroup\n});\nchart.fullstackedsplinearea = (0, _extend2.extend)({}, _area_series.chart.splinearea, baseStackedSeries, {\n  _prepareSegment: chart.stackedsplinearea._prepareSegment,\n  _appendInGroup: chart.stackedarea._appendInGroup\n});\npolar.stackedbar = (0, _extend2.extend)({}, _bar_series.polar.bar, baseStackedSeries, {});","map":{"version":3,"sources":["E:/Monday.com/quickstart-react/node_modules/devextreme/viz/series/stacked_series.js"],"names":["exports","polar","chart","_common","require","_extend2","_iterator","_area_series","_bar_series","_line_series","_utils","_object","chartAreaSeries","area","chartBarSeries","bar","baseStackedSeries","_calculateErrorBars","noop","_updateOptions","options","_stackName","axis","stackedline","extend","line","stackedspline","spline","fullstackedline","getValueRangeInitialValue","fullstackedspline","stackedBar","stackedbar","call","stack","fullstackedbar","clonePoint","point","value","minValue","position","clone","translate","argument","preparePointsForStackedAreaSegment","points","i","p","result","array","len","length","leftHole","minLeftHole","rightHole","push","minRightHole","concat","apply","stackedarea","_prepareSegment","rotated","_appendInGroup","_group","append","_extGroups","seriesGroup","toBackground","getPointsByArgFromPrevSeries","prevSeries","_segmentByArg","_prevSeries","stackedsplinearea","splinearea","that","areaSegment","forwardPoints","_calculateBezierPoints","backwardPoints","map","getCoords","prevSeriesForwardPoints","pointByArg","_segments","each","_","valueOf","prevSeriesPoints","reverse","_areaPointsToSplineAreaPoints","fullstackedarea","fullstackedsplinearea"],"mappings":"AAAA;;;;;;;;AAQA;;AACAA,OAAO,CAACC,KAAR,GAAgBD,OAAO,CAACE,KAAR,GAAgB,KAAK,CAArC;;AACA,IAAIC,OAAO,GAAGC,OAAO,CAAC,yBAAD,CAArB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,yBAAD,CAAtB;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,2BAAD,CAAvB;;AACA,IAAIG,YAAY,GAAGH,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAII,WAAW,GAAGJ,OAAO,CAAC,cAAD,CAAzB;;AACA,IAAIK,YAAY,GAAGL,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAIM,MAAM,GAAGN,OAAO,CAAC,eAAD,CAApB;;AACA,IAAIO,OAAO,GAAGP,OAAO,CAAC,yBAAD,CAArB;;AACA,IAAIQ,eAAe,GAAGL,YAAY,CAACL,KAAb,CAAmBW,IAAzC;AACA,IAAIC,cAAc,GAAGN,WAAW,CAACN,KAAZ,CAAkBa,GAAvC;AACA,IAAIC,iBAAiB,GAAG;AACpBC,EAAAA,mBAAmB,EAAEd,OAAO,CAACe,IADT;AAEpBC,EAAAA,cAAc,EAAE,UAASC,OAAT,EAAkB;AAC9B,SAAKC,UAAL,GAAkB,WAAWD,OAAO,CAACE,IAAR,IAAgB,SAA3B,CAAlB;AACH;AAJmB,CAAxB;AAMA,IAAIpB,KAAK,GAAG,EAAZ;AACAF,OAAO,CAACE,KAAR,GAAgBA,KAAhB;AACA,IAAID,KAAK,GAAG,EAAZ;AACAD,OAAO,CAACC,KAAR,GAAgBA,KAAhB;AACAC,KAAK,CAACqB,WAAN,GAAoB,CAAC,GAAGlB,QAAQ,CAACmB,MAAb,EAAqB,EAArB,EAAyBf,YAAY,CAACP,KAAb,CAAmBuB,IAA5C,EAAkDT,iBAAlD,EAAqE,EAArE,CAApB;AACAd,KAAK,CAACwB,aAAN,GAAsB,CAAC,GAAGrB,QAAQ,CAACmB,MAAb,EAAqB,EAArB,EAAyBf,YAAY,CAACP,KAAb,CAAmByB,MAA5C,EAAoDX,iBAApD,EAAuE,EAAvE,CAAtB;AACAd,KAAK,CAAC0B,eAAN,GAAwB,CAAC,GAAGvB,QAAQ,CAACmB,MAAb,EAAqB,EAArB,EAAyBf,YAAY,CAACP,KAAb,CAAmBuB,IAA5C,EAAkDT,iBAAlD,EAAqE;AACzFa,EAAAA,yBAAyB,EAAEtB,YAAY,CAACL,KAAb,CAAmBW,IAAnB,CAAwBgB;AADsC,CAArE,CAAxB;AAGA3B,KAAK,CAAC4B,iBAAN,GAA0B,CAAC,GAAGzB,QAAQ,CAACmB,MAAb,EAAqB,EAArB,EAAyBf,YAAY,CAACP,KAAb,CAAmByB,MAA5C,EAAoDX,iBAApD,EAAuE;AAC7Fa,EAAAA,yBAAyB,EAAEtB,YAAY,CAACL,KAAb,CAAmBW,IAAnB,CAAwBgB;AAD0C,CAAvE,CAA1B;AAGA,IAAIE,UAAU,GAAG7B,KAAK,CAAC8B,UAAN,GAAmB,CAAC,GAAG3B,QAAQ,CAACmB,MAAb,EAAqB,EAArB,EAAyBV,cAAzB,EAAyCE,iBAAzC,EAA4D;AAC5FG,EAAAA,cAAc,EAAE,UAASC,OAAT,EAAkB;AAC9BJ,IAAAA,iBAAiB,CAACG,cAAlB,CAAiCc,IAAjC,CAAsC,IAAtC,EAA4Cb,OAA5C;;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,GAAkB,SAAlB,IAA+BD,OAAO,CAACc,KAAR,IAAiB,SAAhD,CAAlB;AACH;AAJ2F,CAA5D,CAApC;AAMAhC,KAAK,CAACiC,cAAN,GAAuB,CAAC,GAAG9B,QAAQ,CAACmB,MAAb,EAAqB,EAArB,EAAyBV,cAAzB,EAAyCE,iBAAzC,EAA4D;AAC/EG,EAAAA,cAAc,EAAEY,UAAU,CAACZ;AADoD,CAA5D,CAAvB;;AAIA,SAASiB,UAAT,CAAoBC,KAApB,EAA2BC,KAA3B,EAAkCC,QAAlC,EAA4CC,QAA5C,EAAsD;AAClDH,EAAAA,KAAK,GAAG,CAAC,GAAG1B,OAAO,CAAC8B,KAAZ,EAAmBJ,KAAnB,CAAR;AACAA,EAAAA,KAAK,CAACC,KAAN,GAAcA,KAAd;AACAD,EAAAA,KAAK,CAACE,QAAN,GAAiBA,QAAjB;AACAF,EAAAA,KAAK,CAACK,SAAN;AACAL,EAAAA,KAAK,CAACM,QAAN,GAAiBN,KAAK,CAACM,QAAN,GAAiBH,QAAlC;AACA,SAAOH,KAAP;AACH;;AAED,SAASO,kCAAT,CAA4CC,MAA5C,EAAoD;AAChD,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,CAAJ;AACA,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,KAAJ;AACA,MAAIC,GAAG,GAAGL,MAAM,CAACM,MAAjB;;AACA,SAAOL,CAAC,GAAGI,GAAX,EAAgB;AACZH,IAAAA,CAAC,GAAGF,MAAM,CAACC,CAAD,CAAV;AACAG,IAAAA,KAAK,GAAG,CAACF,CAAD,CAAR;;AACA,QAAIA,CAAC,CAACK,QAAN,EAAgB;AACZH,MAAAA,KAAK,GAAG,CAACb,UAAU,CAACW,CAAD,EAAIA,CAAC,CAACK,QAAN,EAAgBL,CAAC,CAACM,WAAlB,EAA+B,MAA/B,CAAX,EAAmDN,CAAnD,CAAR;AACH;;AACD,QAAIA,CAAC,CAACO,SAAN,EAAiB;AACbL,MAAAA,KAAK,CAACM,IAAN,CAAWnB,UAAU,CAACW,CAAD,EAAIA,CAAC,CAACO,SAAN,EAAiBP,CAAC,CAACS,YAAnB,EAAiC,OAAjC,CAArB;AACH;;AACDR,IAAAA,MAAM,CAACO,IAAP,CAAYN,KAAZ;AACAH,IAAAA,CAAC;AACJ;;AACD,SAAO,GAAGW,MAAH,CAAUC,KAAV,CAAgB,EAAhB,EAAoBV,MAApB,CAAP;AACH;;AACD9C,KAAK,CAACyD,WAAN,GAAoB,CAAC,GAAGtD,QAAQ,CAACmB,MAAb,EAAqB,EAArB,EAAyBZ,eAAzB,EAA0CI,iBAA1C,EAA6D;AAC7E4C,EAAAA,eAAe,EAAE,UAASf,MAAT,EAAiBgB,OAAjB,EAA0B;AACvC,WAAOjD,eAAe,CAACgD,eAAhB,CAAgC3B,IAAhC,CAAqC,IAArC,EAA2CW,kCAAkC,CAACC,MAAD,CAA7E,EAAuFgB,OAAvF,CAAP;AACH,GAH4E;AAI7EC,EAAAA,cAAc,EAAE,YAAW;AACvB,SAAKC,MAAL,CAAYC,MAAZ,CAAmB,KAAKC,UAAL,CAAgBC,WAAnC,EAAgDC,YAAhD;AACH;AAN4E,CAA7D,CAApB;;AASA,SAASC,4BAAT,CAAsCC,UAAtC,EAAkD1B,QAAlD,EAA4D;AACxD,MAAIK,MAAJ;;AACA,SAAO,CAACA,MAAD,IAAWqB,UAAlB,EAA8B;AAC1BrB,IAAAA,MAAM,GAAGqB,UAAU,CAACC,aAAX,IAA4BD,UAAU,CAACC,aAAX,CAAyB3B,QAAzB,CAArC;AACA0B,IAAAA,UAAU,GAAGA,UAAU,CAACE,WAAxB;AACH;;AACD,SAAOvB,MAAP;AACH;;AACD9C,KAAK,CAACsE,iBAAN,GAA0B,CAAC,GAAGnE,QAAQ,CAACmB,MAAb,EAAqB,EAArB,EAAyBjB,YAAY,CAACL,KAAb,CAAmBuE,UAA5C,EAAwDzD,iBAAxD,EAA2E;AACjG4C,EAAAA,eAAe,EAAE,UAASf,MAAT,EAAiBgB,OAAjB,EAA0B;AACvC,QAAIa,IAAI,GAAG,IAAX;AACA,QAAIC,WAAJ;AACA9B,IAAAA,MAAM,GAAGD,kCAAkC,CAACC,MAAD,CAA3C;;AACA,QAAI,CAAC,KAAK0B,WAAN,IAAqB,MAAM1B,MAAM,CAACM,MAAtC,EAA8C;AAC1CwB,MAAAA,WAAW,GAAGpE,YAAY,CAACL,KAAb,CAAmBuE,UAAnB,CAA8Bb,eAA9B,CAA8C3B,IAA9C,CAAmD,IAAnD,EAAyDY,MAAzD,EAAiEgB,OAAjE,CAAd;AACH,KAFD,MAEO;AACH,UAAIe,aAAa,GAAGnE,YAAY,CAACP,KAAb,CAAmByB,MAAnB,CAA0BkD,sBAA1B,CAAiDhC,MAAjD,EAAyDgB,OAAzD,CAApB;;AACA,UAAIiB,cAAc,GAAG,CAAC,GAAGpE,MAAM,CAACqE,GAAX,EAAgBlC,MAAhB,EAAwB,UAASE,CAAT,EAAY;AACrD,YAAIV,KAAK,GAAGU,CAAC,CAACiC,SAAF,CAAY,IAAZ,CAAZ;AACA3C,QAAAA,KAAK,CAACM,QAAN,GAAiBI,CAAC,CAACJ,QAAnB;AACA,eAAON,KAAP;AACH,OAJoB,CAArB;AAKA,UAAI4C,uBAAuB,GAAG,EAA9B;AACA,UAAIC,UAAU,GAAG,EAAjB;AACA,UAAIpC,CAAC,GAAG,CAAR;AACA,UAAII,GAAG,GAAGwB,IAAI,CAACH,WAAL,CAAiBY,SAAjB,CAA2BhC,MAArC;;AACA,aAAOL,CAAC,GAAGI,GAAX,EAAgB;AACZ+B,QAAAA,uBAAuB,GAAGA,uBAAuB,CAACxB,MAAxB,CAA+BiB,IAAI,CAACH,WAAL,CAAiBY,SAAjB,CAA2BrC,CAA3B,EAA8BrB,IAA7D,CAA1B;AACAqB,QAAAA,CAAC;AACJ;;AAAA,OAAC,GAAGxC,SAAS,CAAC8E,IAAd,EAAoBH,uBAApB,EAA6C,UAASI,CAAT,EAAYtC,CAAZ,EAAe;AACzD,YAAI,SAASA,CAAC,CAACJ,QAAf,EAAyB;AACrB,cAAIA,QAAQ,GAAGI,CAAC,CAACJ,QAAF,CAAW2C,OAAX,EAAf;;AACA,cAAI,CAACJ,UAAU,CAACvC,QAAD,CAAf,EAA2B;AACvBuC,YAAAA,UAAU,CAACvC,QAAD,CAAV,GAAuB,CAACI,CAAD,CAAvB;AACH,WAFD,MAEO;AACHmC,YAAAA,UAAU,CAACvC,QAAD,CAAV,CAAqBY,IAArB,CAA0BR,CAA1B;AACH;AACJ;AACJ,OATA;AAUD2B,MAAAA,IAAI,CAACH,WAAL,CAAiBD,aAAjB,GAAiCY,UAAjC;AACAJ,MAAAA,cAAc,GAAGrE,YAAY,CAACP,KAAb,CAAmByB,MAAnB,CAA0BkD,sBAA1B,CAAiDC,cAAjD,EAAiEjB,OAAjE,CAAjB;AACA,OAAC,GAAGvD,SAAS,CAAC8E,IAAd,EAAoBN,cAApB,EAAoC,UAAShC,CAAT,EAAYC,CAAZ,EAAe;AAC/C,YAAIJ,QAAQ,GAAGI,CAAC,CAACJ,QAAF,CAAW2C,OAAX,EAAf;AACA,YAAIC,gBAAJ;;AACA,YAAIzC,CAAC,GAAG,CAAJ,KAAU,CAAd,EAAiB;AACbyC,UAAAA,gBAAgB,GAAGL,UAAU,CAACvC,QAAD,CAAV,IAAwByB,4BAA4B,CAACM,IAAI,CAACH,WAAN,EAAmB5B,QAAnB,CAAvE;;AACA,cAAI4C,gBAAJ,EAAsB;AAClBT,YAAAA,cAAc,CAAChC,CAAC,GAAG,CAAL,CAAd,IAAyByC,gBAAgB,CAAC,CAAD,CAAzC,KAAiDT,cAAc,CAAChC,CAAC,GAAG,CAAL,CAAd,GAAwByC,gBAAgB,CAAC,CAAD,CAAzF;AACAT,YAAAA,cAAc,CAAChC,CAAC,GAAG,CAAL,CAAd,KAA0BgC,cAAc,CAAChC,CAAC,GAAG,CAAL,CAAd,GAAwByC,gBAAgB,CAAC,CAAD,CAAhB,IAAuBxC,CAAzE;AACH;AACJ;AACJ,OAVD;AAWA4B,MAAAA,WAAW,GAAG;AACVlD,QAAAA,IAAI,EAAEmD,aADI;AAEV/D,QAAAA,IAAI,EAAE+D,aAAa,CAACnB,MAAd,CAAqBqB,cAAc,CAACU,OAAf,EAArB;AAFI,OAAd;;AAIAd,MAAAA,IAAI,CAACe,6BAAL,CAAmCd,WAAW,CAAC9D,IAA/C;AACH;;AACD,WAAO8D,WAAP;AACH,GAnDgG;AAoDjGb,EAAAA,cAAc,EAAE5D,KAAK,CAACyD,WAAN,CAAkBG;AApD+D,CAA3E,CAA1B;AAsDA5D,KAAK,CAACwF,eAAN,GAAwB,CAAC,GAAGrF,QAAQ,CAACmB,MAAb,EAAqB,EAArB,EAAyBZ,eAAzB,EAA0CI,iBAA1C,EAA6D;AACjF4C,EAAAA,eAAe,EAAE1D,KAAK,CAACyD,WAAN,CAAkBC,eAD8C;AAEjFE,EAAAA,cAAc,EAAE5D,KAAK,CAACyD,WAAN,CAAkBG;AAF+C,CAA7D,CAAxB;AAIA5D,KAAK,CAACyF,qBAAN,GAA8B,CAAC,GAAGtF,QAAQ,CAACmB,MAAb,EAAqB,EAArB,EAAyBjB,YAAY,CAACL,KAAb,CAAmBuE,UAA5C,EAAwDzD,iBAAxD,EAA2E;AACrG4C,EAAAA,eAAe,EAAE1D,KAAK,CAACsE,iBAAN,CAAwBZ,eAD4D;AAErGE,EAAAA,cAAc,EAAE5D,KAAK,CAACyD,WAAN,CAAkBG;AAFmE,CAA3E,CAA9B;AAIA7D,KAAK,CAAC+B,UAAN,GAAmB,CAAC,GAAG3B,QAAQ,CAACmB,MAAb,EAAqB,EAArB,EAAyBhB,WAAW,CAACP,KAAZ,CAAkBc,GAA3C,EAAgDC,iBAAhD,EAAmE,EAAnE,CAAnB","sourcesContent":["/**\r\n * DevExtreme (viz/series/stacked_series.js)\r\n * Version: 20.2.3\r\n * Build date: Tue Oct 20 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nexports.polar = exports.chart = void 0;\r\nvar _common = require(\"../../core/utils/common\");\r\nvar _extend2 = require(\"../../core/utils/extend\");\r\nvar _iterator = require(\"../../core/utils/iterator\");\r\nvar _area_series = require(\"./area_series\");\r\nvar _bar_series = require(\"./bar_series\");\r\nvar _line_series = require(\"./line_series\");\r\nvar _utils = require(\"../core/utils\");\r\nvar _object = require(\"../../core/utils/object\");\r\nvar chartAreaSeries = _area_series.chart.area;\r\nvar chartBarSeries = _bar_series.chart.bar;\r\nvar baseStackedSeries = {\r\n    _calculateErrorBars: _common.noop,\r\n    _updateOptions: function(options) {\r\n        this._stackName = \"axis_\" + (options.axis || \"default\")\r\n    }\r\n};\r\nvar chart = {};\r\nexports.chart = chart;\r\nvar polar = {};\r\nexports.polar = polar;\r\nchart.stackedline = (0, _extend2.extend)({}, _line_series.chart.line, baseStackedSeries, {});\r\nchart.stackedspline = (0, _extend2.extend)({}, _line_series.chart.spline, baseStackedSeries, {});\r\nchart.fullstackedline = (0, _extend2.extend)({}, _line_series.chart.line, baseStackedSeries, {\r\n    getValueRangeInitialValue: _area_series.chart.area.getValueRangeInitialValue\r\n});\r\nchart.fullstackedspline = (0, _extend2.extend)({}, _line_series.chart.spline, baseStackedSeries, {\r\n    getValueRangeInitialValue: _area_series.chart.area.getValueRangeInitialValue\r\n});\r\nvar stackedBar = chart.stackedbar = (0, _extend2.extend)({}, chartBarSeries, baseStackedSeries, {\r\n    _updateOptions: function(options) {\r\n        baseStackedSeries._updateOptions.call(this, options);\r\n        this._stackName = this._stackName + \"_stack_\" + (options.stack || \"default\")\r\n    }\r\n});\r\nchart.fullstackedbar = (0, _extend2.extend)({}, chartBarSeries, baseStackedSeries, {\r\n    _updateOptions: stackedBar._updateOptions\r\n});\r\n\r\nfunction clonePoint(point, value, minValue, position) {\r\n    point = (0, _object.clone)(point);\r\n    point.value = value;\r\n    point.minValue = minValue;\r\n    point.translate();\r\n    point.argument = point.argument + position;\r\n    return point\r\n}\r\n\r\nfunction preparePointsForStackedAreaSegment(points) {\r\n    var i = 0;\r\n    var p;\r\n    var result = [];\r\n    var array;\r\n    var len = points.length;\r\n    while (i < len) {\r\n        p = points[i];\r\n        array = [p];\r\n        if (p.leftHole) {\r\n            array = [clonePoint(p, p.leftHole, p.minLeftHole, \"left\"), p]\r\n        }\r\n        if (p.rightHole) {\r\n            array.push(clonePoint(p, p.rightHole, p.minRightHole, \"right\"))\r\n        }\r\n        result.push(array);\r\n        i++\r\n    }\r\n    return [].concat.apply([], result)\r\n}\r\nchart.stackedarea = (0, _extend2.extend)({}, chartAreaSeries, baseStackedSeries, {\r\n    _prepareSegment: function(points, rotated) {\r\n        return chartAreaSeries._prepareSegment.call(this, preparePointsForStackedAreaSegment(points), rotated)\r\n    },\r\n    _appendInGroup: function() {\r\n        this._group.append(this._extGroups.seriesGroup).toBackground()\r\n    }\r\n});\r\n\r\nfunction getPointsByArgFromPrevSeries(prevSeries, argument) {\r\n    var result;\r\n    while (!result && prevSeries) {\r\n        result = prevSeries._segmentByArg && prevSeries._segmentByArg[argument];\r\n        prevSeries = prevSeries._prevSeries\r\n    }\r\n    return result\r\n}\r\nchart.stackedsplinearea = (0, _extend2.extend)({}, _area_series.chart.splinearea, baseStackedSeries, {\r\n    _prepareSegment: function(points, rotated) {\r\n        var that = this;\r\n        var areaSegment;\r\n        points = preparePointsForStackedAreaSegment(points);\r\n        if (!this._prevSeries || 1 === points.length) {\r\n            areaSegment = _area_series.chart.splinearea._prepareSegment.call(this, points, rotated)\r\n        } else {\r\n            var forwardPoints = _line_series.chart.spline._calculateBezierPoints(points, rotated);\r\n            var backwardPoints = (0, _utils.map)(points, function(p) {\r\n                var point = p.getCoords(true);\r\n                point.argument = p.argument;\r\n                return point\r\n            });\r\n            var prevSeriesForwardPoints = [];\r\n            var pointByArg = {};\r\n            var i = 0;\r\n            var len = that._prevSeries._segments.length;\r\n            while (i < len) {\r\n                prevSeriesForwardPoints = prevSeriesForwardPoints.concat(that._prevSeries._segments[i].line);\r\n                i++\r\n            }(0, _iterator.each)(prevSeriesForwardPoints, function(_, p) {\r\n                if (null !== p.argument) {\r\n                    var argument = p.argument.valueOf();\r\n                    if (!pointByArg[argument]) {\r\n                        pointByArg[argument] = [p]\r\n                    } else {\r\n                        pointByArg[argument].push(p)\r\n                    }\r\n                }\r\n            });\r\n            that._prevSeries._segmentByArg = pointByArg;\r\n            backwardPoints = _line_series.chart.spline._calculateBezierPoints(backwardPoints, rotated);\r\n            (0, _iterator.each)(backwardPoints, function(i, p) {\r\n                var argument = p.argument.valueOf();\r\n                var prevSeriesPoints;\r\n                if (i % 3 === 0) {\r\n                    prevSeriesPoints = pointByArg[argument] || getPointsByArgFromPrevSeries(that._prevSeries, argument);\r\n                    if (prevSeriesPoints) {\r\n                        backwardPoints[i - 1] && prevSeriesPoints[0] && (backwardPoints[i - 1] = prevSeriesPoints[0]);\r\n                        backwardPoints[i + 1] && (backwardPoints[i + 1] = prevSeriesPoints[2] || p)\r\n                    }\r\n                }\r\n            });\r\n            areaSegment = {\r\n                line: forwardPoints,\r\n                area: forwardPoints.concat(backwardPoints.reverse())\r\n            };\r\n            that._areaPointsToSplineAreaPoints(areaSegment.area)\r\n        }\r\n        return areaSegment\r\n    },\r\n    _appendInGroup: chart.stackedarea._appendInGroup\r\n});\r\nchart.fullstackedarea = (0, _extend2.extend)({}, chartAreaSeries, baseStackedSeries, {\r\n    _prepareSegment: chart.stackedarea._prepareSegment,\r\n    _appendInGroup: chart.stackedarea._appendInGroup\r\n});\r\nchart.fullstackedsplinearea = (0, _extend2.extend)({}, _area_series.chart.splinearea, baseStackedSeries, {\r\n    _prepareSegment: chart.stackedsplinearea._prepareSegment,\r\n    _appendInGroup: chart.stackedarea._appendInGroup\r\n});\r\npolar.stackedbar = (0, _extend2.extend)({}, _bar_series.polar.bar, baseStackedSeries, {});\r\n"]},"metadata":{},"sourceType":"script"}