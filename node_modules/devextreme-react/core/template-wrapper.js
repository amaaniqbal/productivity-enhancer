/*!
 * devextreme-react
 * Version: 20.2.3
 * Build date: Tue Oct 20 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.TemplateWrapper = void 0;
var events = require("devextreme/events");
var React = require("react");
var ReactDOM = require("react-dom");
var component_base_1 = require("./component-base");
var removalListenerStyle = { display: 'none' };
var TemplateWrapper = /** @class */ (function (_super) {
    __extends(TemplateWrapper, _super);
    function TemplateWrapper(props) {
        var _this = _super.call(this, props) || this;
        _this._removalListenerRef = React.createRef();
        _this.state = { removalListenerRequired: false };
        _this._onDxRemove = _this._onDxRemove.bind(_this);
        return _this;
    }
    Object.defineProperty(TemplateWrapper.prototype, "_listenerElement", {
        get: function () {
            return this._removalListenerRef.current;
        },
        enumerable: false,
        configurable: true
    });
    TemplateWrapper.prototype.render = function () {
        var removalListener = this.state.removalListenerRequired
            ? React.createElement('span', { style: removalListenerStyle, ref: this._removalListenerRef })
            : undefined;
        return ReactDOM.createPortal(React.createElement(React.Fragment, null, this.props.content, removalListener), this.props.container);
    };
    TemplateWrapper.prototype.componentDidMount = function () {
        var _a, _b;
        (_b = (_a = this.props).onRendered) === null || _b === void 0 ? void 0 : _b.call(_a);
        this._subscribeOnRemove();
    };
    TemplateWrapper.prototype.componentDidUpdate = function () {
        this._subscribeOnRemove();
    };
    TemplateWrapper.prototype.componentWillUnmount = function () {
        // Let React remove it itself
        var node = ReactDOM.findDOMNode(this);
        if (node) {
            this.props.container.appendChild(node);
        }
        if (this._listenerElement) {
            this.props.container.appendChild(this._listenerElement);
        }
    };
    TemplateWrapper.prototype._subscribeOnRemove = function () {
        var node = ReactDOM.findDOMNode(this);
        if (node && node.nodeType === Node.ELEMENT_NODE) {
            this._subscribeOnElementRemoval(node);
            return;
        }
        if (!this.state.removalListenerRequired) {
            this.setState({ removalListenerRequired: true });
            return;
        }
        if (this._listenerElement) {
            this._subscribeOnElementRemoval(this._listenerElement);
        }
    };
    TemplateWrapper.prototype._subscribeOnElementRemoval = function (element) {
        events.off(element, component_base_1.DX_REMOVE_EVENT, this._onDxRemove);
        events.one(element, component_base_1.DX_REMOVE_EVENT, this._onDxRemove);
    };
    TemplateWrapper.prototype._onDxRemove = function () {
        this.props.onRemoved();
    };
    return TemplateWrapper;
}(React.PureComponent));
exports.TemplateWrapper = TemplateWrapper;
