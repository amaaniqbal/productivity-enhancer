/**
 * DevExtreme (ui/scheduler/shaders/ui.scheduler.current_time_shader.vertical.js)
 * Version: 20.2.3
 * Build date: Tue Oct 20 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
"use strict";
exports.default = void 0;
var _renderer = _interopRequireDefault(require("../../../core/renderer"));
var _uiScheduler = _interopRequireDefault(require("../shaders/ui.scheduler.current_time_shader"));

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}

function _typeof(obj) {
    "@babel/helpers - typeof";
    if ("function" === typeof Symbol && "symbol" === typeof Symbol.iterator) {
        _typeof = function(obj) {
            return typeof obj
        }
    } else {
        _typeof = function(obj) {
            return obj && "function" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj
        }
    }
    return _typeof(obj)
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function")
    }
}

function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) {
            descriptor.writable = true
        }
        Object.defineProperty(target, descriptor.key, descriptor)
    }
}

function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) {
        _defineProperties(Constructor.prototype, protoProps)
    }
    if (staticProps) {
        _defineProperties(Constructor, staticProps)
    }
    return Constructor
}

function _get(target, property, receiver) {
    if ("undefined" !== typeof Reflect && Reflect.get) {
        _get = Reflect.get
    } else {
        _get = function(target, property, receiver) {
            var base = _superPropBase(target, property);
            if (!base) {
                return
            }
            var desc = Object.getOwnPropertyDescriptor(base, property);
            if (desc.get) {
                return desc.get.call(receiver)
            }
            return desc.value
        }
    }
    return _get(target, property, receiver || target)
}

function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
        object = _getPrototypeOf(object);
        if (null === object) {
            break
        }
    }
    return object
}

function _inherits(subClass, superClass) {
    if ("function" !== typeof superClass && null !== superClass) {
        throw new TypeError("Super expression must either be null or a function")
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) {
        _setPrototypeOf(subClass, superClass)
    }
}

function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function(o, p) {
        o.__proto__ = p;
        return o
    };
    return _setPrototypeOf(o, p)
}

function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function() {
        var result, Super = _getPrototypeOf(Derived);
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget)
        } else {
            result = Super.apply(this, arguments)
        }
        return _possibleConstructorReturn(this, result)
    }
}

function _possibleConstructorReturn(self, call) {
    if (call && ("object" === _typeof(call) || "function" === typeof call)) {
        return call
    }
    return _assertThisInitialized(self)
}

function _assertThisInitialized(self) {
    if (void 0 === self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
    }
    return self
}

function _isNativeReflectConstruct() {
    if ("undefined" === typeof Reflect || !Reflect.construct) {
        return false
    }
    if (Reflect.construct.sham) {
        return false
    }
    if ("function" === typeof Proxy) {
        return true
    }
    try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));
        return true
    } catch (e) {
        return false
    }
}

function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function(o) {
        return o.__proto__ || Object.getPrototypeOf(o)
    };
    return _getPrototypeOf(o)
}
var DATE_TIME_SHADER_ALL_DAY_CLASS = "dx-scheduler-date-time-shader-all-day";
var DATE_TIME_SHADER_TOP_CLASS = "dx-scheduler-date-time-shader-top";
var DATE_TIME_SHADER_BOTTOM_CLASS = "dx-scheduler-date-time-shader-bottom";
var VerticalCurrentTimeShader = function(_CurrentTimeShader) {
    _inherits(VerticalCurrentTimeShader, _CurrentTimeShader);
    var _super = _createSuper(VerticalCurrentTimeShader);

    function VerticalCurrentTimeShader() {
        _classCallCheck(this, VerticalCurrentTimeShader);
        return _super.apply(this, arguments)
    }
    _createClass(VerticalCurrentTimeShader, [{
        key: "renderShader",
        value: function() {
            var shaderHeight = this._getShaderHeight();
            var maxHeight = this._getShaderMaxHeight();
            var isSolidShader = shaderHeight > maxHeight;
            if (shaderHeight >= 0) {
                if (shaderHeight > maxHeight) {
                    shaderHeight = maxHeight
                }
                this._$shader.height(shaderHeight);
                var groupCount = this._workSpace._getGroupCount() || 1;
                if (this._workSpace.isGroupedByDate()) {
                    this._renderGroupedByDateShaderParts(groupCount, shaderHeight, maxHeight, isSolidShader)
                } else {
                    this._renderShaderParts(groupCount, shaderHeight, maxHeight, isSolidShader)
                }
            }
        }
    }, {
        key: "_renderShaderParts",
        value: function(groupCount, shaderHeight, maxHeight, isSolidShader) {
            for (var i = 0; i < groupCount; i++) {
                var shaderWidth = this._getShaderWidth(i);
                this._renderTopShader(this._$shader, shaderHeight, shaderWidth, i);
                !isSolidShader && this._renderBottomShader(this._$shader, maxHeight - shaderHeight, shaderWidth, i);
                this._renderAllDayShader(shaderWidth, i)
            }
        }
    }, {
        key: "_renderGroupedByDateShaderParts",
        value: function(groupCount, shaderHeight, maxHeight, isSolidShader) {
            var shaderWidth = this._getShaderWidth(0);
            var bottomShaderWidth = (shaderWidth - this._workSpace.getCellWidth()) * groupCount + this._workSpace.getCellWidth();
            this._renderTopShader(this._$shader, shaderHeight, shaderWidth * groupCount, 0);
            !isSolidShader && this._renderBottomShader(this._$shader, maxHeight - shaderHeight, bottomShaderWidth, 0);
            this._renderAllDayShader(shaderWidth * groupCount, 0)
        }
    }, {
        key: "_renderTopShader",
        value: function($shader, height, width, i) {
            this._$topShader = (0, _renderer.default)("<div>").addClass(DATE_TIME_SHADER_TOP_CLASS);
            width && this._$topShader.width(width) && this._$topShader.height(height);
            this._$topShader.css("marginTop", this._getShaderTopOffset(i));
            this._$topShader.css("left", this._getShaderOffset(i, width));
            $shader.append(this._$topShader)
        }
    }, {
        key: "_renderBottomShader",
        value: function($shader, height, width, i) {
            this._$bottomShader = (0, _renderer.default)("<div>").addClass(DATE_TIME_SHADER_BOTTOM_CLASS);
            this._$bottomShader.width(width - this._workSpace.getCellWidth()) && this._$bottomShader.height(height);
            this._$bottomShader.css("left", this._getShaderOffset(i, width - this._workSpace.getCellWidth()));
            $shader.append(this._$bottomShader)
        }
    }, {
        key: "_renderAllDayShader",
        value: function(shaderWidth, i) {
            if (this._workSpace.option("showAllDayPanel")) {
                this._$allDayIndicator = (0, _renderer.default)("<div>").addClass(DATE_TIME_SHADER_ALL_DAY_CLASS);
                this._$allDayIndicator.height(this._workSpace.getAllDayHeight());
                this._$allDayIndicator.width(shaderWidth);
                this._$allDayIndicator.css("left", this._getShaderOffset(i, shaderWidth));
                this._workSpace._$allDayPanel.prepend(this._$allDayIndicator)
            }
        }
    }, {
        key: "_getShaderOffset",
        value: function(i, width) {
            return this._workSpace.getGroupedStrategy().getShaderOffset(i, width)
        }
    }, {
        key: "_getShaderTopOffset",
        value: function(i) {
            return this._workSpace.getGroupedStrategy().getShaderTopOffset(i)
        }
    }, {
        key: "_getShaderHeight",
        value: function(i, width) {
            return this._workSpace.getGroupedStrategy().getShaderHeight()
        }
    }, {
        key: "_getShaderMaxHeight",
        value: function(i, width) {
            return this._workSpace.getGroupedStrategy().getShaderMaxHeight()
        }
    }, {
        key: "_getShaderWidth",
        value: function(i) {
            return this._workSpace.getGroupedStrategy().getShaderWidth(i)
        }
    }, {
        key: "clean",
        value: function() {
            _get(_getPrototypeOf(VerticalCurrentTimeShader.prototype), "clean", this).call(this);
            this._workSpace && this._workSpace._$allDayPanel && this._workSpace._$allDayPanel.find("." + DATE_TIME_SHADER_ALL_DAY_CLASS).remove()
        }
    }]);
    return VerticalCurrentTimeShader
}(_uiScheduler.default);
var _default = VerticalCurrentTimeShader;
exports.default = _default;
module.exports = exports.default;
