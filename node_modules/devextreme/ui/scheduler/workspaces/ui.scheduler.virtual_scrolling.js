/**
 * DevExtreme (ui/scheduler/workspaces/ui.scheduler.virtual_scrolling.js)
 * Version: 20.2.3
 * Build date: Tue Oct 20 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
"use strict";
exports.default = void 0;
var _dom_adapter = _interopRequireDefault(require("../../../core/dom_adapter"));
var _events_engine = _interopRequireDefault(require("../../../events/core/events_engine"));
var _window = require("../../../core/utils/window");
var _index = require("../../../events/utils/index");

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function")
    }
}

function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) {
            descriptor.writable = true
        }
        Object.defineProperty(target, descriptor.key, descriptor)
    }
}

function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) {
        _defineProperties(Constructor.prototype, protoProps)
    }
    if (staticProps) {
        _defineProperties(Constructor, staticProps)
    }
    return Constructor
}
var ROW_HEIGHT = 50;
var MIN_SCROLL_OFFSET = 10;
var VIRTUAL_APPOINTMENTS_RENDER_TIMEOUT = 15;
var DOCUMENT_SCROLL_EVENT_NAMESPACE = (0, _index.addNamespace)("scroll", "dxSchedulerVirtualScrolling");
var VirtualScrollingDispatcher = function() {
    function VirtualScrollingDispatcher(workspace) {
        _classCallCheck(this, VirtualScrollingDispatcher);
        this._workspace = workspace;
        this._virtualScrolling = null;
        this._rowHeight = ROW_HEIGHT;
        this._createVirtualScrolling();
        this._attachScrollableEvents()
    }
    _createClass(VirtualScrollingDispatcher, [{
        key: "getRenderTimeout",
        value: function() {
            return VIRTUAL_APPOINTMENTS_RENDER_TIMEOUT
        }
    }, {
        key: "getState",
        value: function() {
            return this.virtualScrolling.getState()
        }
    }, {
        key: "calculateCoordinatesByDataAndPosition",
        value: function(cellData, position, date) {
            return this.virtualScrolling.calculateCoordinatesByDataAndPosition(cellData, position, date)
        }
    }, {
        key: "dispose",
        value: function() {
            if (this._onScrollHandler) {
                _events_engine.default.off(this.document, DOCUMENT_SCROLL_EVENT_NAMESPACE, this._onScrollHandler)
            }
        }
    }, {
        key: "_createVirtualScrolling",
        value: function() {
            this.virtualScrolling = new VirtualScrolling(this.workspace, this.viewportHeight, this.rowHeight)
        }
    }, {
        key: "_attachScrollableEvents",
        value: function() {
            this.height ? this._attachScrollableScroll() : this._attachWindowScroll()
        }
    }, {
        key: "_attachScrollableScroll",
        value: function() {
            var _this = this;
            var scrollable = this.workspace.getScrollable();
            var currentOnScroll = scrollable.option("onScroll");
            scrollable.option("onScroll", function(e) {
                null === currentOnScroll || void 0 === currentOnScroll ? void 0 : currentOnScroll.apply(scrollable, [e]);
                _this._process(null === e || void 0 === e ? void 0 : e.scrollOffset)
            })
        }
    }, {
        key: "_attachWindowScroll",
        value: function() {
            var _this2 = this;
            var window = (0, _window.getWindow)();
            this._onScrollHandler = this.workspace._createAction(function() {
                var scrollX = window.scrollX,
                    scrollY = window.scrollY;
                if (scrollX >= _this2.minScrollOffset || scrollY >= _this2.minScrollOffset) {
                    _this2._process({
                        left: scrollX,
                        top: scrollY
                    })
                }
            });
            _events_engine.default.on(this.document, DOCUMENT_SCROLL_EVENT_NAMESPACE, this._onScrollHandler)
        }
    }, {
        key: "_process",
        value: function(scrollPosition) {
            scrollPosition && this.virtualScrolling.updateState(scrollPosition) && this._updateRender()
        }
    }, {
        key: "updateDimensions",
        value: function() {
            var cellHeight = this.workspace.getCellHeight(false);
            if (cellHeight !== this.rowHeight) {
                this.rowHeight = cellHeight;
                this._createVirtualScrolling();
                this._renderDateTable()
            }
        }
    }, {
        key: "_updateRender",
        value: function() {
            this._renderDateTable();
            this._renderAppointments()
        }
    }, {
        key: "_renderDateTable",
        value: function() {
            this.workspace.renderRWorkspace(false)
        }
    }, {
        key: "_renderAppointments",
        value: function() {
            var workspace = this.workspace;
            var renderTimeout = this.getRenderTimeout();
            if (renderTimeout >= 0) {
                clearTimeout(this._renderAppointmentTimeout);
                this._renderAppointmentTimeout = setTimeout(function() {
                    return workspace.invoke("renderAppointments")
                }, renderTimeout)
            } else {
                workspace.invoke("renderAppointments")
            }
        }
    }, {
        key: "workspace",
        get: function() {
            return this._workspace
        }
    }, {
        key: "isVirtualScrolling",
        get: function() {
            return this.workspace.isVirtualScrolling()
        }
    }, {
        key: "minScrollOffset",
        get: function() {
            return MIN_SCROLL_OFFSET
        }
    }, {
        key: "virtualScrolling",
        get: function() {
            return this._virtualScrolling
        },
        set: function(value) {
            this._virtualScrolling = value
        }
    }, {
        key: "document",
        get: function() {
            return _dom_adapter.default.getDocument()
        }
    }, {
        key: "height",
        get: function() {
            return this.workspace.invoke("getOption", "height")
        }
    }, {
        key: "rowHeight",
        get: function() {
            return this._rowHeight
        },
        set: function(value) {
            this._rowHeight = value
        }
    }, {
        key: "viewportHeight",
        get: function() {
            return this.height ? this.workspace.$element().height() : (0, _window.getWindow)().innerHeight
        }
    }]);
    return VirtualScrollingDispatcher
}();
exports.default = VirtualScrollingDispatcher;
var VirtualScrolling = function() {
    function VirtualScrolling(workspace, viewportHeight, rowHeight) {
        _classCallCheck(this, VirtualScrolling);
        this._workspace = workspace;
        this._viewportHeight = viewportHeight;
        this._renderAppointmentTimeout = null;
        this._rowHeight = rowHeight;
        this._init()
    }
    _createClass(VirtualScrolling, [{
        key: "getWorkspace",
        value: function() {
            return this._workspace
        }
    }, {
        key: "getState",
        value: function() {
            return this._state
        }
    }, {
        key: "_getPageSize",
        value: function() {
            return Math.ceil(this.viewportHeight / this.rowHeight)
        }
    }, {
        key: "_getOutlineCount",
        value: function() {
            return Math.floor(this._getPageSize() / 2)
        }
    }, {
        key: "_init",
        value: function() {
            var scrollPosition = {
                top: 0,
                left: 0
            };
            this._state = {
                pageSize: this._getPageSize(),
                prevScrollPosition: scrollPosition,
                startIndex: -1,
                rowCount: 0,
                topVirtualRowCount: 0,
                bottomVirtualRowCount: 0,
                topOutlineCount: 0,
                bottomOutlineCount: 0,
                topVirtualRowHeight: 0,
                bottomVirtualRowHeight: 0,
                topOutlineHeight: 0,
                bottomOutlineHeight: 0
            };
            this.updateState(scrollPosition)
        }
    }, {
        key: "needUpdateState",
        value: function(scrollPosition) {
            var state = this.getState();
            var top = scrollPosition.top;
            var currentTopPosition = state.prevScrollPosition.top;
            var currentTopRowsCount = Math.floor(currentTopPosition / this.rowHeight);
            var isFirstInitialization = state.startIndex < 0;
            var topRowsCount = Math.floor(top / this.rowHeight);
            var isStartIndexChanged = Math.abs(currentTopRowsCount - topRowsCount) > this._getOutlineCount();
            return isFirstInitialization || isStartIndexChanged
        }
    }, {
        key: "updateState",
        value: function(scrollPosition) {
            if (!this.needUpdateState(scrollPosition)) {
                return false
            }
            var topRowsInfo = this._calcTopRowsInfo(scrollPosition);
            var topRowsDelta = this._calcTopRowsDelta(topRowsInfo);
            var _this$_calcBottomRows = this._calcBottomRowsInfo(topRowsDelta),
                bottomOutlineCount = _this$_calcBottomRows.bottomOutlineCount,
                bottomVirtualRowCount = _this$_calcBottomRows.bottomVirtualRowCount,
                rowCountWithBottom = _this$_calcBottomRows.rowCountWithBottom;
            var topVirtualRowCount = topRowsInfo.topVirtualRowCount,
                topOutlineCount = topRowsInfo.topOutlineCount;
            var rowCount = topOutlineCount + rowCountWithBottom + bottomOutlineCount;
            var top = scrollPosition.top;
            var topRowsCount = Math.floor(top / this.rowHeight);
            var state = this.getState();
            state.prevScrollPosition = scrollPosition;
            state.startIndex = topRowsCount - topOutlineCount;
            state.topVirtualRowCount = topVirtualRowCount;
            state.topOutlineCount = topOutlineCount;
            state.rowCount = rowCount;
            state.bottomOutlineCount = bottomOutlineCount;
            state.bottomVirtualRowCount = bottomVirtualRowCount;
            this._updateStateCore();
            return true
        }
    }, {
        key: "calculateCoordinatesByDataAndPosition",
        value: function(cellData, position, date) {
            var workSpace = this._workspace;
            var rowIndex = position.rowIndex,
                columnIndex = position.columnIndex;
            var startDate = cellData.startDate,
                endDate = cellData.endDate,
                allDay = cellData.allDay;
            var timeToScroll = date.getTime();
            var cellStartTime = startDate.getTime();
            var cellEndTime = endDate.getTime();
            var scrollInCell = allDay ? 0 : (timeToScroll - cellStartTime) / (cellEndTime - cellStartTime);
            var cellWidth = workSpace.getCellWidth();
            var top = (rowIndex + scrollInCell) * this.rowHeight;
            var left = cellWidth * columnIndex;
            if (workSpace.option("rtlEnabled")) {
                left = workSpace.getScrollableOuterWidth() - left
            }
            return {
                top: top,
                left: left
            }
        }
    }, {
        key: "_calcTopRowsInfo",
        value: function(scrollPosition) {
            var top = scrollPosition.top;
            var topVirtualRowCount = Math.floor(top / this.rowHeight);
            var topOutlineCount = Math.min(topVirtualRowCount, this._getOutlineCount());
            topVirtualRowCount -= topOutlineCount;
            return {
                topVirtualRowCount: topVirtualRowCount,
                topOutlineCount: topOutlineCount
            }
        }
    }, {
        key: "_calcTopRowsDelta",
        value: function(topRowsInfo) {
            var topVirtualRowCount = topRowsInfo.topVirtualRowCount,
                topOutlineCount = topRowsInfo.topOutlineCount;
            var workspace = this.getWorkspace();
            var groupCount = workspace._getGroupCount();
            var isVerticalGrouping = workspace._isVerticalGroupedWorkSpace();
            var totalRowCount = workspace._getTotalRowCount(groupCount, isVerticalGrouping);
            return totalRowCount - topVirtualRowCount - topOutlineCount
        }
    }, {
        key: "_calcBottomRowsInfo",
        value: function(topRowsDelta) {
            var _this$getState = this.getState(),
                pageSize = _this$getState.pageSize;
            var rowCountWithBottom = topRowsDelta >= pageSize ? pageSize : topRowsDelta;
            var bottomVirtualRowCount = topRowsDelta - rowCountWithBottom;
            var bottomOutlineCount = bottomVirtualRowCount > 0 ? Math.min(bottomVirtualRowCount, this._getOutlineCount()) : 0;
            if (bottomVirtualRowCount > 0) {
                bottomVirtualRowCount -= bottomOutlineCount
            }
            return {
                bottomVirtualRowCount: bottomVirtualRowCount,
                bottomOutlineCount: bottomOutlineCount,
                rowCountWithBottom: rowCountWithBottom
            }
        }
    }, {
        key: "_updateStateCore",
        value: function() {
            var state = this.getState();
            var topVirtualRowCount = state.topVirtualRowCount;
            var bottomVirtualRowCount = state.bottomVirtualRowCount;
            var topOutlineCount = state.topOutlineCount;
            var bottomOutlineCount = state.bottomOutlineCount;
            var prevTopVirtualRowHeight = state.topVirtualRowHeight;
            var prevBottomVirtualRowHeight = state.bottomVirtualRowHeight;
            var prevTopOutlineHeight = state.topOutlineHeight;
            var prevBottomOutlineHeight = state.bottomOutlineHeight;
            var topVirtualRowHeight = this.rowHeight * topVirtualRowCount;
            var bottomVirtualRowHeight = this.rowHeight * bottomVirtualRowCount;
            var topOutlineHeight = this.rowHeight * topOutlineCount;
            var bottomOutlineHeight = this.rowHeight * bottomOutlineCount;
            var prevTopVirtualHeight = prevTopVirtualRowHeight + prevTopOutlineHeight;
            var topVirtualHeight = topVirtualRowHeight + topOutlineHeight;
            var prevBottomVirtualHeight = prevBottomVirtualRowHeight + prevBottomOutlineHeight;
            var bottomVirtualHeight = bottomVirtualRowHeight + bottomOutlineHeight;
            var isAppend = prevTopVirtualHeight < topVirtualHeight;
            var isPrepend = prevBottomVirtualHeight < bottomVirtualHeight;
            var needAddRows = isAppend || isPrepend;
            if (needAddRows) {
                state.topVirtualRowHeight = topVirtualRowHeight;
                state.bottomVirtualRowHeight = bottomVirtualRowHeight
            }
        }
    }, {
        key: "viewportHeight",
        get: function() {
            return this._viewportHeight
        }
    }, {
        key: "rowHeight",
        get: function() {
            return this._rowHeight
        }
    }]);
    return VirtualScrolling
}();
module.exports = exports.default;
