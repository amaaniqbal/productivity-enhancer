/**
 * DevExtreme (ui/scheduler/workspaces/ui.scheduler.work_space_month.js)
 * Version: 20.2.3
 * Build date: Tue Oct 20 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
"use strict";
exports.default = void 0;
var _renderer = _interopRequireDefault(require("../../../core/renderer"));
var _common = require("../../../core/utils/common");
var _component_registrator = _interopRequireDefault(require("../../../core/component_registrator"));
var _uiSchedulerWork_space = _interopRequireDefault(require("./ui.scheduler.work_space.indicator"));
var _date = _interopRequireDefault(require("../../../core/utils/date"));
var _position = require("../../../core/utils/position");
var _date2 = _interopRequireDefault(require("../../../localization/date"));

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}

function _typeof(obj) {
    "@babel/helpers - typeof";
    if ("function" === typeof Symbol && "symbol" === typeof Symbol.iterator) {
        _typeof = function(obj) {
            return typeof obj
        }
    } else {
        _typeof = function(obj) {
            return obj && "function" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj
        }
    }
    return _typeof(obj)
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function")
    }
}

function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) {
            descriptor.writable = true
        }
        Object.defineProperty(target, descriptor.key, descriptor)
    }
}

function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) {
        _defineProperties(Constructor.prototype, protoProps)
    }
    if (staticProps) {
        _defineProperties(Constructor, staticProps)
    }
    return Constructor
}

function _get(target, property, receiver) {
    if ("undefined" !== typeof Reflect && Reflect.get) {
        _get = Reflect.get
    } else {
        _get = function(target, property, receiver) {
            var base = _superPropBase(target, property);
            if (!base) {
                return
            }
            var desc = Object.getOwnPropertyDescriptor(base, property);
            if (desc.get) {
                return desc.get.call(receiver)
            }
            return desc.value
        }
    }
    return _get(target, property, receiver || target)
}

function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
        object = _getPrototypeOf(object);
        if (null === object) {
            break
        }
    }
    return object
}

function _inherits(subClass, superClass) {
    if ("function" !== typeof superClass && null !== superClass) {
        throw new TypeError("Super expression must either be null or a function")
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) {
        _setPrototypeOf(subClass, superClass)
    }
}

function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function(o, p) {
        o.__proto__ = p;
        return o
    };
    return _setPrototypeOf(o, p)
}

function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function() {
        var result, Super = _getPrototypeOf(Derived);
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget)
        } else {
            result = Super.apply(this, arguments)
        }
        return _possibleConstructorReturn(this, result)
    }
}

function _possibleConstructorReturn(self, call) {
    if (call && ("object" === _typeof(call) || "function" === typeof call)) {
        return call
    }
    return _assertThisInitialized(self)
}

function _assertThisInitialized(self) {
    if (void 0 === self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
    }
    return self
}

function _isNativeReflectConstruct() {
    if ("undefined" === typeof Reflect || !Reflect.construct) {
        return false
    }
    if (Reflect.construct.sham) {
        return false
    }
    if ("function" === typeof Proxy) {
        return true
    }
    try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));
        return true
    } catch (e) {
        return false
    }
}

function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function(o) {
        return o.__proto__ || Object.getPrototypeOf(o)
    };
    return _getPrototypeOf(o)
}
var MONTH_CLASS = "dx-scheduler-work-space-month";
var DATE_TABLE_CURRENT_DATE_CLASS = "dx-scheduler-date-table-current-date";
var DATE_TABLE_FIRST_OF_MONTH_CLASS = "dx-scheduler-date-table-first-of-month";
var DATE_TABLE_OTHER_MONTH_DATE_CLASS = "dx-scheduler-date-table-other-month";
var DATE_TABLE_SCROLLABLE_FIXED_CLASS = "dx-scheduler-scrollable-fixed-content";
var DAYS_IN_WEEK = 7;
var DAY_IN_MILLISECONDS = 864e5;
var toMs = _date.default.dateToMilliseconds;
var SchedulerWorkSpaceMonth = function(_SchedulerWorkSpace) {
    _inherits(SchedulerWorkSpaceMonth, _SchedulerWorkSpace);
    var _super = _createSuper(SchedulerWorkSpaceMonth);

    function SchedulerWorkSpaceMonth() {
        _classCallCheck(this, SchedulerWorkSpaceMonth);
        return _super.apply(this, arguments)
    }
    _createClass(SchedulerWorkSpaceMonth, [{
        key: "_toggleFixedScrollableClass",
        value: function() {
            this._dateTableScrollable.$content().toggleClass(DATE_TABLE_SCROLLABLE_FIXED_CLASS, !this._isWorkSpaceWithCount() && !this._isVerticalGroupedWorkSpace())
        }
    }, {
        key: "_getElementClass",
        value: function() {
            return MONTH_CLASS
        }
    }, {
        key: "_getRowCount",
        value: function() {
            return this._isWorkSpaceWithCount() ? 4 * this.option("intervalCount") + 2 : 6
        }
    }, {
        key: "_getCellCount",
        value: function() {
            return DAYS_IN_WEEK
        }
    }, {
        key: "_getDateByIndex",
        value: function(headerIndex) {
            var resultDate = new Date(this._firstViewDate);
            resultDate.setDate(this._firstViewDate.getDate() + headerIndex);
            return resultDate
        }
    }, {
        key: "_getFormat",
        value: function() {
            return this._formatWeekday
        }
    }, {
        key: "_calculateCellIndex",
        value: function(rowIndex, cellIndex) {
            if (this._isVerticalGroupedWorkSpace()) {
                rowIndex %= this._getRowCount()
            } else {
                cellIndex %= this._getCellCount()
            }
            return rowIndex * this._getCellCount() + cellIndex
        }
    }, {
        key: "_getInterval",
        value: function() {
            return DAY_IN_MILLISECONDS
        }
    }, {
        key: "_getIntervalBetween",
        value: function(currentDate) {
            var firstViewDate = this.getStartViewDate();
            var timeZoneOffset = _date.default.getTimezonesDifference(firstViewDate, currentDate);
            return currentDate.getTime() - (firstViewDate.getTime() - 36e5 * this.option("startDayHour")) - timeZoneOffset
        }
    }, {
        key: "_getDateByCellIndexes",
        value: function(rowIndex, cellIndex) {
            var date = _get(_getPrototypeOf(SchedulerWorkSpaceMonth.prototype), "_getDateByCellIndexes", this).call(this, rowIndex, cellIndex);
            this._setStartDayHour(date);
            return date
        }
    }, {
        key: "getCellWidth",
        value: function() {
            var _this = this;
            return this.cache.get("cellWidth", function() {
                var DAYS_IN_WEEK = 7;
                var averageWidth = 0;
                _this._getCells().slice(0, DAYS_IN_WEEK).each(function(index, element) {
                    return averageWidth += (0, _position.getBoundingRect)(element).width
                });
                return averageWidth / DAYS_IN_WEEK
            })
        }
    }, {
        key: "_calculateHiddenInterval",
        value: function() {
            return 0
        }
    }, {
        key: "_insertAllDayRowsIntoDateTable",
        value: function() {
            return false
        }
    }, {
        key: "_getCellCoordinatesByIndex",
        value: function(index) {
            var rowIndex = Math.floor(index / this._getCellCount());
            var cellIndex = index - this._getCellCount() * rowIndex;
            return {
                rowIndex: rowIndex,
                cellIndex: cellIndex
            }
        }
    }, {
        key: "_createWorkSpaceElements",
        value: function() {
            if (this._isVerticalGroupedWorkSpace()) {
                this._createWorkSpaceScrollableElements()
            } else {
                _get(_getPrototypeOf(SchedulerWorkSpaceMonth.prototype), "_createWorkSpaceElements", this).call(this)
            }
        }
    }, {
        key: "_needCreateCrossScrolling",
        value: function() {
            return this.option("crossScrollingEnabled") || this._isVerticalGroupedWorkSpace()
        }
    }, {
        key: "_renderTimePanel",
        value: function() {
            return (0, _common.noop)()
        }
    }, {
        key: "_renderAllDayPanel",
        value: function() {
            return (0, _common.noop)()
        }
    }, {
        key: "_getTableAllDay",
        value: function() {
            return (0, _common.noop)()
        }
    }, {
        key: "_toggleAllDayVisibility",
        value: function() {
            return (0, _common.noop)()
        }
    }, {
        key: "_changeAllDayVisibility",
        value: function() {
            return (0, _common.noop)()
        }
    }, {
        key: "_setFirstViewDate",
        value: function() {
            var firstMonthDate = _date.default.getFirstMonthDate(this._getViewStartByOptions());
            this._firstViewDate = _date.default.getFirstWeekDate(firstMonthDate, this.option("firstDayOfWeek") || _date2.default.firstDayOfWeekIndex());
            this._setStartDayHour(this._firstViewDate);
            var date = this._getViewStartByOptions();
            this._minVisibleDate = new Date(date.setDate(1));
            this._maxVisibleDate = new Date(new Date(date.setMonth(date.getMonth() + this.option("intervalCount"))).setDate(0))
        }
    }, {
        key: "_getViewStartByOptions",
        value: function() {
            if (!this.option("startDate")) {
                return new Date(this.option("currentDate").getTime())
            } else {
                var startDate = this._getStartViewDate();
                var currentDate = this.option("currentDate");
                var diff = startDate.getTime() <= currentDate.getTime() ? 1 : -1;
                var endDate = new Date(new Date(this._getStartViewDate().setMonth(this._getStartViewDate().getMonth() + diff * this.option("intervalCount"))));
                while (!this._dateInRange(currentDate, startDate, endDate, diff)) {
                    startDate = new Date(endDate);
                    if (diff > 0) {
                        startDate.setDate(1)
                    }
                    endDate = new Date(new Date(endDate.setMonth(endDate.getMonth() + diff * this.option("intervalCount"))))
                }
                return diff > 0 ? startDate : endDate
            }
        }
    }, {
        key: "_getStartViewDate",
        value: function() {
            var firstMonthDate = _date.default.getFirstMonthDate(this.option("startDate"));
            return firstMonthDate
        }
    }, {
        key: "_renderTableBody",
        value: function(options) {
            options.getCellText = this._getCellText.bind(this);
            _get(_getPrototypeOf(SchedulerWorkSpaceMonth.prototype), "_renderTableBody", this).call(this, options)
        }
    }, {
        key: "_getCellText",
        value: function(rowIndex, cellIndex) {
            if (this.isGroupedByDate()) {
                cellIndex = Math.floor(cellIndex / this._getGroupCount())
            } else {
                cellIndex %= this._getCellCount()
            }
            var date = this._getDate(rowIndex, cellIndex);
            if (this._isWorkSpaceWithCount() && this._isFirstDayOfMonth(date)) {
                return this._formatMonthAndDay(date)
            }
            return _date2.default.format(date, "dd")
        }
    }, {
        key: "_formatMonthAndDay",
        value: function(date) {
            var monthName = _date2.default.getMonthNames("abbreviated")[date.getMonth()];
            return [monthName, _date2.default.format(date, "day")].join(" ")
        }
    }, {
        key: "_getDate",
        value: function(week, day) {
            var result = new Date(this._firstViewDate);
            var lastRowInDay = this._getRowCount();
            result.setDate(result.getDate() + week % lastRowInDay * DAYS_IN_WEEK + day);
            return result
        }
    }, {
        key: "_updateIndex",
        value: function(index) {
            return index
        }
    }, {
        key: "_prepareCellData",
        value: function(rowIndex, cellIndex, cell) {
            var data = _get(_getPrototypeOf(SchedulerWorkSpaceMonth.prototype), "_prepareCellData", this).call(this, rowIndex, cellIndex, cell);
            var $cell = (0, _renderer.default)(cell);
            $cell.toggleClass(DATE_TABLE_CURRENT_DATE_CLASS, this._isCurrentDate(data.startDate)).toggleClass(DATE_TABLE_FIRST_OF_MONTH_CLASS, this._isFirstDayOfMonth(data.startDate)).toggleClass(DATE_TABLE_OTHER_MONTH_DATE_CLASS, this._isOtherMonth(data.startDate));
            return data
        }
    }, {
        key: "_isCurrentDate",
        value: function(cellDate) {
            var today = new Date;
            return _date.default.sameDate(cellDate, today)
        }
    }, {
        key: "_isFirstDayOfMonth",
        value: function(cellDate) {
            return this._isWorkSpaceWithCount() && 1 === cellDate.getDate()
        }
    }, {
        key: "_isOtherMonth",
        value: function(cellDate) {
            return !_date.default.dateInRange(cellDate, this._minVisibleDate, this._maxVisibleDate, "date")
        }
    }, {
        key: "needRenderDateTimeIndication",
        value: function() {
            return false
        }
    }, {
        key: "getCellDuration",
        value: function() {
            return 36e5 * this._calculateDayDuration()
        }
    }, {
        key: "getIntervalDuration",
        value: function() {
            return toMs("day")
        }
    }, {
        key: "getTimePanelWidth",
        value: function() {
            return 0
        }
    }, {
        key: "getPositionShift",
        value: function(timeShift) {
            return {
                cellPosition: timeShift * this.getCellWidth(),
                top: 0,
                left: 0
            }
        }
    }, {
        key: "getCellCountToLastViewDate",
        value: function(date) {
            var firstDateTime = date.getTime();
            var lastDateTime = this.getEndViewDate().getTime();
            var dayDurationInMs = this.getCellDuration();
            return Math.ceil((lastDateTime - firstDateTime) / dayDurationInMs)
        }
    }, {
        key: "supportAllDayRow",
        value: function() {
            return false
        }
    }, {
        key: "keepOriginalHours",
        value: function() {
            return true
        }
    }, {
        key: "calculateEndDate",
        value: function(startDate) {
            var startDateCopy = new Date(startDate);
            return new Date(startDateCopy.setHours(this.option("endDayHour")))
        }
    }, {
        key: "getWorkSpaceLeftOffset",
        value: function() {
            return 0
        }
    }, {
        key: "needApplyCollectorOffset",
        value: function() {
            return true
        }
    }, {
        key: "_getDateTableBorderOffset",
        value: function() {
            return this._getDateTableBorder()
        }
    }, {
        key: "_getCellPositionByIndex",
        value: function(index, groupIndex) {
            var position = _get(_getPrototypeOf(SchedulerWorkSpaceMonth.prototype), "_getCellPositionByIndex", this).call(this, index, groupIndex);
            var rowIndex = this._getCellCoordinatesByIndex(index).rowIndex;
            var calculatedTopOffset;
            if (!this._isVerticalGroupedWorkSpace()) {
                calculatedTopOffset = this.getCellHeight() * rowIndex
            } else {
                calculatedTopOffset = this.getCellHeight() * (rowIndex + groupIndex * this._getRowCount())
            }
            if (calculatedTopOffset) {
                position.top = calculatedTopOffset
            }
            return position
        }
    }, {
        key: "_getHeaderDate",
        value: function() {
            return this._getViewStartByOptions()
        }
    }, {
        key: "_supportCompactDropDownAppointments",
        value: function() {
            return false
        }
    }, {
        key: "scrollToTime",
        value: function() {
            return (0, _common.noop)()
        }
    }, {
        key: "_getRowCountWithAllDayRows",
        value: function() {
            return this._getRowCount()
        }
    }]);
    return SchedulerWorkSpaceMonth
}(_uiSchedulerWork_space.default);
(0, _component_registrator.default)("dxSchedulerWorkSpaceMonth", SchedulerWorkSpaceMonth);
var _default = SchedulerWorkSpaceMonth;
exports.default = _default;
module.exports = exports.default;
