/**
 * DevExtreme (ui/scheduler/workspaces/ui.scheduler.timeline_month.js)
 * Version: 20.2.3
 * Build date: Tue Oct 20 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
"use strict";
exports.default = void 0;
var _component_registrator = _interopRequireDefault(require("../../../core/component_registrator"));
var _uiScheduler = _interopRequireDefault(require("./ui.scheduler.timeline"));
var _date = _interopRequireDefault(require("../../../core/utils/date"));

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}

function _typeof(obj) {
    "@babel/helpers - typeof";
    if ("function" === typeof Symbol && "symbol" === typeof Symbol.iterator) {
        _typeof = function(obj) {
            return typeof obj
        }
    } else {
        _typeof = function(obj) {
            return obj && "function" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj
        }
    }
    return _typeof(obj)
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function")
    }
}

function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) {
            descriptor.writable = true
        }
        Object.defineProperty(target, descriptor.key, descriptor)
    }
}

function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) {
        _defineProperties(Constructor.prototype, protoProps)
    }
    if (staticProps) {
        _defineProperties(Constructor, staticProps)
    }
    return Constructor
}

function _get(target, property, receiver) {
    if ("undefined" !== typeof Reflect && Reflect.get) {
        _get = Reflect.get
    } else {
        _get = function(target, property, receiver) {
            var base = _superPropBase(target, property);
            if (!base) {
                return
            }
            var desc = Object.getOwnPropertyDescriptor(base, property);
            if (desc.get) {
                return desc.get.call(receiver)
            }
            return desc.value
        }
    }
    return _get(target, property, receiver || target)
}

function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
        object = _getPrototypeOf(object);
        if (null === object) {
            break
        }
    }
    return object
}

function _inherits(subClass, superClass) {
    if ("function" !== typeof superClass && null !== superClass) {
        throw new TypeError("Super expression must either be null or a function")
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) {
        _setPrototypeOf(subClass, superClass)
    }
}

function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function(o, p) {
        o.__proto__ = p;
        return o
    };
    return _setPrototypeOf(o, p)
}

function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function() {
        var result, Super = _getPrototypeOf(Derived);
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget)
        } else {
            result = Super.apply(this, arguments)
        }
        return _possibleConstructorReturn(this, result)
    }
}

function _possibleConstructorReturn(self, call) {
    if (call && ("object" === _typeof(call) || "function" === typeof call)) {
        return call
    }
    return _assertThisInitialized(self)
}

function _assertThisInitialized(self) {
    if (void 0 === self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
    }
    return self
}

function _isNativeReflectConstruct() {
    if ("undefined" === typeof Reflect || !Reflect.construct) {
        return false
    }
    if (Reflect.construct.sham) {
        return false
    }
    if ("function" === typeof Proxy) {
        return true
    }
    try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));
        return true
    } catch (e) {
        return false
    }
}

function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function(o) {
        return o.__proto__ || Object.getPrototypeOf(o)
    };
    return _getPrototypeOf(o)
}
var TIMELINE_CLASS = "dx-scheduler-timeline-month";
var DAY_IN_MILLISECONDS = 864e5;
var toMs = _date.default.dateToMilliseconds;
var SchedulerTimelineMonth = function(_SchedulerTimeline) {
    _inherits(SchedulerTimelineMonth, _SchedulerTimeline);
    var _super = _createSuper(SchedulerTimelineMonth);

    function SchedulerTimelineMonth() {
        _classCallCheck(this, SchedulerTimelineMonth);
        return _super.apply(this, arguments)
    }
    _createClass(SchedulerTimelineMonth, [{
        key: "_renderView",
        value: function() {
            _get(_getPrototypeOf(SchedulerTimelineMonth.prototype), "_renderView", this).call(this);
            this._updateScrollable()
        }
    }, {
        key: "_getElementClass",
        value: function() {
            return TIMELINE_CLASS
        }
    }, {
        key: "_getDateHeaderTemplate",
        value: function() {
            return this.option("dateCellTemplate")
        }
    }, {
        key: "_getHiddenInterval",
        value: function() {
            return 0
        }
    }, {
        key: "_getIndicationFirstViewDate",
        value: function() {
            return _date.default.trimTime(new Date(this._firstViewDate))
        }
    }, {
        key: "getCellDuration",
        value: function() {
            return toMs("day")
        }
    }, {
        key: "calculateEndViewDate",
        value: function(dateOfLastViewCell) {
            return new Date(dateOfLastViewCell.getTime() + this._calculateDayDuration() * toMs("hour"))
        }
    }, {
        key: "_getCellCount",
        value: function() {
            var currentDate = this.option("currentDate");
            var cellCount = 0;
            if (this._isWorkSpaceWithCount()) {
                var intervalCount = this.option("intervalCount");
                for (var i = 1; i <= intervalCount; i++) {
                    cellCount += new Date(currentDate.getFullYear(), currentDate.getMonth() + i, 0).getDate()
                }
            } else {
                cellCount = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate()
            }
            return cellCount
        }
    }, {
        key: "_setFirstViewDate",
        value: function() {
            this._firstViewDate = _date.default.getFirstMonthDate(this.option("currentDate"));
            this._setStartDayHour(this._firstViewDate)
        }
    }, {
        key: "_getFormat",
        value: function() {
            return this._formatWeekdayAndDay
        }
    }, {
        key: "_getDateByIndex",
        value: function(headerIndex) {
            var resultDate = new Date(this._firstViewDate);
            resultDate.setDate(this._firstViewDate.getDate() + headerIndex);
            return resultDate
        }
    }, {
        key: "_getInterval",
        value: function() {
            return DAY_IN_MILLISECONDS
        }
    }, {
        key: "_getIntervalBetween",
        value: function(currentDate) {
            var firstViewDate = this.getStartViewDate();
            var timeZoneOffset = _date.default.getTimezonesDifference(firstViewDate, currentDate);
            return currentDate.getTime() - (firstViewDate.getTime() - 36e5 * this.option("startDayHour")) - timeZoneOffset
        }
    }, {
        key: "calculateEndDate",
        value: function(startDate) {
            var startDateCopy = new Date(startDate);
            return new Date(startDateCopy.setHours(this.option("endDayHour")))
        }
    }, {
        key: "_calculateHiddenInterval",
        value: function() {
            return 0
        }
    }, {
        key: "_getDateByCellIndexes",
        value: function(rowIndex, cellIndex) {
            var date = _get(_getPrototypeOf(SchedulerTimelineMonth.prototype), "_getDateByCellIndexes", this).call(this, rowIndex, cellIndex);
            this._setStartDayHour(date);
            return date
        }
    }, {
        key: "getPositionShift",
        value: function() {
            return {
                top: 0,
                left: 0,
                cellPosition: 0
            }
        }
    }]);
    return SchedulerTimelineMonth
}(_uiScheduler.default);
(0, _component_registrator.default)("dxSchedulerTimelineMonth", SchedulerTimelineMonth);
var _default = SchedulerTimelineMonth;
exports.default = _default;
module.exports = exports.default;
