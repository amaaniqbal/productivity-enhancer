/**
 * DevExtreme (ui/scheduler/workspaces/ui.scheduler.work_space.indicator.js)
 * Version: 20.2.3
 * Build date: Tue Oct 20 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
"use strict";
exports.default = void 0;
var _renderer = _interopRequireDefault(require("../../../core/renderer"));
var _uiScheduler = _interopRequireDefault(require("./ui.scheduler.work_space"));
var _component_registrator = _interopRequireDefault(require("../../../core/component_registrator"));
var _date = _interopRequireDefault(require("../../../core/utils/date"));
var _extend = require("../../../core/utils/extend");
var _position = require("../../../core/utils/position");
var _window = require("../../../core/utils/window");

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}

function _typeof(obj) {
    "@babel/helpers - typeof";
    if ("function" === typeof Symbol && "symbol" === typeof Symbol.iterator) {
        _typeof = function(obj) {
            return typeof obj
        }
    } else {
        _typeof = function(obj) {
            return obj && "function" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj
        }
    }
    return _typeof(obj)
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function")
    }
}

function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) {
            descriptor.writable = true
        }
        Object.defineProperty(target, descriptor.key, descriptor)
    }
}

function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) {
        _defineProperties(Constructor.prototype, protoProps)
    }
    if (staticProps) {
        _defineProperties(Constructor, staticProps)
    }
    return Constructor
}

function _get(target, property, receiver) {
    if ("undefined" !== typeof Reflect && Reflect.get) {
        _get = Reflect.get
    } else {
        _get = function(target, property, receiver) {
            var base = _superPropBase(target, property);
            if (!base) {
                return
            }
            var desc = Object.getOwnPropertyDescriptor(base, property);
            if (desc.get) {
                return desc.get.call(receiver)
            }
            return desc.value
        }
    }
    return _get(target, property, receiver || target)
}

function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
        object = _getPrototypeOf(object);
        if (null === object) {
            break
        }
    }
    return object
}

function _inherits(subClass, superClass) {
    if ("function" !== typeof superClass && null !== superClass) {
        throw new TypeError("Super expression must either be null or a function")
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) {
        _setPrototypeOf(subClass, superClass)
    }
}

function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function(o, p) {
        o.__proto__ = p;
        return o
    };
    return _setPrototypeOf(o, p)
}

function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function() {
        var result, Super = _getPrototypeOf(Derived);
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget)
        } else {
            result = Super.apply(this, arguments)
        }
        return _possibleConstructorReturn(this, result)
    }
}

function _possibleConstructorReturn(self, call) {
    if (call && ("object" === _typeof(call) || "function" === typeof call)) {
        return call
    }
    return _assertThisInitialized(self)
}

function _assertThisInitialized(self) {
    if (void 0 === self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
    }
    return self
}

function _isNativeReflectConstruct() {
    if ("undefined" === typeof Reflect || !Reflect.construct) {
        return false
    }
    if (Reflect.construct.sham) {
        return false
    }
    if ("function" === typeof Proxy) {
        return true
    }
    try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));
        return true
    } catch (e) {
        return false
    }
}

function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function(o) {
        return o.__proto__ || Object.getPrototypeOf(o)
    };
    return _getPrototypeOf(o)
}
var toMs = _date.default.dateToMilliseconds;
var SCHEDULER_DATE_TIME_INDICATOR_CLASS = "dx-scheduler-date-time-indicator";
var TIME_PANEL_CURRENT_TIME_CELL_CLASS = "dx-scheduler-time-panel-current-time-cell";
var HEADER_CURRENT_TIME_CELL_CLASS = "dx-scheduler-header-panel-current-time-cell";
var SchedulerWorkSpaceIndicator = function(_SchedulerWorkSpace) {
    _inherits(SchedulerWorkSpaceIndicator, _SchedulerWorkSpace);
    var _super = _createSuper(SchedulerWorkSpaceIndicator);

    function SchedulerWorkSpaceIndicator() {
        _classCallCheck(this, SchedulerWorkSpaceIndicator);
        return _super.apply(this, arguments)
    }
    _createClass(SchedulerWorkSpaceIndicator, [{
        key: "_getToday",
        value: function() {
            var date = this.option("indicatorTime") || new Date;
            return this.invoke("convertDateByTimezone", date) || date
        }
    }, {
        key: "_needRenderDateTimeIndicator",
        value: function() {
            var today = this._getToday();
            var endViewDate = _date.default.trimTime(this.getEndViewDate());
            return _date.default.dateInRange(today, this._firstViewDate, new Date(endViewDate.getTime() + toMs("day")))
        }
    }, {
        key: "needRenderDateTimeIndication",
        value: function() {
            if (!(0, _window.hasWindow)()) {
                return false
            }
            var today = this._getToday();
            return today >= _date.default.trimTime(new Date(this.getStartViewDate()))
        }
    }, {
        key: "_renderDateTimeIndication",
        value: function() {
            if (this.needRenderDateTimeIndication()) {
                if (this.option("shadeUntilCurrentTime")) {
                    this._shader.render()
                }
                if (this.option("showCurrentTimeIndicator") && this._needRenderDateTimeIndicator()) {
                    var groupCount = this._getGroupCount() || 1;
                    var $container = this._dateTableScrollable.$content();
                    var height = this.getIndicationHeight();
                    var rtlOffset = this._getRtlOffset(this.getCellWidth());
                    if (height > 0) {
                        this._renderIndicator(height, rtlOffset, $container, groupCount)
                    }
                }
            }
        }
    }, {
        key: "_renderIndicator",
        value: function(height, rtlOffset, $container, groupCount) {
            var groupedByDate = this.isGroupedByDate();
            var repeatCount = groupedByDate ? 1 : groupCount;
            for (var i = 0; i < repeatCount; i++) {
                var $indicator = this._createIndicator($container);
                $indicator.width(groupedByDate ? this.getCellWidth() * groupCount : this.getCellWidth());
                this._groupedStrategy.shiftIndicator($indicator, height, rtlOffset, i)
            }
        }
    }, {
        key: "_createIndicator",
        value: function($container) {
            var $indicator = (0, _renderer.default)("<div>").addClass(SCHEDULER_DATE_TIME_INDICATOR_CLASS);
            $container.append($indicator);
            return $indicator
        }
    }, {
        key: "_getRtlOffset",
        value: function(width) {
            return this.option("rtlEnabled") ? (0, _position.getBoundingRect)(this._dateTableScrollable.$content().get(0)).width - this.getTimePanelWidth() - width : 0
        }
    }, {
        key: "_setIndicationUpdateInterval",
        value: function() {
            if (!this.option("showCurrentTimeIndicator") || 0 === this.option("indicatorUpdateInterval")) {
                return
            }
            this._clearIndicatorUpdateInterval();
            this._indicatorInterval = setInterval(function() {
                this._refreshDateTimeIndication()
            }.bind(this), this.option("indicatorUpdateInterval"))
        }
    }, {
        key: "_clearIndicatorUpdateInterval",
        value: function() {
            if (this._indicatorInterval) {
                clearInterval(this._indicatorInterval);
                delete this._indicatorInterval
            }
        }
    }, {
        key: "_isVerticalShader",
        value: function() {
            return true
        }
    }, {
        key: "getIndicationWidth",
        value: function(groupIndex) {
            var maxWidth = this.getCellWidth() * this._getCellCount();
            var difference = this._getIndicatorDuration();
            if (difference > this._getCellCount()) {
                difference = this._getCellCount()
            }
            var width = difference * this.getRoundedCellWidth(groupIndex, groupIndex * this._getCellCount(), difference);
            return maxWidth < width ? maxWidth : width
        }
    }, {
        key: "getIndicatorOffset",
        value: function(groupIndex) {
            var difference = this._getIndicatorDuration() - 1;
            var offset = difference * this.getRoundedCellWidth(groupIndex, groupIndex * this._getCellCount(), difference);
            return offset
        }
    }, {
        key: "_getIndicatorDuration",
        value: function() {
            var today = this._getToday();
            var firstViewDate = new Date(this._firstViewDate);
            var timeDiff = today.getTime() - firstViewDate.getTime();
            if ("workWeek" === this.option("type")) {
                timeDiff -= this._getWeekendsCount(Math.round(timeDiff / toMs("day"))) * toMs("day")
            }
            return Math.ceil((timeDiff + 1) / toMs("day"))
        }
    }, {
        key: "getIndicationHeight",
        value: function() {
            var today = this._getToday();
            var cellHeight = this.getCellHeight();
            var date = new Date(this._firstViewDate);
            if (this._needRenderDateTimeIndicator()) {
                date.setFullYear(today.getFullYear(), today.getMonth(), today.getDate())
            }
            var duration = today.getTime() - date.getTime();
            var cellCount = duration / this.getCellDuration();
            return cellCount * cellHeight
        }
    }, {
        key: "_dispose",
        value: function() {
            this._clearIndicatorUpdateInterval();
            _get(_getPrototypeOf(SchedulerWorkSpaceIndicator.prototype), "_dispose", this).apply(this, arguments)
        }
    }, {
        key: "_refreshDateTimeIndication",
        value: function() {
            this._cleanDateTimeIndicator();
            this._shader && this._shader.clean();
            this._renderDateTimeIndication()
        }
    }, {
        key: "_isCurrentTime",
        value: function(date) {
            if (this.option("showCurrentTimeIndicator") && this._needRenderDateTimeIndicator()) {
                var today = this._getToday();
                var result = false;
                date = new Date(date);
                date.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());
                var startCellDate = new Date(date);
                var endCellDate = new Date(date);
                if (_date.default.sameDate(today, date)) {
                    startCellDate = startCellDate.setMilliseconds(date.getMilliseconds() - this.getCellDuration() + 1);
                    endCellDate = endCellDate.setMilliseconds(date.getMilliseconds() + this.getCellDuration());
                    result = _date.default.dateInRange(today, startCellDate, endCellDate)
                }
                return result
            }
        }
    }, {
        key: "_isCurrentTimeHeaderCell",
        value: function(headerIndex) {
            var result = false;
            if (this.option("showCurrentTimeIndicator") && this._needRenderDateTimeIndicator()) {
                var date = this._getDateByIndex(headerIndex);
                var now = this.option("indicatorTime") || new Date;
                result = _date.default.sameDate(date, now)
            }
            return result
        }
    }, {
        key: "_getTimeCellClass",
        value: function(i) {
            var startViewDate = this._getTimeCellDate(i);
            var cellClass = _get(_getPrototypeOf(SchedulerWorkSpaceIndicator.prototype), "_getTimeCellClass", this).call(this, i);
            if (this._isCurrentTime(startViewDate)) {
                return cellClass + " " + TIME_PANEL_CURRENT_TIME_CELL_CLASS
            }
            return cellClass
        }
    }, {
        key: "_getHeaderPanelCellClass",
        value: function(i) {
            var cellClass = _get(_getPrototypeOf(SchedulerWorkSpaceIndicator.prototype), "_getHeaderPanelCellClass", this).call(this, i);
            if (this._isCurrentTimeHeaderCell(i)) {
                return cellClass + " " + HEADER_CURRENT_TIME_CELL_CLASS
            }
            return cellClass
        }
    }, {
        key: "_cleanView",
        value: function() {
            _get(_getPrototypeOf(SchedulerWorkSpaceIndicator.prototype), "_cleanView", this).call(this);
            this._cleanDateTimeIndicator()
        }
    }, {
        key: "_dimensionChanged",
        value: function() {
            _get(_getPrototypeOf(SchedulerWorkSpaceIndicator.prototype), "_dimensionChanged", this).call(this);
            this._refreshDateTimeIndication()
        }
    }, {
        key: "_cleanDateTimeIndicator",
        value: function() {
            this.$element().find("." + SCHEDULER_DATE_TIME_INDICATOR_CLASS).remove()
        }
    }, {
        key: "_cleanWorkSpace",
        value: function() {
            _get(_getPrototypeOf(SchedulerWorkSpaceIndicator.prototype), "_cleanWorkSpace", this).call(this);
            this._renderDateTimeIndication();
            this._setIndicationUpdateInterval()
        }
    }, {
        key: "_optionChanged",
        value: function(args) {
            switch (args.name) {
                case "showCurrentTimeIndicator":
                case "indicatorTime":
                    this._cleanWorkSpace();
                    break;
                case "indicatorUpdateInterval":
                    this._setIndicationUpdateInterval();
                    break;
                case "showAllDayPanel":
                    _get(_getPrototypeOf(SchedulerWorkSpaceIndicator.prototype), "_optionChanged", this).call(this, args);
                    this._refreshDateTimeIndication();
                    break;
                case "allDayExpanded":
                    _get(_getPrototypeOf(SchedulerWorkSpaceIndicator.prototype), "_optionChanged", this).call(this, args);
                    this._refreshDateTimeIndication();
                    break;
                case "crossScrollingEnabled":
                    _get(_getPrototypeOf(SchedulerWorkSpaceIndicator.prototype), "_optionChanged", this).call(this, args);
                    this._refreshDateTimeIndication();
                    break;
                case "shadeUntilCurrentTime":
                    this._refreshDateTimeIndication();
                    break;
                default:
                    _get(_getPrototypeOf(SchedulerWorkSpaceIndicator.prototype), "_optionChanged", this).call(this, args)
            }
        }
    }, {
        key: "_getDefaultOptions",
        value: function() {
            return (0, _extend.extend)(_get(_getPrototypeOf(SchedulerWorkSpaceIndicator.prototype), "_getDefaultOptions", this).call(this), {
                showCurrentTimeIndicator: true,
                indicatorTime: new Date,
                indicatorUpdateInterval: 5 * toMs("minute"),
                shadeUntilCurrentTime: true
            })
        }
    }]);
    return SchedulerWorkSpaceIndicator
}(_uiScheduler.default);
(0, _component_registrator.default)("dxSchedulerWorkSpace", SchedulerWorkSpaceIndicator);
var _default = SchedulerWorkSpaceIndicator;
exports.default = _default;
module.exports = exports.default;
