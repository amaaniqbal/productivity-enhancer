/**
 * DevExtreme (ui/scheduler/dateAdapter.js)
 * Version: 20.2.3
 * Build date: Tue Oct 20 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
"use strict";
exports.default = void 0;
var _date = _interopRequireDefault(require("../../core/utils/date"));

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function")
    }
}

function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) {
            descriptor.writable = true
        }
        Object.defineProperty(target, descriptor.key, descriptor)
    }
}

function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) {
        _defineProperties(Constructor.prototype, protoProps)
    }
    if (staticProps) {
        _defineProperties(Constructor, staticProps)
    }
    return Constructor
}
var toMs = _date.default.dateToMilliseconds;
var DateAdapterCore = function() {
    function DateAdapterCore(source) {
        _classCallCheck(this, DateAdapterCore);
        this._source = new Date(source.getTime ? source.getTime() : source)
    }
    _createClass(DateAdapterCore, [{
        key: "result",
        value: function() {
            return this._source
        }
    }, {
        key: "getTimezoneOffset",
        value: function() {
            var format = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : void 0;
            var value = this._source.getTimezoneOffset();
            if ("minute" === format) {
                return value * toMs("minute")
            }
            return value
        }
    }, {
        key: "getTime",
        value: function() {
            return this._source.getTime()
        }
    }, {
        key: "setTime",
        value: function(value) {
            this._source.setTime(value);
            return this
        }
    }, {
        key: "addTime",
        value: function(value) {
            this._source.setTime(this._source.getTime() + value);
            return this
        }
    }, {
        key: "setMinutes",
        value: function(value) {
            this._source.setMinutes(value);
            return this
        }
    }, {
        key: "addMinutes",
        value: function(value) {
            this._source.setMinutes(this._source.getMinutes() + value);
            return this
        }
    }, {
        key: "subtractMinutes",
        value: function(value) {
            this._source.setMinutes(this._source.getMinutes() - value);
            return this
        }
    }, {
        key: "source",
        get: function() {
            return this._source
        }
    }]);
    return DateAdapterCore
}();
var DateAdapter = function(date) {
    return new DateAdapterCore(date)
};
var _default = DateAdapter;
exports.default = _default;
module.exports = exports.default;
