/**
 * DevExtreme (renovation/ui/data_grid/data_grid.j.js)
 * Version: 20.2.3
 * Build date: Tue Oct 20 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
"use strict";
exports.default = void 0;
var _component_registrator = _interopRequireDefault(require("../../../core/component_registrator"));
var _component = _interopRequireDefault(require("../../preact_wrapper/component"));
var _data_grid = require("./data_grid");

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        "default": obj
    }
}

function _typeof(obj) {
    "@babel/helpers - typeof";
    if ("function" === typeof Symbol && "symbol" === typeof Symbol.iterator) {
        _typeof = function(obj) {
            return typeof obj
        }
    } else {
        _typeof = function(obj) {
            return obj && "function" === typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj
        }
    }
    return _typeof(obj)
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function")
    }
}

function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) {
            descriptor.writable = true
        }
        Object.defineProperty(target, descriptor.key, descriptor)
    }
}

function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) {
        _defineProperties(Constructor.prototype, protoProps)
    }
    if (staticProps) {
        _defineProperties(Constructor, staticProps)
    }
    return Constructor
}

function _get(target, property, receiver) {
    if ("undefined" !== typeof Reflect && Reflect.get) {
        _get = Reflect.get
    } else {
        _get = function(target, property, receiver) {
            var base = _superPropBase(target, property);
            if (!base) {
                return
            }
            var desc = Object.getOwnPropertyDescriptor(base, property);
            if (desc.get) {
                return desc.get.call(receiver)
            }
            return desc.value
        }
    }
    return _get(target, property, receiver || target)
}

function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
        object = _getPrototypeOf(object);
        if (null === object) {
            break
        }
    }
    return object
}

function _inherits(subClass, superClass) {
    if ("function" !== typeof superClass && null !== superClass) {
        throw new TypeError("Super expression must either be null or a function")
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) {
        _setPrototypeOf(subClass, superClass)
    }
}

function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function(o, p) {
        o.__proto__ = p;
        return o
    };
    return _setPrototypeOf(o, p)
}

function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function() {
        var result, Super = _getPrototypeOf(Derived);
        if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;
            result = Reflect.construct(Super, arguments, NewTarget)
        } else {
            result = Super.apply(this, arguments)
        }
        return _possibleConstructorReturn(this, result)
    }
}

function _possibleConstructorReturn(self, call) {
    if (call && ("object" === _typeof(call) || "function" === typeof call)) {
        return call
    }
    return _assertThisInitialized(self)
}

function _assertThisInitialized(self) {
    if (void 0 === self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
    }
    return self
}

function _isNativeReflectConstruct() {
    if ("undefined" === typeof Reflect || !Reflect.construct) {
        return false
    }
    if (Reflect.construct.sham) {
        return false
    }
    if ("function" === typeof Proxy) {
        return true
    }
    try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));
        return true
    } catch (e) {
        return false
    }
}

function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function(o) {
        return o.__proto__ || Object.getPrototypeOf(o)
    };
    return _getPrototypeOf(o)
}
var DataGrid = function(_BaseComponent) {
    _inherits(DataGrid, _BaseComponent);
    var _super = _createSuper(DataGrid);

    function DataGrid() {
        _classCallCheck(this, DataGrid);
        return _super.apply(this, arguments)
    }
    _createClass(DataGrid, [{
        key: "getProps",
        value: function() {
            var props = _get(_getPrototypeOf(DataGrid.prototype), "getProps", this).call(this);
            props.rowTemplate = this._createTemplateComponent(props, props.rowTemplate);
            props.onKeyDown = this._wrapKeyDownHandler(props.onKeyDown);
            return props
        }
    }, {
        key: "beginCustomLoading",
        value: function(messageText) {
            return this.viewRef.beginCustomLoading(messageText)
        }
    }, {
        key: "byKey",
        value: function(key) {
            return this.viewRef.byKey(key)
        }
    }, {
        key: "cancelEditData",
        value: function() {
            return this.viewRef.cancelEditData()
        }
    }, {
        key: "cellValue",
        value: function(rowIndex, dataField, value) {
            return this.viewRef.cellValue(rowIndex, dataField, value)
        }
    }, {
        key: "clearFilter",
        value: function(filterName) {
            return this.viewRef.clearFilter(filterName)
        }
    }, {
        key: "clearSelection",
        value: function() {
            return this.viewRef.clearSelection()
        }
    }, {
        key: "clearSorting",
        value: function() {
            return this.viewRef.clearSorting()
        }
    }, {
        key: "closeEditCell",
        value: function() {
            return this.viewRef.closeEditCell()
        }
    }, {
        key: "collapseAdaptiveDetailRow",
        value: function() {
            return this.viewRef.collapseAdaptiveDetailRow()
        }
    }, {
        key: "columnCount",
        value: function() {
            return this.viewRef.columnCount()
        }
    }, {
        key: "columnOption",
        value: function(id, optionName, optionValue) {
            return this.viewRef.columnOption(id, optionName, optionValue)
        }
    }, {
        key: "deleteColumn",
        value: function(id) {
            return this.viewRef.deleteColumn(id)
        }
    }, {
        key: "deleteRow",
        value: function(rowIndex) {
            return this.viewRef.deleteRow(rowIndex)
        }
    }, {
        key: "deselectAll",
        value: function() {
            return this.viewRef.deselectAll()
        }
    }, {
        key: "deselectRows",
        value: function(keys) {
            return this.viewRef.deselectRows(keys)
        }
    }, {
        key: "editCell",
        value: function(rowIndex, dataField) {
            return this.viewRef.editCell(rowIndex, dataField)
        }
    }, {
        key: "editRow",
        value: function(rowIndex) {
            return this.viewRef.editRow(rowIndex)
        }
    }, {
        key: "endCustomLoading",
        value: function() {
            return this.viewRef.endCustomLoading()
        }
    }, {
        key: "expandAdaptiveDetailRow",
        value: function(key) {
            return this.viewRef.expandAdaptiveDetailRow(key)
        }
    }, {
        key: "filter",
        value: function(filterExpr) {
            return this.viewRef.filter(filterExpr)
        }
    }, {
        key: "focus",
        value: function(element) {
            return this.viewRef.focus(this._patchElementParam(element))
        }
    }, {
        key: "getCellElement",
        value: function(rowIndex, dataField) {
            return this.viewRef.getCellElement(rowIndex, dataField)
        }
    }, {
        key: "getCombinedFilter",
        value: function(returnDataField) {
            return this.viewRef.getCombinedFilter(returnDataField)
        }
    }, {
        key: "getDataSource",
        value: function() {
            return this.viewRef.getDataSource()
        }
    }, {
        key: "getKeyByRowIndex",
        value: function(rowIndex) {
            return this.viewRef.getKeyByRowIndex(rowIndex)
        }
    }, {
        key: "getRowElement",
        value: function(rowIndex) {
            return this.viewRef.getRowElement(rowIndex)
        }
    }, {
        key: "getRowIndexByKey",
        value: function(key) {
            return this.viewRef.getRowIndexByKey(key)
        }
    }, {
        key: "getScrollable",
        value: function() {
            return this.viewRef.getScrollable()
        }
    }, {
        key: "getVisibleColumnIndex",
        value: function(id) {
            return this.viewRef.getVisibleColumnIndex(id)
        }
    }, {
        key: "hasEditData",
        value: function() {
            return this.viewRef.hasEditData()
        }
    }, {
        key: "hideColumnChooser",
        value: function() {
            return this.viewRef.hideColumnChooser()
        }
    }, {
        key: "isAdaptiveDetailRowExpanded",
        value: function(key) {
            return this.viewRef.isAdaptiveDetailRowExpanded(key)
        }
    }, {
        key: "isRowFocused",
        value: function(key) {
            return this.viewRef.isRowFocused(key)
        }
    }, {
        key: "isRowSelected",
        value: function(key) {
            return this.viewRef.isRowSelected(key)
        }
    }, {
        key: "keyOf",
        value: function(obj) {
            return this.viewRef.keyOf(obj)
        }
    }, {
        key: "navigateToRow",
        value: function(key) {
            return this.viewRef.navigateToRow(key)
        }
    }, {
        key: "pageCount",
        value: function() {
            return this.viewRef.pageCount()
        }
    }, {
        key: "pageIndex",
        value: function(newIndex) {
            return this.viewRef.pageIndex(newIndex)
        }
    }, {
        key: "pageSize",
        value: function(value) {
            return this.viewRef.pageSize(value)
        }
    }, {
        key: "refresh",
        value: function(changesOnly) {
            return this.viewRef.refresh(changesOnly)
        }
    }, {
        key: "repaintRows",
        value: function(rowIndexes) {
            return this.viewRef.repaintRows(rowIndexes)
        }
    }, {
        key: "saveEditData",
        value: function() {
            return this.viewRef.saveEditData()
        }
    }, {
        key: "searchByText",
        value: function(text) {
            return this.viewRef.searchByText(text)
        }
    }, {
        key: "selectAll",
        value: function() {
            return this.viewRef.selectAll()
        }
    }, {
        key: "selectRows",
        value: function(keys, preserve) {
            return this.viewRef.selectRows(keys, preserve)
        }
    }, {
        key: "selectRowsByIndexes",
        value: function(indexes) {
            return this.viewRef.selectRowsByIndexes(indexes)
        }
    }, {
        key: "showColumnChooser",
        value: function() {
            return this.viewRef.showColumnChooser()
        }
    }, {
        key: "undeleteRow",
        value: function(rowIndex) {
            return this.viewRef.undeleteRow(rowIndex)
        }
    }, {
        key: "updateDimensions",
        value: function() {
            return this.viewRef.updateDimensions()
        }
    }, {
        key: "addColumn",
        value: function(columnOptions) {
            return this.viewRef.addColumn(columnOptions)
        }
    }, {
        key: "addRow",
        value: function() {
            return this.viewRef.addRow()
        }
    }, {
        key: "clearGrouping",
        value: function() {
            return this.viewRef.clearGrouping()
        }
    }, {
        key: "collapseAll",
        value: function(groupIndex) {
            return this.viewRef.collapseAll(groupIndex)
        }
    }, {
        key: "collapseRow",
        value: function(key) {
            return this.viewRef.collapseRow(key)
        }
    }, {
        key: "expandAll",
        value: function(groupIndex) {
            return this.viewRef.expandAll(groupIndex)
        }
    }, {
        key: "expandRow",
        value: function(key) {
            return this.viewRef.expandRow(key)
        }
    }, {
        key: "exportToExcel",
        value: function(selectionOnly) {
            return this.viewRef.exportToExcel(selectionOnly)
        }
    }, {
        key: "getSelectedRowKeys",
        value: function() {
            return this.viewRef.getSelectedRowKeys()
        }
    }, {
        key: "getSelectedRowsData",
        value: function() {
            return this.viewRef.getSelectedRowsData()
        }
    }, {
        key: "getTotalSummaryValue",
        value: function(summaryItemName) {
            return this.viewRef.getTotalSummaryValue(summaryItemName)
        }
    }, {
        key: "getVisibleColumns",
        value: function(headerLevel) {
            return this.viewRef.getVisibleColumns(headerLevel)
        }
    }, {
        key: "getVisibleRows",
        value: function() {
            return this.viewRef.getVisibleRows()
        }
    }, {
        key: "isRowExpanded",
        value: function(key) {
            return this.viewRef.isRowExpanded(key)
        }
    }, {
        key: "totalCount",
        value: function() {
            return this.viewRef.totalCount()
        }
    }, {
        key: "getController",
        value: function(name) {
            return this.viewRef.getController(name)
        }
    }, {
        key: "_getActionConfigs",
        value: function() {
            return {
                onCellClick: {},
                onCellDblClick: {},
                onCellHoverChanged: {},
                onCellPrepared: {},
                onContextMenuPreparing: {},
                onEditingStart: {},
                onEditorPrepared: {},
                onEditorPreparing: {},
                onExported: {},
                onExporting: {},
                onFileSaving: {},
                onFocusedCellChanged: {},
                onFocusedCellChanging: {},
                onFocusedRowChanged: {},
                onFocusedRowChanging: {},
                onRowClick: {},
                onRowDblClick: {},
                onRowPrepared: {},
                onAdaptiveDetailRowPreparing: {},
                onDataErrorOccurred: {},
                onInitNewRow: {},
                onRowCollapsed: {},
                onRowCollapsing: {},
                onRowExpanded: {},
                onRowExpanding: {},
                onRowInserted: {},
                onRowInserting: {},
                onRowRemoved: {},
                onRowRemoving: {},
                onRowUpdated: {},
                onRowUpdating: {},
                onRowValidating: {},
                onSelectionChanged: {},
                onToolbarPreparing: {},
                onActive: {},
                onDimensionChanged: {},
                onInactive: {},
                onKeyboardHandled: {},
                onVisibilityChange: {},
                onFocusIn: {},
                onFocusOut: {},
                onClick: {},
                onContentReady: {
                    excludeValidators: ["disabled", "readOnly"]
                }
            }
        }
    }, {
        key: "_propsInfo",
        get: function() {
            return {
                twoWay: [
                    ["filterValue", null, "filterValueChange"],
                    ["focusedColumnIndex", -1, "focusedColumnIndexChange"],
                    ["focusedRowIndex", -1, "focusedRowIndexChange"],
                    ["focusedRowKey", null, "focusedRowKeyChange"],
                    ["selectedRowKeys", [], "selectedRowKeysChange"],
                    ["selectionFilter", [], "selectionFilterChange"]
                ],
                allowNull: ["defaultFilterValue", "defaultFocusedRowKey", "accessKey", "filterValue", "focusedRowKey"],
                elements: []
            }
        }
    }, {
        key: "_viewComponent",
        get: function() {
            return _data_grid.DataGrid
        }
    }]);
    return DataGrid
}(_component.default);
exports.default = DataGrid;
(0, _component_registrator.default)("dxDataGrid", DataGrid);
module.exports = exports.default;
